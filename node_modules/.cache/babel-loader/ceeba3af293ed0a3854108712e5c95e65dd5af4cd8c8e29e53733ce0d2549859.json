{"ast":null,"code":"import firebase from '@firebase/app';\nimport { __extends, __spreadArray, __awaiter, __generator, __assign } from 'tslib';\nimport { FirebaseError, createMockUserToken, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n/**\r\n * Domain name for firebase storage.\r\n */\nvar DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\nvar CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\nvar DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\nvar DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\nvar FirebaseStorageError = /** @class */function (_super) {\n  __extends(FirebaseStorageError, _super);\n  /**\r\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   */\n  function FirebaseStorageError(code, message) {\n    var _this = _super.call(this, prependCode(code), \"Firebase Storage: \" + message + \" (\" + prependCode(code) + \")\") || this;\n    /**\r\n     * Stores custom error data unque to FirebaseStorageError.\r\n     */\n    _this.customData = {\n      serverResponse: null\n    };\n    _this._baseMessage = _this.message;\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(_this, FirebaseStorageError.prototype);\n    return _this;\n  }\n  /**\r\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n   */\n  FirebaseStorageError.prototype._codeEquals = function (code) {\n    return prependCode(code) === this.code;\n  };\n  Object.defineProperty(FirebaseStorageError.prototype, \"serverResponse\", {\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\n    get: function () {\n      return this.customData.serverResponse;\n    },\n    set: function (serverResponse) {\n      this.customData.serverResponse = serverResponse;\n      if (this.customData.serverResponse) {\n        this.message = this._baseMessage + \"\\n\" + this.customData.serverResponse;\n      } else {\n        this.message = this._baseMessage;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return FirebaseStorageError;\n}(FirebaseError);\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\nfunction unknown() {\n  var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new FirebaseStorageError(\"unknown\" /* UNKNOWN */, message);\n}\nfunction objectNotFound(path) {\n  return new FirebaseStorageError(\"object-not-found\" /* OBJECT_NOT_FOUND */, \"Object '\" + path + \"' does not exist.\");\n}\nfunction quotaExceeded(bucket) {\n  return new FirebaseStorageError(\"quota-exceeded\" /* QUOTA_EXCEEDED */, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\nfunction unauthenticated() {\n  var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new FirebaseStorageError(\"unauthenticated\" /* UNAUTHENTICATED */, message);\n}\nfunction unauthorizedApp() {\n  return new FirebaseStorageError(\"unauthorized-app\" /* UNAUTHORIZED_APP */, 'This app does not have permission to access Firebase Storage on this project.');\n}\nfunction unauthorized(path) {\n  return new FirebaseStorageError(\"unauthorized\" /* UNAUTHORIZED */, \"User does not have permission to access '\" + path + \"'.\");\n}\nfunction retryLimitExceeded() {\n  return new FirebaseStorageError(\"retry-limit-exceeded\" /* RETRY_LIMIT_EXCEEDED */, 'Max retry time for operation exceeded, please try again.');\n}\nfunction canceled() {\n  return new FirebaseStorageError(\"canceled\" /* CANCELED */, 'User canceled the upload/download.');\n}\nfunction invalidUrl(url) {\n  return new FirebaseStorageError(\"invalid-url\" /* INVALID_URL */, \"Invalid URL '\" + url + \"'.\");\n}\nfunction invalidDefaultBucket(bucket) {\n  return new FirebaseStorageError(\"invalid-default-bucket\" /* INVALID_DEFAULT_BUCKET */, \"Invalid default bucket '\" + bucket + \"'.\");\n}\nfunction noDefaultBucket() {\n  return new FirebaseStorageError(\"no-default-bucket\" /* NO_DEFAULT_BUCKET */, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\nfunction cannotSliceBlob() {\n  return new FirebaseStorageError(\"cannot-slice-blob\" /* CANNOT_SLICE_BLOB */, 'Cannot slice blob for upload. Please retry the upload.');\n}\nfunction serverFileWrongSize() {\n  return new FirebaseStorageError(\"server-file-wrong-size\" /* SERVER_FILE_WRONG_SIZE */, 'Server recorded incorrect upload file size, please retry the upload.');\n}\nfunction noDownloadURL() {\n  return new FirebaseStorageError(\"no-download-url\" /* NO_DOWNLOAD_URL */, 'The given file does not have any download URLs.');\n}\nfunction invalidArgument(message) {\n  return new FirebaseStorageError(\"invalid-argument\" /* INVALID_ARGUMENT */, message);\n}\nfunction appDeleted() {\n  return new FirebaseStorageError(\"app-deleted\" /* APP_DELETED */, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n */\nfunction invalidRootOperation(name) {\n  return new FirebaseStorageError(\"invalid-root-operation\" /* INVALID_ROOT_OPERATION */, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\nfunction invalidFormat(format, message) {\n  return new FirebaseStorageError(\"invalid-format\" /* INVALID_FORMAT */, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\nfunction internalError(message) {\n  throw new FirebaseStorageError(\"internal-error\" /* INTERNAL_ERROR */, 'Internal error: ' + message);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Converts a Base64 encoded string to a binary string. */\nfunction decodeBase64(encoded) {\n  return atob(encoded);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\nvar StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\nvar StringData = /** @class */function () {\n  function StringData(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n  return StringData;\n}();\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  }\n  // assert(false);\n  throw unknown();\n}\nfunction utf8Bytes_(value) {\n  var b = [];\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            var hi = c;\n            var lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\nfunction percentEncodedBytes_(value) {\n  var decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        var hasMinus = value.indexOf('-') !== -1;\n        var hasUnder = value.indexOf('_') !== -1;\n        if (hasMinus || hasUnder) {\n          var invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n        break;\n      }\n    case StringFormat.BASE64URL:\n      {\n        var hasPlus = value.indexOf('+') !== -1;\n        var hasSlash = value.indexOf('/') !== -1;\n        if (hasPlus || hasSlash) {\n          var invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  var bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  var array = new Uint8Array(bytes.length);\n  for (var i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\nvar DataURLParts = /** @class */function () {\n  function DataURLParts(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    var matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n    var middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n  return DataURLParts;\n}();\nfunction dataURLBytes_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\nfunction dataURLContentType_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\nfunction endsWith(s, end) {\n  var longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n  return s.substring(s.length - end.length) === end;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An event that is triggered on a task.\r\n */\nvar TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n};\n/**\r\n * Represents the current state of a running upload.\r\n */\nvar TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\" /* RUNNING */:\n    case \"pausing\" /* PAUSING */:\n    case \"canceling\" /* CANCELING */:\n      return TaskState.RUNNING;\n    case \"paused\" /* PAUSED */:\n      return TaskState.PAUSED;\n    case \"success\" /* SUCCESS */:\n      return TaskState.SUCCESS;\n    case \"canceled\" /* CANCELED */:\n      return TaskState.CANCELED;\n    case \"error\" /* ERROR */:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\nvar ErrorCode;\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\nvar XhrConnection = /** @class */function () {\n  function XhrConnection() {\n    var _this = this;\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(function (resolve) {\n      _this.xhr_.addEventListener('abort', function () {\n        _this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      _this.xhr_.addEventListener('error', function () {\n        _this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      _this.xhr_.addEventListener('load', function () {\n        resolve();\n      });\n    });\n  }\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.send = function (url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (var key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  };\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.getErrorCode = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  };\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.getStatus = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  };\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.getResponseText = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  };\n  /**\r\n   * Aborts the request.\r\n   * @override\r\n   */\n  XhrConnection.prototype.abort = function () {\n    this.xhr_.abort();\n  };\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.getResponseHeader = function (header) {\n    return this.xhr_.getResponseHeader(header);\n  };\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.addUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  };\n  /**\r\n   * @override\r\n   */\n  XhrConnection.prototype.removeUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  };\n  return XhrConnection;\n}();\nfunction newConnection() {\n  return new XhrConnection();\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Factory-like class for creating XhrIo instances.\r\n */\nvar ConnectionPool = /** @class */function () {\n  function ConnectionPool() {}\n  ConnectionPool.prototype.createConnection = function () {\n    return newConnection();\n  };\n  return ConnectionPool;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\nvar Location = /** @class */function () {\n  function Location(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n  Object.defineProperty(Location.prototype, \"path\", {\n    get: function () {\n      return this.path_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Location.prototype, \"isRoot\", {\n    get: function () {\n      return this.path.length === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Location.prototype.fullServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  };\n  Location.prototype.bucketOnlyServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  };\n  Location.makeFromBucketSpec = function (bucketString, host) {\n    var bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  };\n  Location.makeFromUrl = function (url, host) {\n    var location = null;\n    var bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    var gsPath = '(/(.*))?$';\n    var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    var gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    var version = 'v[A-Za-z0-9_]+';\n    var firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    var firebaseStoragePath = '(/([^?#]*).*)?$';\n    var firebaseStorageRegExp = new RegExp(\"^https?://\" + firebaseStorageHost + \"/\" + version + \"/b/\" + bucketDomain + \"/o\" + firebaseStoragePath, 'i');\n    var firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    var cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n    var cloudStoragePath = '([^?#]*)';\n    var cloudStorageRegExp = new RegExp(\"^https?://\" + cloudStorageHost + \"/\" + bucketDomain + \"/\" + cloudStoragePath, 'i');\n    var cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    var groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n      var captures = group.regex.exec(url);\n      if (captures) {\n        var bucketValue = captures[group.indices.bucket];\n        var pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  };\n  return Location;\n}();\n\n/**\r\n * A request whose promise always fails.\r\n */\nvar FailRequest = /** @class */function () {\n  function FailRequest(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n  FailRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n  FailRequest.prototype.cancel = function (_appDelete) {};\n  return FailRequest;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\nfunction start(f,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  var waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var timeoutId = null;\n  var hitTimeout = false;\n  var cancelState = 0;\n  function canceled() {\n    return cancelState === 2;\n  }\n  var triggeredCallback = false;\n  function triggerCallback() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n  function callWithDelay(millis) {\n    timeoutId = setTimeout(function () {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n  function handler(success) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call.apply(triggerCallback, __spreadArray([null, success], args));\n      return;\n    }\n    var mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call.apply(triggerCallback, __spreadArray([null, success], args));\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    var waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  var stopped = false;\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(function () {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\nfunction stop(id) {\n  id(false);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isJustDef(p) {\n  return p !== void 0;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(\"Invalid value for '\" + argument + \"'. Expected \" + minValue + \" or greater.\");\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\"Invalid value for '\" + argument + \"'. Expected \" + maxValue + \" or less.\");\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction makeUrl(urlPart, host) {\n  var protocolMatch = host.match(/^(\\w+):\\/\\/.+/);\n  var protocol = protocolMatch === null || protocolMatch === void 0 ? void 0 : protocolMatch[1];\n  var origin = host;\n  if (protocol == null) {\n    origin = \"https://\" + host;\n  }\n  return origin + \"/v0\" + urlPart;\n}\nfunction makeQueryString(params) {\n  var encode = encodeURIComponent;\n  var queryPart = '?';\n  for (var key in params) {\n    if (params.hasOwnProperty(key)) {\n      var nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar NetworkRequest = /** @class */function () {\n  function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {\n    var _this = this;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise(function (resolve, reject) {\n      _this.resolve_ = resolve;\n      _this.reject_ = reject;\n      _this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n  NetworkRequest.prototype.start_ = function () {\n    var self = this;\n    function doTheRequest(backoffCallback, canceled) {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      var connection = self.pool_.createConnection();\n      self.pendingConnection_ = connection;\n      function progressListener(progressEvent) {\n        var loaded = progressEvent.loaded;\n        var total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection.send(self.url_, self.method_, self.body_, self.headers_).then(function () {\n        if (self.progressCallback_ !== null) {\n          connection.removeUploadProgressListener(progressListener);\n        }\n        self.pendingConnection_ = null;\n        var hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n        var status = connection.getStatus();\n        if (!hitServer || self.isRetryStatusCode_(status)) {\n          var wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n        var successCode = self.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, connection));\n      });\n    }\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n    function backoffDone(requestWentThrough, status) {\n      var resolve = self.resolve_;\n      var reject = self.reject_;\n      var connection = status.connection;\n      if (status.wasSuccessCode) {\n        try {\n          var result = self.callback_(connection, connection.getResponseText());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          var err = unknown();\n          err.serverResponse = connection.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            var err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            var err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  };\n  /** @inheritDoc */\n  NetworkRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n  NetworkRequest.prototype.cancel = function (appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  };\n  NetworkRequest.prototype.isRetryStatusCode_ = function (status) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    var isFiveHundredCode = status >= 500 && status < 600;\n    var extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429];\n    var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  };\n  return NetworkRequest;\n}();\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\nvar RequestEndStatus = /** @class */function () {\n  function RequestEndStatus(wasSuccessCode, connection, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.connection = connection;\n    this.canceled = !!canceled;\n  }\n  return RequestEndStatus;\n}();\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, pool, firebaseVersion) {\n  var queryPart = makeQueryString(requestInfo.urlParams);\n  var url = requestInfo.url + queryPart;\n  var headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\nfunction getBlob() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    var bb = new BlobBuilder();\n    for (var i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\"unsupported-environment\" /* UNSUPPORTED_ENVIRONMENT */, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\nvar FbsBlob = /** @class */function () {\n  function FbsBlob(data, elideCopy) {\n    var size = 0;\n    var blobType = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n  FbsBlob.prototype.size = function () {\n    return this.size_;\n  };\n  FbsBlob.prototype.type = function () {\n    return this.type_;\n  };\n  FbsBlob.prototype.slice = function (startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      var realBlob = this.data_;\n      var sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  };\n  FbsBlob.getBlob = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (isNativeBlobDefined()) {\n      var blobby = args.map(function (val) {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      var uint8Arrays = args.map(function (val) {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      var finalLength_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        finalLength_1 += array.byteLength;\n      });\n      var merged_1 = new Uint8Array(finalLength_1);\n      var index_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        for (var i = 0; i < array.length; i++) {\n          merged_1[index_1++] = array[i];\n        }\n      });\n      return new FbsBlob(merged_1, true);\n    }\n  };\n  FbsBlob.prototype.uploadData = function () {\n    return this.data_;\n  };\n  return FbsBlob;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\nfunction jsonObjectOrNull(s) {\n  var obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n/**\r\n * @return Null if the path is already at the root.\r\n */\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n  var index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  var newPath = path.slice(0, index);\n  return newPath;\n}\nfunction child(path, childPath) {\n  var canonicalChildPath = childPath.split('/').filter(function (component) {\n    return component.length > 0;\n  }).join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\nfunction lastComponent(path) {\n  var index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction noXform_(metadata, value) {\n  return value;\n}\nvar Mapping = /** @class */function () {\n  function Mapping(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n  return Mapping;\n}();\nvar mappings_ = null;\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n  var mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n  var nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  var sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\nfunction addRef(metadata, service) {\n  function generateRef() {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\nfunction fromResource(service, resource, mappings) {\n  var metadata = {};\n  metadata['type'] = 'file';\n  var len = mappings.length;\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n  addRef(metadata, service);\n  return metadata;\n}\nfunction fromResourceString(service, resourceString, mappings) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  var resource = obj;\n  return fromResource(service, resource, mappings);\n}\nfunction downloadUrlFromResourceString(metadata, resourceString, host) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  var tokens = obj['downloadTokens'];\n  if (tokens.length === 0) {\n    return null;\n  }\n  var encode = encodeURIComponent;\n  var tokensList = tokens.split(',');\n  var urls = tokensList.map(function (token) {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    var base = makeUrl(urlPart, host);\n    var queryString = makeQueryString({\n      alt: 'media',\n      token: token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\nfunction toResourceString(metadata, mappings) {\n  var resource = {};\n  var len = mappings.length;\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PREFIXES_KEY = 'prefixes';\nvar ITEMS_KEY = 'items';\nfunction fromBackendResponse(service, bucket, resource) {\n  var listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++) {\n      var path = _a[_i];\n      var pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      var reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n      listResult.prefixes.push(reference);\n    }\n  }\n  if (resource[ITEMS_KEY]) {\n    for (var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++) {\n      var item = _c[_b];\n      var reference = service._makeStorageReference(new Location(bucket, item['name']));\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\nfunction fromResponseString(service, bucket, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  var resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\nvar RequestInfo = /** @class */function () {\n  function RequestInfo(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n  return RequestInfo;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\r\n */\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n  return handler;\n}\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    var listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n  return handler;\n}\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host);\n  }\n  return handler;\n}\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    var newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n      // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getResponseText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction objectErrorHandler(location) {\n  var shared = sharedErrorHandler(location);\n  function errorHandler(xhr, err) {\n    var newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction getMetadata$2(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  var urlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  var urlPart = location.bucketOnlyServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\nfunction getDownloadUrl(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'PATCH';\n  var body = toResourceString(metadata, mappings);\n  var headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction deleteObject$2(service, location) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host);\n  var method = 'DELETE';\n  var timeout = service.maxOperationRetryTime;\n  function handler(_xhr, _text) {}\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\nfunction metadataForUpload_(location, blob, metadata) {\n  var metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n  function genBoundary() {\n    var str = '';\n    for (var i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  var boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  var metadata_ = metadataForUpload_(location, blob, metadata);\n  var metadataString = toResourceString(metadata_, mappings);\n  var preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  var postBlobPart = '\\r\\n--' + boundary + '--';\n  var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  var urlParams = {\n    name: metadata_['fullPath']\n  };\n  var url = makeUrl(urlPart, service.host);\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\nvar ResumableUploadStatus = /** @class */function () {\n  function ResumableUploadStatus(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n  return ResumableUploadStatus;\n}();\nfunction checkResumeHeader_(xhr, allowed) {\n  var status = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  var allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var metadataForUpload = metadataForUpload_(location, blob, metadata);\n  var urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  var url = makeUrl(urlPart, service.host);\n  var method = 'POST';\n  var headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': \"\" + blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var body = toResourceString(metadataForUpload, mappings);\n  var timeout = service.maxUploadRetryTime;\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    var url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url;\n  }\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\nfunction getResumableUploadStatus(service, location, url, blob) {\n  var headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n  function handler(xhr) {\n    var status = checkResumeHeader_(xhr, ['active', 'final']);\n    var sizeString = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n    var size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\nvar RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  var status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  var bytesLeft = status_.total - status_.current;\n  var bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  var startByte = status_.current;\n  var endByte = startByte + bytesToUpload;\n  var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  var headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': \"\" + status_.current\n  };\n  var body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    var newCurrent = status_.current + bytesToUpload;\n    var size = blob.size();\n    var metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Observer = /** @class */function () {\n  function Observer(nextOrObserver, error, complete) {\n    var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      var observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n  return Observer;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction async(f) {\n  return function () {\n    var argsToForward = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      argsToForward[_i] = arguments[_i];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(function () {\n      return f.apply(void 0, argsToForward);\n    });\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\nvar UploadTask = /** @class */function () {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  function UploadTask(ref, blob, metadata) {\n    var _this = this;\n    if (metadata === void 0) {\n      metadata = null;\n    }\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\" /* RUNNING */;\n    this._errorHandler = function (error) {\n      _this._request = undefined;\n      _this._chunkMultiplier = 1;\n      if (error._codeEquals(\"canceled\" /* CANCELED */)) {\n        _this._needToFetchStatus = true;\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n        _this._transition(\"error\" /* ERROR */);\n      }\n    };\n\n    this._metadataErrorHandler = function (error) {\n      _this._request = undefined;\n      if (error._codeEquals(\"canceled\" /* CANCELED */)) {\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n        _this._transition(\"error\" /* ERROR */);\n      }\n    };\n\n    this._promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n      _this._start();\n    });\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, function () {});\n  }\n  UploadTask.prototype._makeProgressCallback = function () {\n    var _this = this;\n    var sizeBefore = this._transferred;\n    return function (loaded) {\n      return _this._updateProgress(sizeBefore + loaded);\n    };\n  };\n  UploadTask.prototype._shouldDoResumable = function (blob) {\n    return blob.size() > 256 * 1024;\n  };\n  UploadTask.prototype._start = function () {\n    if (this._state !== \"running\" /* RUNNING */) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  };\n  UploadTask.prototype._resolveToken = function (callback) {\n    var _this = this;\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(function (_a) {\n      var authToken = _a[0],\n        appCheckToken = _a[1];\n      switch (_this._state) {\n        case \"running\" /* RUNNING */:\n          callback(authToken, appCheckToken);\n          break;\n        case \"canceling\" /* CANCELING */:\n          _this._transition(\"canceled\" /* CANCELED */);\n          break;\n        case \"pausing\" /* PAUSING */:\n          _this._transition(\"paused\" /* PAUSED */);\n          break;\n      }\n    });\n  };\n  // TODO(andysoto): assert false\n  UploadTask.prototype._createResumable = function () {\n    var _this = this;\n    this._resolveToken(function (authToken, appCheckToken) {\n      var requestInfo = createResumableUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n      var createRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n      _this._request = createRequest;\n      createRequest.getPromise().then(function (url) {\n        _this._request = undefined;\n        _this._uploadUrl = url;\n        _this._needToFetchStatus = false;\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._fetchStatus = function () {\n    var _this = this;\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    var url = this._uploadUrl;\n    this._resolveToken(function (authToken, appCheckToken) {\n      var requestInfo = getResumableUploadStatus(_this._ref.storage, _this._ref._location, url, _this._blob);\n      var statusRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n      _this._request = statusRequest;\n      statusRequest.getPromise().then(function (status) {\n        status = status;\n        _this._request = undefined;\n        _this._updateProgress(status.current);\n        _this._needToFetchStatus = false;\n        if (status.finalized) {\n          _this._needToFetchMetadata = true;\n        }\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._continueUpload = function () {\n    var _this = this;\n    var chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    var status = new ResumableUploadStatus(this._transferred, this._blob.size());\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    var url = this._uploadUrl;\n    this._resolveToken(function (authToken, appCheckToken) {\n      var requestInfo;\n      try {\n        requestInfo = continueResumableUpload(_this._ref._location, _this._ref.storage, url, _this._blob, chunkSize, _this._mappings, status, _this._makeProgressCallback());\n      } catch (e) {\n        _this._error = e;\n        _this._transition(\"error\" /* ERROR */);\n        return;\n      }\n      var uploadRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n      _this._request = uploadRequest;\n      uploadRequest.getPromise().then(function (newStatus) {\n        _this._increaseMultiplier();\n        _this._request = undefined;\n        _this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          _this._metadata = newStatus.metadata;\n          _this._transition(\"success\" /* SUCCESS */);\n        } else {\n          _this.completeTransitions_();\n        }\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._increaseMultiplier = function () {\n    var currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  };\n  UploadTask.prototype._fetchMetadata = function () {\n    var _this = this;\n    this._resolveToken(function (authToken, appCheckToken) {\n      var requestInfo = getMetadata$2(_this._ref.storage, _this._ref._location, _this._mappings);\n      var metadataRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n      _this._request = metadataRequest;\n      metadataRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n        _this._transition(\"success\" /* SUCCESS */);\n      }, _this._metadataErrorHandler);\n    });\n  };\n  UploadTask.prototype._oneShotUpload = function () {\n    var _this = this;\n    this._resolveToken(function (authToken, appCheckToken) {\n      var requestInfo = multipartUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n      var multipartRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);\n      _this._request = multipartRequest;\n      multipartRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n        _this._updateProgress(_this._blob.size());\n        _this._transition(\"success\" /* SUCCESS */);\n      }, _this._errorHandler);\n    });\n  };\n  UploadTask.prototype._updateProgress = function (transferred) {\n    var old = this._transferred;\n    this._transferred = transferred;\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  };\n  UploadTask.prototype._transition = function (state) {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case \"canceling\" /* CANCELING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case \"pausing\" /* PAUSING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case \"running\" /* RUNNING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        var wasPaused = this._state === \"paused\" /* PAUSED */;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case \"paused\" /* PAUSED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"canceled\" /* CANCELED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"error\" /* ERROR */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"success\" /* SUCCESS */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n    }\n  };\n  UploadTask.prototype.completeTransitions_ = function () {\n    switch (this._state) {\n      case \"pausing\" /* PAUSING */:\n        this._transition(\"paused\" /* PAUSED */);\n        break;\n      case \"canceling\" /* CANCELING */:\n        this._transition(\"canceled\" /* CANCELED */);\n        break;\n      case \"running\" /* RUNNING */:\n        this._start();\n        break;\n    }\n  };\n  Object.defineProperty(UploadTask.prototype, \"snapshot\", {\n    /**\r\n     * A snapshot of the current task state.\r\n     */\n    get: function () {\n      var externalState = taskStateFromInternalTaskState(this._state);\n      return {\n        bytesTransferred: this._transferred,\n        totalBytes: this._blob.size(),\n        state: externalState,\n        metadata: this._metadata,\n        task: this,\n        ref: this._ref\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   * @param nextOrObserver -\r\n   *     The `next` function, which gets called for each item in\r\n   *     the event stream, or an observer object with some or all of these three\r\n   *     properties (`next`, `error`, `complete`).\r\n   * @param error - A function that gets called with a `FirebaseStorageError`\r\n   *     if the event stream ends due to an error.\r\n   * @param completed - A function that gets called if the\r\n   *     event stream ends normally.\r\n   * @returns\r\n   *     If only the event argument is passed, returns a function you can use to\r\n   *     add callbacks (see the examples above). If more than just the event\r\n   *     argument is passed, returns a function you can call to unregister the\r\n   *     callbacks.\r\n   */\n  UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n    var observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return function () {\n      _this._removeObserver(observer);\n    };\n  };\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n  UploadTask.prototype.then = function (onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  };\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n  UploadTask.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected);\n  };\n  /**\r\n   * Adds the given observer.\r\n   */\n  UploadTask.prototype._addObserver = function (observer) {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  };\n  /**\r\n   * Removes the given observer.\r\n   */\n  UploadTask.prototype._removeObserver = function (observer) {\n    var i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  };\n  UploadTask.prototype._notifyObservers = function () {\n    var _this = this;\n    this._finishPromise();\n    var observers = this._observers.slice();\n    observers.forEach(function (observer) {\n      _this._notifyObserver(observer);\n    });\n  };\n  UploadTask.prototype._finishPromise = function () {\n    if (this._resolve !== undefined) {\n      var triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          var toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  };\n  UploadTask.prototype._notifyObserver = function (observer) {\n    var externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n    }\n  };\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  UploadTask.prototype.resume = function () {\n    var valid = this._state === \"paused\" /* PAUSED */ || this._state === \"pausing\" /* PAUSING */;\n    if (valid) {\n      this._transition(\"running\" /* RUNNING */);\n    }\n\n    return valid;\n  };\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  UploadTask.prototype.pause = function () {\n    var valid = this._state === \"running\" /* RUNNING */;\n    if (valid) {\n      this._transition(\"pausing\" /* PAUSING */);\n    }\n\n    return valid;\n  };\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  UploadTask.prototype.cancel = function () {\n    var valid = this._state === \"running\" /* RUNNING */ || this._state === \"pausing\" /* PAUSING */;\n    if (valid) {\n      this._transition(\"canceling\" /* CANCELING */);\n    }\n\n    return valid;\n  };\n  return UploadTask;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\nvar Reference = /** @class */function () {\n  function Reference(_service, location) {\n    this._service = _service;\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n  Reference.prototype.toString = function () {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  };\n  Reference.prototype._newRef = function (service, location) {\n    return new Reference(service, location);\n  };\n  Object.defineProperty(Reference.prototype, \"root\", {\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\n    get: function () {\n      var location = new Location(this._location.bucket, '');\n      return this._newRef(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"bucket\", {\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\n    get: function () {\n      return this._location.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"fullPath\", {\n    /**\r\n     * The full path of this object.\r\n     */\n    get: function () {\n      return this._location.path;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"name\", {\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\n    get: function () {\n      return lastComponent(this._location.path);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"storage\", {\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\n    get: function () {\n      return this._service;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\n    get: function () {\n      var newPath = parent(this._location.path);\n      if (newPath === null) {\n        return null;\n      }\n      var location = new Location(this._location.bucket, newPath);\n      return new Reference(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Utility function to throw an error in methods that do not accept a root reference.\r\n   */\n  Reference.prototype._throwIfRoot = function (name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n  return Reference;\n}();\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll$1(ref) {\n  var accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(function () {\n    return accumulator;\n  });\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\nfunction listAllHelper(ref, accumulator, pageToken) {\n  return __awaiter(this, void 0, void 0, function () {\n    var opt, nextPage;\n    var _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          opt = {\n            // maxResults is 1000 by default.\n            pageToken: pageToken\n          };\n          return [4 /*yield*/, list$1(ref, opt)];\n        case 1:\n          nextPage = _c.sent();\n          (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);\n          (_b = accumulator.items).push.apply(_b, nextPage.items);\n          if (!(nextPage.nextPageToken != null)) return [3 /*break*/, 3];\n          return [4 /*yield*/, listAllHelper(ref, accumulator, nextPage.nextPageToken)];\n        case 2:\n          _c.sent();\n          _c.label = 3;\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction list$1(ref, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var op, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (options != null) {\n            if (typeof options.maxResults === 'number') {\n              validateNumber('options.maxResults', /* minValue= */1, /* maxValue= */1000, options.maxResults);\n            }\n          }\n          op = options || {};\n          requestInfo = list$2(ref.storage, ref._location, /*delimiter= */'/', op.pageToken, op.maxResults);\n          return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];\n        case 1:\n          return [2 /*return*/, _a.sent().getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\nfunction getMetadata$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getMetadata');\n          requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n          return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];\n        case 1:\n          return [2 /*return*/, _a.sent().getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\nfunction updateMetadata$1(ref, metadata) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('updateMetadata');\n          requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n          return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];\n        case 1:\n          return [2 /*return*/, _a.sent().getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getDownloadURL');\n          requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n          return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];\n        case 1:\n          return [2 /*return*/, _a.sent().getPromise().then(function (url) {\n            if (url === null) {\n              throw noDownloadURL();\n            }\n            return url;\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\nfunction deleteObject$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('deleteObject');\n          requestInfo = deleteObject$2(ref.storage, ref._location);\n          return [4 /*yield*/, ref.storage.makeRequestWithTokens(requestInfo)];\n        case 1:\n          return [2 /*return*/, _a.sent().getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\nfunction _getChild$1(ref, childPath) {\n  var newPath = child(ref._location.path, childPath);\n  var location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    var service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    var reference = new Reference(service, service._bucket);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\nfunction extractBucket(host, config) {\n  var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\nfunction connectStorageEmulator$1(storage, host, port, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  storage.host = \"http://\" + host + \":\" + port;\n  var mockUserToken = options.mockUserToken;\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @public\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n */\nvar FirebaseStorageImpl = /** @class */function () {\n  function FirebaseStorageImpl(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _appCheckProvider,\n  /**\r\n   * @internal\r\n   */\n  _pool, _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._pool = _pool;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     * - protocol://host:port\r\n     */\n    this._host = DEFAULT_HOST;\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  Object.defineProperty(FirebaseStorageImpl.prototype, \"host\", {\n    get: function () {\n      return this._host;\n    },\n    /**\r\n     * Set host string for this service.\r\n     * @param host - host string in the form of host, host:port,\r\n     * or protocol://host:port\r\n     */\n    set: function (host) {\n      this._host = host;\n      if (this._url != null) {\n        this._bucket = Location.makeFromBucketSpec(this._url, host);\n      } else {\n        this._bucket = extractBucket(host, this.app.options);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseStorageImpl.prototype, \"maxUploadRetryTime\", {\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\n    get: function () {\n      return this._maxUploadRetryTime;\n    },\n    set: function (time) {\n      validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n      this._maxUploadRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseStorageImpl.prototype, \"maxOperationRetryTime\", {\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\n    get: function () {\n      return this._maxOperationRetryTime;\n    },\n    set: function (time) {\n      validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n      this._maxOperationRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  FirebaseStorageImpl.prototype._getAuthToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var auth, tokenData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._overrideAuthToken) {\n              return [2 /*return*/, this._overrideAuthToken];\n            }\n            auth = this._authProvider.getImmediate({\n              optional: true\n            });\n            if (!auth) return [3 /*break*/, 2];\n            return [4 /*yield*/, auth.getToken()];\n          case 1:\n            tokenData = _a.sent();\n            if (tokenData !== null) {\n              return [2 /*return*/, tokenData.accessToken];\n            }\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, null];\n        }\n      });\n    });\n  };\n  FirebaseStorageImpl.prototype._getAppCheckToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var appCheck, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            appCheck = this._appCheckProvider.getImmediate({\n              optional: true\n            });\n            if (!appCheck) return [3 /*break*/, 2];\n            return [4 /*yield*/, appCheck.getToken()];\n          case 1:\n            result = _a.sent();\n            // TODO: What do we want to do if there is an error getting the token?\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n            // the token (actual or dummy) to send requests.\n            return [2 /*return*/, result.token];\n          case 2:\n            return [2 /*return*/, null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   */\n  FirebaseStorageImpl.prototype._delete = function () {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(function (request) {\n        return request.cancel();\n      });\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  };\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n  FirebaseStorageImpl.prototype._makeStorageReference = function (loc) {\n    return new Reference(this, loc);\n  };\n  /**\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n  FirebaseStorageImpl.prototype._makeRequest = function (requestInfo, authToken, appCheckToken) {\n    var _this = this;\n    if (!this._deleted) {\n      var request_1 = makeRequest(requestInfo, this._appId, authToken, appCheckToken, this._pool, this._firebaseVersion);\n      this._requests.add(request_1);\n      // Request removes itself from set when complete.\n      request_1.getPromise().then(function () {\n        return _this._requests.delete(request_1);\n      }, function () {\n        return _this._requests.delete(request_1);\n      });\n      return request_1;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  };\n  FirebaseStorageImpl.prototype.makeRequestWithTokens = function (requestInfo) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, authToken, appCheckToken;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Promise.all([this._getAuthToken(), this._getAppCheckToken()])];\n          case 1:\n            _a = _b.sent(), authToken = _a[0], appCheckToken = _a[1];\n            return [2 /*return*/, this._makeRequest(requestInfo, authToken, appCheckToken)];\n        }\n      });\n    });\n  };\n  return FirebaseStorageImpl;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules.\r\n * @public\r\n */\nfunction connectStorageEmulator(storage, host, port, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  connectStorageEmulator$1(storage, host, port, options);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar UploadTaskSnapshotCompat = /** @class */function () {\n  function UploadTaskSnapshotCompat(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"bytesTransferred\", {\n    get: function () {\n      return this._delegate.bytesTransferred;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"metadata\", {\n    get: function () {\n      return this._delegate.metadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"state\", {\n    get: function () {\n      return this._delegate.state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"totalBytes\", {\n    get: function () {\n      return this._delegate.totalBytes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return UploadTaskSnapshotCompat;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar UploadTaskCompat = /** @class */function () {\n  function UploadTaskCompat(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n  Object.defineProperty(UploadTaskCompat.prototype, \"snapshot\", {\n    get: function () {\n      return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  UploadTaskCompat.prototype.then = function (onFulfilled, onRejected) {\n    var _this = this;\n    return this._delegate.then(function (snapshot) {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));\n      }\n    }, onRejected);\n  };\n  UploadTaskCompat.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n    var wrappedNextOrObserver = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = function (taskSnapshot) {\n          return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n        };\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? function (taskSnapshot) {\n            return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n          } : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  };\n  return UploadTaskCompat;\n}();\nvar ListResultCompat = /** @class */function () {\n  function ListResultCompat(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n  Object.defineProperty(ListResultCompat.prototype, \"prefixes\", {\n    get: function () {\n      var _this = this;\n      return this._delegate.prefixes.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"items\", {\n    get: function () {\n      var _this = this;\n      return this._delegate.items.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"nextPageToken\", {\n    get: function () {\n      return this._delegate.nextPageToken || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ListResultCompat;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ReferenceCompat = /** @class */function () {\n  function ReferenceCompat(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n  Object.defineProperty(ReferenceCompat.prototype, \"name\", {\n    get: function () {\n      return this._delegate.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"bucket\", {\n    get: function () {\n      return this._delegate.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"fullPath\", {\n    get: function () {\n      return this._delegate.fullPath;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ReferenceCompat.prototype.toString = function () {\n    return this._delegate.toString();\n  };\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n  ReferenceCompat.prototype.child = function (childPath) {\n    var reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  };\n  Object.defineProperty(ReferenceCompat.prototype, \"root\", {\n    get: function () {\n      return new ReferenceCompat(this._delegate.root, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"parent\", {\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\n    get: function () {\n      var reference = this._delegate.parent;\n      if (reference == null) {\n        return null;\n      }\n      return new ReferenceCompat(reference, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  ReferenceCompat.prototype.put = function (data, metadata) {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n  };\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n  ReferenceCompat.prototype.putString = function (value, format, metadata) {\n    if (format === void 0) {\n      format = StringFormat.RAW;\n    }\n    this._throwIfRoot('putString');\n    var data = dataFromString(format, value);\n    var metadataClone = __assign({}, metadata);\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(new UploadTask(this._delegate, new FbsBlob(data.data, true), metadataClone), this);\n  };\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n  ReferenceCompat.prototype.listAll = function () {\n    var _this = this;\n    return listAll(this._delegate).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n  ReferenceCompat.prototype.list = function (options) {\n    var _this = this;\n    return list(this._delegate, options || undefined).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * A `Promise` that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retreived, the promise is\r\n   * rejected.\r\n   */\n  ReferenceCompat.prototype.getMetadata = function () {\n    return getMetadata(this._delegate);\n  };\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A `Promise` that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n  ReferenceCompat.prototype.updateMetadata = function (metadata) {\n    return updateMetadata(this._delegate, metadata);\n  };\n  /**\r\n   * @returns A `Promise` that resolves with the download\r\n   * URL for this object.\r\n   */\n  ReferenceCompat.prototype.getDownloadURL = function () {\n    return getDownloadURL(this._delegate);\n  };\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A `Promise` that resolves if the deletion succeeds.\r\n   */\n  ReferenceCompat.prototype.delete = function () {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  };\n  ReferenceCompat.prototype._throwIfRoot = function (name) {\n    if (this._delegate._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n  return ReferenceCompat;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\nvar StorageServiceCompat = /** @class */function () {\n  function StorageServiceCompat(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxOperationRetryTime\", {\n    get: function () {\n      return this._delegate.maxOperationRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxUploadRetryTime\", {\n    get: function () {\n      return this._delegate.maxUploadRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n  StorageServiceCompat.prototype.ref = function (path) {\n    if (isUrl(path)) {\n      throw invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  };\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n  StorageServiceCompat.prototype.refFromURL = function (url) {\n    if (!isUrl(url)) {\n      throw invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n    try {\n      Location.makeFromUrl(url, this._delegate.host);\n    } catch (e) {\n      throw invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  };\n  StorageServiceCompat.prototype.setMaxUploadRetryTime = function (time) {\n    this._delegate.maxUploadRetryTime = time;\n  };\n  StorageServiceCompat.prototype.setMaxOperationRetryTime = function (time) {\n    this._delegate.maxOperationRetryTime = time;\n  };\n  StorageServiceCompat.prototype.useEmulator = function (host, port, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    connectStorageEmulator(this._delegate, host, port, options);\n  };\n  return StorageServiceCompat;\n}();\nvar name = \"@firebase/storage\";\nvar version = \"0.7.1\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Storage.\r\n */\nvar STORAGE_TYPE = 'storage';\nfunction factory(container, _a) {\n  var url = _a.instanceIdentifier;\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  var app = container.getProvider('app').getImmediate();\n  var authProvider = container.getProvider('auth-internal');\n  var appCheckProvider = container.getProvider('app-check-internal');\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  var storageServiceCompat = new StorageServiceCompat(app, new FirebaseStorageImpl(app, authProvider, appCheckProvider, new ConnectionPool(), url, firebase.SDK_VERSION));\n  return storageServiceCompat;\n}\nfunction registerStorage(instance) {\n  var namespaceExports = {\n    // no-inline\n    TaskState: TaskState,\n    TaskEvent: TaskEvent,\n    StringFormat: StringFormat,\n    Storage: FirebaseStorageImpl,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;;;;;;;;;AAgBA;;;AAIA;;;AAGO,IAAMA,YAAY,GAAG,gCAAgC;AAE5D;;;AAGO,IAAMC,yBAAyB,GAAG,eAAe;AAExD;;;;;AAKO,IAAMC,gCAAgC,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;AAE7D;;;;;AAKO,IAAMC,6BAA6B,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;;ACvB3D;;;;AAIA;EAA0CC;;;;;;EAYxC,8BAAYC,IAAsB,EAAEC,OAAe;IAAnD,YACEC,kBACEC,WAAW,CAACH,IAAI,CAAC,EACjB,uBAAqBC,OAAO,UAAKE,WAAW,CAACH,IAAI,CAAC,MAAG,CACtD;;;;IAXHI,gBAAU,GAAsC;MAAEC,cAAc,EAAE;IAAI,CAAE;IAYtED,KAAI,CAACE,YAAY,GAAGF,KAAI,CAACH,OAAO;;;IAGhCM,MAAM,CAACC,cAAc,CAACJ,KAAI,EAAEK,oBAAoB,CAACC,SAAS,CAAC;;;;;;EAM7DD,0CAAW,GAAX,UAAYT,IAAsB;IAChC,OAAOG,WAAW,CAACH,IAAI,CAAC,KAAK,IAAI,CAACA,IAAI;GACvC;EAKDO,sBAAIE,gDAAc;;;;SAAlB;MACE,OAAO,IAAI,CAACE,UAAU,CAACN,cAAc;KACtC;SAED,UAAmBA,cAA6B;MAC9C,IAAI,CAACM,UAAU,CAACN,cAAc,GAAGA,cAAc;MAC/C,IAAI,IAAI,CAACM,UAAU,CAACN,cAAc,EAAE;QAClC,IAAI,CAACJ,OAAO,GAAM,IAAI,CAACK,YAAY,UAAK,IAAI,CAACK,UAAU,CAACN,cAAgB;OACzE,MAAM;QACL,IAAI,CAACJ,OAAO,GAAG,IAAI,CAACK,YAAY;;KAEnC;;;;EACH,2BAAC;AAAD,CA7CA,CAA0CM,aAAa;SAmFvCT,WAAW,CAACH,IAAsB;EAChD,OAAO,UAAU,GAAGA,IAAI;AAC1B;SAEgBa,OAAO;EACrB,IAAMZ,OAAO,GACX,gEAAgE,GAChE,kBAAkB;EACpB,OAAO,IAAIQ,oBAAoB,0BAA2BR,OAAO,CAAC;AACpE;SAEgBa,cAAc,CAACC,IAAY;EACzC,OAAO,IAAIN,oBAAoB,4CAE7B,UAAU,GAAGM,IAAI,GAAG,mBAAmB,CACxC;AACH;SAgBgBC,aAAa,CAACC,MAAc;EAC1C,OAAO,IAAIR,oBAAoB,wCAE7B,oBAAoB,GAClBQ,MAAM,GACN,mCAAmC,GACnC,uCAAuC,CAC1C;AACH;SAEgBC,eAAe;EAC7B,IAAMjB,OAAO,GACX,gEAAgE,GAChE,+BAA+B;EACjC,OAAO,IAAIQ,oBAAoB,0CAAmCR,OAAO,CAAC;AAC5E;SAEgBkB,eAAe;EAC7B,OAAO,IAAIV,oBAAoB,4CAE7B,+EAA+E,CAChF;AACH;SAEgBW,YAAY,CAACL,IAAY;EACvC,OAAO,IAAIN,oBAAoB,oCAE7B,2CAA2C,GAAGM,IAAI,GAAG,IAAI,CAC1D;AACH;SAEgBM,kBAAkB;EAChC,OAAO,IAAIZ,oBAAoB,oDAE7B,0DAA0D,CAC3D;AACH;SAmBgBa,QAAQ;EACtB,OAAO,IAAIb,oBAAoB,4BAE7B,oCAAoC,CACrC;AACH;SASgBc,UAAU,CAACC,GAAW;EACpC,OAAO,IAAIf,oBAAoB,kCAE7B,eAAe,GAAGe,GAAG,GAAG,IAAI,CAC7B;AACH;SAEgBC,oBAAoB,CAACR,MAAc;EACjD,OAAO,IAAIR,oBAAoB,wDAE7B,0BAA0B,GAAGQ,MAAM,GAAG,IAAI,CAC3C;AACH;SAEgBS,eAAe;EAC7B,OAAO,IAAIjB,oBAAoB,8CAE7B,oBAAoB,GAClB,0BAA0B,GAC1Bb,yBAAyB,GACzB,uCAAuC,CAC1C;AACH;SAEgB+B,eAAe;EAC7B,OAAO,IAAIlB,oBAAoB,8CAE7B,wDAAwD,CACzD;AACH;SAEgBmB,mBAAmB;EACjC,OAAO,IAAInB,oBAAoB,wDAE7B,sEAAsE,CACvE;AACH;SAEgBoB,aAAa;EAC3B,OAAO,IAAIpB,oBAAoB,0CAE7B,iDAAiD,CAClD;AACH;SAEgBqB,eAAe,CAAC7B,OAAe;EAC7C,OAAO,IAAIQ,oBAAoB,4CAAoCR,OAAO,CAAC;AAC7E;SA+BgB8B,UAAU;EACxB,OAAO,IAAItB,oBAAoB,kCAE7B,+BAA+B,CAChC;AACH;AAEA;;;SAGgBuB,oBAAoB,CAACC,IAAY;EAC/C,OAAO,IAAIxB,oBAAoB,wDAE7B,iBAAiB,GACfwB,IAAI,GACJ,+DAA+D,GAC/D,oDAAoD,CACvD;AACH;AAEA;;;;SAIgBC,aAAa,CAC3BC,MAAc,EACdlC,OAAe;EAEf,OAAO,IAAIQ,oBAAoB,wCAE7B,gCAAgC,GAAG0B,MAAM,GAAG,KAAK,GAAGlC,OAAO,CAC5D;AACH;AAYA;;;SAGgBmC,aAAa,CAACnC,OAAe;EAC3C,MAAM,IAAIQ,oBAAoB,wCAE5B,kBAAkB,GAAGR,OAAO,CAC7B;AACH;;ACjVA;;;;;;;;;;;;;;;;AAiBA;SACgBoC,YAAY,CAACC,OAAe;EAC1C,OAAOC,IAAI,CAACD,OAAO,CAAC;AACtB;;ACpBA;;;;;;;;;;;;;;;;AAyBA;;;;AAIO,IAAME,YAAY,GAAG;;;;;;;;EAQ1BC,GAAG,EAAE,KAAK;;;;;;;EAOVC,MAAM,EAAE,QAAQ;;;;;;;EAOhBC,SAAS,EAAE,WAAW;;;;;;;;;;EAUtBC,QAAQ,EAAE;CACX;AAED;EAGE,oBAAmBC,IAAgB,EAAEC,WAA2B;IAA7C,SAAI,GAAJD,IAAI;IACrB,IAAI,CAACC,WAAW,GAAGA,WAAW,IAAI,IAAI;;EAE1C,iBAAC;AAAD,CAAC;SAEeC,cAAc,CAC5BZ,MAAoB,EACpBa,UAAkB;EAElB,QAAQb,MAAM;IACZ,KAAKK,YAAY,CAACC,GAAG;MACnB,OAAO,IAAIQ,UAAU,CAACC,UAAU,CAACF,UAAU,CAAC,CAAC;IAC/C,KAAKR,YAAY,CAACE,MAAM;IACxB,KAAKF,YAAY,CAACG,SAAS;MACzB,OAAO,IAAIM,UAAU,CAACE,YAAY,CAAChB,MAAM,EAAEa,UAAU,CAAC,CAAC;IACzD,KAAKR,YAAY,CAACI,QAAQ;MACxB,OAAO,IAAIK,UAAU,CACnBG,aAAa,CAACJ,UAAU,CAAC,EACzBK,mBAAmB,CAACL,UAAU,CAAC,CAChC;;;;EAML,MAAMnC,OAAO,EAAE;AACjB;SAEgBqC,UAAU,CAACI,KAAa;EACtC,IAAMC,CAAC,GAAa,EAAE;EACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAIE,CAAC,GAAGJ,KAAK,CAACK,UAAU,CAACH,CAAC,CAAC;IAC3B,IAAIE,CAAC,IAAI,GAAG,EAAE;MACZH,CAAC,CAACK,IAAI,CAACF,CAAC,CAAC;KACV,MAAM;MACL,IAAIA,CAAC,IAAI,IAAI,EAAE;QACbH,CAAC,CAACK,IAAI,CAAC,GAAG,GAAIF,CAAC,IAAI,CAAE,EAAE,GAAG,GAAIA,CAAC,GAAG,EAAG,CAAC;OACvC,MAAM;QACL,IAAI,CAACA,CAAC,GAAG,KAAK,MAAM,KAAK,EAAE;;UAEzB,IAAMG,KAAK,GACTL,CAAC,GAAGF,KAAK,CAACG,MAAM,GAAG,CAAC,IAAI,CAACH,KAAK,CAACK,UAAU,CAACH,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,MAAM,KAAK;UACrE,IAAI,CAACK,KAAK,EAAE;;YAEVN,CAAC,CAACK,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;WACtB,MAAM;YACL,IAAME,EAAE,GAAGJ,CAAC;YACZ,IAAMK,EAAE,GAAGT,KAAK,CAACK,UAAU,CAAC,EAAEH,CAAC,CAAC;YAChCE,CAAC,GAAG,KAAK,GAAI,CAACI,EAAE,GAAG,IAAI,KAAK,EAAG,GAAIC,EAAE,GAAG,IAAK;YAC7CR,CAAC,CAACK,IAAI,CACJ,GAAG,GAAIF,CAAC,IAAI,EAAG,EACf,GAAG,GAAKA,CAAC,IAAI,EAAE,GAAI,EAAG,EACtB,GAAG,GAAKA,CAAC,IAAI,CAAC,GAAI,EAAG,EACrB,GAAG,GAAIA,CAAC,GAAG,EAAG,CACf;;SAEJ,MAAM;UACL,IAAI,CAACA,CAAC,GAAG,KAAK,MAAM,KAAK,EAAE;;YAEzBH,CAAC,CAACK,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;WACtB,MAAM;YACLL,CAAC,CAACK,IAAI,CAAC,GAAG,GAAIF,CAAC,IAAI,EAAG,EAAE,GAAG,GAAKA,CAAC,IAAI,CAAC,GAAI,EAAG,EAAE,GAAG,GAAIA,CAAC,GAAG,EAAG,CAAC;;;;;;EAMxE,OAAO,IAAIM,UAAU,CAACT,CAAC,CAAC;AAC1B;SAEgBU,oBAAoB,CAACX,KAAa;EAChD,IAAIY,OAAO;EACX,IAAI;IACFA,OAAO,GAAGC,kBAAkB,CAACb,KAAK,CAAC;GACpC,CAAC,OAAOc,CAAC,EAAE;IACV,MAAMlC,aAAa,CAACM,YAAY,CAACI,QAAQ,EAAE,qBAAqB,CAAC;;EAEnE,OAAOM,UAAU,CAACgB,OAAO,CAAC;AAC5B;SAEgBf,YAAY,CAAChB,MAAoB,EAAEmB,KAAa;EAC9D,QAAQnB,MAAM;IACZ,KAAKK,YAAY,CAACE,MAAM;MAAE;QACxB,IAAM2B,QAAQ,GAAGf,KAAK,CAACgB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAMC,QAAQ,GAAGjB,KAAK,CAACgB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAID,QAAQ,IAAIE,QAAQ,EAAE;UACxB,IAAMC,WAAW,GAAGH,QAAQ,GAAG,GAAG,GAAG,GAAG;UACxC,MAAMnC,aAAa,CACjBC,MAAM,EACN,qBAAqB,GACnBqC,WAAW,GACX,mCAAmC,CACtC;;QAEH;;IAEF,KAAKhC,YAAY,CAACG,SAAS;MAAE;QAC3B,IAAM8B,OAAO,GAAGnB,KAAK,CAACgB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACzC,IAAMI,QAAQ,GAAGpB,KAAK,CAACgB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAIG,OAAO,IAAIC,QAAQ,EAAE;UACvB,IAAMF,WAAW,GAAGC,OAAO,GAAG,GAAG,GAAG,GAAG;UACvC,MAAMvC,aAAa,CACjBC,MAAM,EACN,qBAAqB,GAAGqC,WAAW,GAAG,gCAAgC,CACvE;;QAEHlB,KAAK,GAAGA,KAAK,CAACqB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;QACnD;;;;;EAKJ,IAAIC,KAAK;EACT,IAAI;IACFA,KAAK,GAAGvC,YAAY,CAACiB,KAAK,CAAC;GAC5B,CAAC,OAAOc,CAAC,EAAE;IACV,MAAMlC,aAAa,CAACC,MAAM,EAAE,yBAAyB,CAAC;;EAExD,IAAM0C,KAAK,GAAG,IAAIb,UAAU,CAACY,KAAK,CAACnB,MAAM,CAAC;EAC1C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoB,KAAK,CAACnB,MAAM,EAAED,CAAC,EAAE,EAAE;IACrCqB,KAAK,CAACrB,CAAC,CAAC,GAAGoB,KAAK,CAACjB,UAAU,CAACH,CAAC,CAAC;;EAEhC,OAAOqB,KAAK;AACd;AAEA;EAKE,sBAAYC,OAAe;IAJ3B,WAAM,GAAY,KAAK;IACvB,gBAAW,GAAkB,IAAI;IAI/B,IAAMC,OAAO,GAAGD,OAAO,CAACE,KAAK,CAAC,iBAAiB,CAAC;IAChD,IAAID,OAAO,KAAK,IAAI,EAAE;MACpB,MAAM7C,aAAa,CACjBM,YAAY,CAACI,QAAQ,EACrB,uDAAuD,CACxD;;IAEH,IAAMqC,MAAM,GAAGF,OAAO,CAAC,CAAC,CAAC,IAAI,IAAI;IACjC,IAAIE,MAAM,IAAI,IAAI,EAAE;MAClB,IAAI,CAACC,MAAM,GAAGC,QAAQ,CAACF,MAAM,EAAE,SAAS,CAAC;MACzC,IAAI,CAACnC,WAAW,GAAG,IAAI,CAACoC,MAAM,GAC1BD,MAAM,CAACG,SAAS,CAAC,CAAC,EAAEH,MAAM,CAACxB,MAAM,GAAG,SAAS,CAACA,MAAM,CAAC,GACrDwB,MAAM;;IAEZ,IAAI,CAACI,IAAI,GAAGP,OAAO,CAACM,SAAS,CAACN,OAAO,CAACR,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;EAE3D,mBAAC;AAAD,CAAC;SAEelB,aAAa,CAACkC,OAAe;EAC3C,IAAMC,KAAK,GAAG,IAAIC,YAAY,CAACF,OAAO,CAAC;EACvC,IAAIC,KAAK,CAACL,MAAM,EAAE;IAChB,OAAO/B,YAAY,CAACX,YAAY,CAACE,MAAM,EAAE6C,KAAK,CAACF,IAAI,CAAC;GACrD,MAAM;IACL,OAAOpB,oBAAoB,CAACsB,KAAK,CAACF,IAAI,CAAC;;AAE3C;SAEgBhC,mBAAmB,CAACiC,OAAe;EACjD,IAAMC,KAAK,GAAG,IAAIC,YAAY,CAACF,OAAO,CAAC;EACvC,OAAOC,KAAK,CAACzC,WAAW;AAC1B;AAEA,SAASqC,QAAQ,CAACM,CAAS,EAAEC,GAAW;EACtC,IAAMC,UAAU,GAAGF,CAAC,CAAChC,MAAM,IAAIiC,GAAG,CAACjC,MAAM;EACzC,IAAI,CAACkC,UAAU,EAAE;IACf,OAAO,KAAK;;EAGd,OAAOF,CAAC,CAACL,SAAS,CAACK,CAAC,CAAChC,MAAM,GAAGiC,GAAG,CAACjC,MAAM,CAAC,KAAKiC,GAAG;AACnD;;AC7OA;;;;;;;;;;;;;;;;AA0BA;;;AAGO,IAAME,SAAS,GAAG;;;;;;;;;;;;;EAavBC,aAAa,EAAE;CAChB;AAoBD;;;AAGO,IAAMC,SAAS,GAAG;;EAEvBC,OAAO,EAAE,SAAS;;EAGlBC,MAAM,EAAE,QAAQ;;EAGhBC,OAAO,EAAE,SAAS;;EAGlBC,QAAQ,EAAE,UAAU;;EAGpBC,KAAK,EAAE;CACR;SAEeC,8BAA8B,CAC5CC,KAAwB;EAExB,QAAQA,KAAK;IACX;IACA;IACA;MACE,OAAOP,SAAS,CAACC,OAAO;IAC1B;MACE,OAAOD,SAAS,CAACE,MAAM;IACzB;MACE,OAAOF,SAAS,CAACG,OAAO;IAC1B;MACE,OAAOH,SAAS,CAACI,QAAQ;IAC3B;MACE,OAAOJ,SAAS,CAACK,KAAK;IACxB;;MAEE,OAAOL,SAAS,CAACK,KAAK;EAAC;AAE7B;;ACvGA;;;;;;;;;;;;;;;;AAsDA;;;AAGA,IAAYG,SAIX;AAJD,WAAYA,SAAS;EACnBA,iDAAY;EACZA,2DAAiB;EACjBA,2CAAS;AACX,CAAC,EAJWA,SAAS,KAATA,SAAS;;ACzDrB;;;;;;;;;;;;;;;;AAwBA;;;;AAIA;EAME;IAAA;IAFQ,UAAK,GAAY,KAAK;IAG5B,IAAI,CAACC,IAAI,GAAG,IAAIC,cAAc,EAAE;IAChC,IAAI,CAACC,UAAU,GAAGH,SAAS,CAACI,QAAQ;IACpC,IAAI,CAACC,YAAY,GAAG,IAAIC,OAAO,CAAC,iBAAO;MACrCxG,KAAI,CAACmG,IAAI,CAACM,gBAAgB,CAAC,OAAO,EAAE;QAClCzG,KAAI,CAACqG,UAAU,GAAGH,SAAS,CAACQ,KAAK;QACjCC,OAAO,EAAE;OACV,CAAC;MACF3G,KAAI,CAACmG,IAAI,CAACM,gBAAgB,CAAC,OAAO,EAAE;QAClCzG,KAAI,CAACqG,UAAU,GAAGH,SAAS,CAACU,aAAa;QACzCD,OAAO,EAAE;OACV,CAAC;MACF3G,KAAI,CAACmG,IAAI,CAACM,gBAAgB,CAAC,MAAM,EAAE;QACjCE,OAAO,EAAE;OACV,CAAC;KACH,CAAC;;;;;EAMJE,4BAAI,GAAJ,UACEzF,GAAW,EACX0F,MAAc,EACdC,IAAsC,EACtCC,OAAiB;IAEjB,IAAI,IAAI,CAACC,KAAK,EAAE;MACd,MAAMjF,aAAa,CAAC,+BAA+B,CAAC;;IAEtD,IAAI,CAACiF,KAAK,GAAG,IAAI;IACjB,IAAI,CAACd,IAAI,CAACe,IAAI,CAACJ,MAAM,EAAE1F,GAAG,EAAE,IAAI,CAAC;IACjC,IAAI4F,OAAO,KAAKG,SAAS,EAAE;MACzB,KAAK,IAAMC,GAAG,IAAIJ,OAAO,EAAE;QACzB,IAAIA,OAAO,CAACK,cAAc,CAACD,GAAG,CAAC,EAAE;UAC/B,IAAI,CAACjB,IAAI,CAACmB,gBAAgB,CAACF,GAAG,EAAEJ,OAAO,CAACI,GAAG,CAAC,CAACG,QAAQ,EAAE,CAAC;;;;IAI9D,IAAIR,IAAI,KAAKI,SAAS,EAAE;MACtB,IAAI,CAAChB,IAAI,CAACqB,IAAI,CAACT,IAAI,CAAC;KACrB,MAAM;MACL,IAAI,CAACZ,IAAI,CAACqB,IAAI,EAAE;;IAElB,OAAO,IAAI,CAACjB,YAAY;GACzB;;;;EAKDM,oCAAY,GAAZ;IACE,IAAI,CAAC,IAAI,CAACI,KAAK,EAAE;MACf,MAAMjF,aAAa,CAAC,uCAAuC,CAAC;;IAE9D,OAAO,IAAI,CAACqE,UAAU;GACvB;;;;EAKDQ,iCAAS,GAAT;IACE,IAAI,CAAC,IAAI,CAACI,KAAK,EAAE;MACf,MAAMjF,aAAa,CAAC,oCAAoC,CAAC;;IAE3D,IAAI;MACF,OAAO,IAAI,CAACmE,IAAI,CAACsB,MAAM;KACxB,CAAC,OAAOzD,CAAC,EAAE;MACV,OAAO,CAAC,CAAC;;GAEZ;;;;EAKD6C,uCAAe,GAAf;IACE,IAAI,CAAC,IAAI,CAACI,KAAK,EAAE;MACf,MAAMjF,aAAa,CAAC,0CAA0C,CAAC;;IAEjE,OAAO,IAAI,CAACmE,IAAI,CAACuB,YAAY;GAC9B;;;;;EAMDb,6BAAK,GAAL;IACE,IAAI,CAACV,IAAI,CAACwB,KAAK,EAAE;GAClB;;;;EAKDd,yCAAiB,GAAjB,UAAkBe,MAAc;IAC9B,OAAO,IAAI,CAACzB,IAAI,CAAC0B,iBAAiB,CAACD,MAAM,CAAC;GAC3C;;;;EAKDf,iDAAyB,GAAzB,UAA0BiB,QAAqC;IAC7D,IAAI,IAAI,CAAC3B,IAAI,CAAC4B,MAAM,IAAI,IAAI,EAAE;MAC5B,IAAI,CAAC5B,IAAI,CAAC4B,MAAM,CAACtB,gBAAgB,CAAC,UAAU,EAAEqB,QAAQ,CAAC;;GAE1D;;;;EAKDjB,oDAA4B,GAA5B,UAA6BiB,QAAqC;IAChE,IAAI,IAAI,CAAC3B,IAAI,CAAC4B,MAAM,IAAI,IAAI,EAAE;MAC5B,IAAI,CAAC5B,IAAI,CAAC4B,MAAM,CAACC,mBAAmB,CAAC,UAAU,EAAEF,QAAQ,CAAC;;GAE7D;EACH,oBAAC;AAAD,CAAC;SAEeG,aAAa;EAC3B,OAAO,IAAIpB,aAAa,EAAE;AAC5B;;ACvJA;;;;;;;;;;;;;;;;AAuBA;;;AAGA;EAAA;EACEqB,yCAAgB,GAAhB;IACE,OAAOD,aAAa,EAAE;GACvB;EACH,qBAAC;AAAD,CAAC;;AC9BD;;;;;;;;;;;;;;;;AAyBA;;;;;AAKA;EAGE,kBAA4BpH,MAAc,EAAEF,IAAY;IAA5B,WAAM,GAANE,MAAM;IAChC,IAAI,CAACsH,KAAK,GAAGxH,IAAI;;EAGnBR,sBAAIiI,0BAAI;SAAR;MACE,OAAO,IAAI,CAACD,KAAK;KAClB;;;;EAEDhI,sBAAIiI,4BAAM;SAAV;MACE,OAAO,IAAI,CAACzH,IAAI,CAAC0C,MAAM,KAAK,CAAC;KAC9B;;;;EAED+E,gCAAa,GAAb;IACE,IAAMC,MAAM,GAAGC,kBAAkB;IACjC,OAAO,KAAK,GAAGD,MAAM,CAAC,IAAI,CAACxH,MAAM,CAAC,GAAG,KAAK,GAAGwH,MAAM,CAAC,IAAI,CAAC1H,IAAI,CAAC;GAC/D;EAEDyH,sCAAmB,GAAnB;IACE,IAAMC,MAAM,GAAGC,kBAAkB;IACjC,OAAO,KAAK,GAAGD,MAAM,CAAC,IAAI,CAACxH,MAAM,CAAC,GAAG,IAAI;GAC1C;EAEMuH,2BAAkB,GAAzB,UAA0BG,YAAoB,EAAEC,IAAY;IAC1D,IAAIC,cAAc;IAClB,IAAI;MACFA,cAAc,GAAGL,QAAQ,CAACM,WAAW,CAACH,YAAY,EAAEC,IAAI,CAAC;KAC1D,CAAC,OAAOxE,CAAC,EAAE;;;MAGV,OAAO,IAAIoE,QAAQ,CAACG,YAAY,EAAE,EAAE,CAAC;;IAEvC,IAAIE,cAAc,CAAC9H,IAAI,KAAK,EAAE,EAAE;MAC9B,OAAO8H,cAAc;KACtB,MAAM;MACL,MAAMpH,oBAAoB,CAACkH,YAAY,CAAC;;GAE3C;EAEMH,oBAAW,GAAlB,UAAmBhH,GAAW,EAAEoH,IAAY;IAC1C,IAAIG,QAAQ,GAAoB,IAAI;IACpC,IAAMC,YAAY,GAAG,qBAAqB;IAE1C,SAASC,QAAQ,CAACC,GAAa;MAC7B,IAAIA,GAAG,CAACnI,IAAI,CAACoI,MAAM,CAACD,GAAG,CAACnI,IAAI,CAAC0C,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;QAChDyF,GAAG,CAACX,KAAK,GAAGW,GAAG,CAACX,KAAK,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;;IAGtC,IAAMC,MAAM,GAAG,WAAW;IAC1B,IAAMC,OAAO,GAAG,IAAIC,MAAM,CAAC,QAAQ,GAAGP,YAAY,GAAGK,MAAM,EAAE,GAAG,CAAC;IACjE,IAAMG,SAAS,GAAG;MAAEvI,MAAM,EAAE,CAAC;MAAEF,IAAI,EAAE;IAAC,CAAE;IAExC,SAAS0I,UAAU,CAACP,GAAa;MAC/BA,GAAG,CAACX,KAAK,GAAGpE,kBAAkB,CAAC+E,GAAG,CAACnI,IAAI,CAAC;;IAE1C,IAAM2I,OAAO,GAAG,gBAAgB;IAChC,IAAMC,mBAAmB,GAAGf,IAAI,CAACjE,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC;IACvD,IAAMiF,mBAAmB,GAAG,iBAAiB;IAC7C,IAAMC,qBAAqB,GAAG,IAAIN,MAAM,CACtC,eAAaI,mBAAmB,SAAID,OAAO,WAAMV,YAAY,UAAKY,mBAAqB,EACvF,GAAG,CACJ;IACD,IAAME,sBAAsB,GAAG;MAAE7I,MAAM,EAAE,CAAC;MAAEF,IAAI,EAAE;IAAC,CAAE;IAErD,IAAMgJ,gBAAgB,GACpBnB,IAAI,KAAKjJ,YAAY,GACjB,qDAAqD,GACrDiJ,IAAI;IACV,IAAMoB,gBAAgB,GAAG,UAAU;IACnC,IAAMC,kBAAkB,GAAG,IAAIV,MAAM,CACnC,eAAaQ,gBAAgB,SAAIf,YAAY,SAAIgB,gBAAkB,EACnE,GAAG,CACJ;IACD,IAAME,mBAAmB,GAAG;MAAEjJ,MAAM,EAAE,CAAC;MAAEF,IAAI,EAAE;IAAC,CAAE;IAElD,IAAMoJ,MAAM,GAAG,CACb;MAAEC,KAAK,EAAEd,OAAO;MAAEe,OAAO,EAAEb,SAAS;MAAEc,UAAU,EAAErB;IAAQ,CAAE,EAC5D;MACEmB,KAAK,EAAEP,qBAAqB;MAC5BQ,OAAO,EAAEP,sBAAsB;MAC/BQ,UAAU,EAAEb;KACb,EACD;MACEW,KAAK,EAAEH,kBAAkB;MACzBI,OAAO,EAAEH,mBAAmB;MAC5BI,UAAU,EAAEb;KACb,CACF;IACD,KAAK,IAAIjG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2G,MAAM,CAAC1G,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,IAAM+G,KAAK,GAAGJ,MAAM,CAAC3G,CAAC,CAAC;MACvB,IAAMgH,QAAQ,GAAGD,KAAK,CAACH,KAAK,CAACK,IAAI,CAACjJ,GAAG,CAAC;MACtC,IAAIgJ,QAAQ,EAAE;QACZ,IAAME,WAAW,GAAGF,QAAQ,CAACD,KAAK,CAACF,OAAO,CAACpJ,MAAM,CAAC;QAClD,IAAI0J,SAAS,GAAGH,QAAQ,CAACD,KAAK,CAACF,OAAO,CAACtJ,IAAI,CAAC;QAC5C,IAAI,CAAC4J,SAAS,EAAE;UACdA,SAAS,GAAG,EAAE;;QAEhB5B,QAAQ,GAAG,IAAIP,QAAQ,CAACkC,WAAW,EAAEC,SAAS,CAAC;QAC/CJ,KAAK,CAACD,UAAU,CAACvB,QAAQ,CAAC;QAC1B;;;IAGJ,IAAIA,QAAQ,IAAI,IAAI,EAAE;MACpB,MAAMxH,UAAU,CAACC,GAAG,CAAC;;IAEvB,OAAOuH,QAAQ;GAChB;EACH,eAAC;AAAD,CAAC;;ACxHD;;;AAGA;EAGE,qBAAY6B,KAA2B;IACrC,IAAI,CAACC,QAAQ,GAAGjE,OAAO,CAACkE,MAAM,CAAIF,KAAK,CAAC;;;EAI1CG,gCAAU,GAAV;IACE,OAAO,IAAI,CAACF,QAAQ;GACrB;;EAGDE,4BAAM,GAAN,UAAOC,UAAkB,IAAU;EACrC,kBAAC;AAAD,CAAC;;ACpCD;;;;;;;;;;;;;;;;AAyBA;;;;;;SAMgBC,KAAK,CACnBC,CAA8D;AAC9D;AACAC,QAAqC,EACrCC,OAAe;;;EAIf,IAAIC,WAAW,GAAG,CAAC;;;;EAInB,IAAIC,SAAS,GAAQ,IAAI;EACzB,IAAIC,UAAU,GAAG,KAAK;EACtB,IAAIC,WAAW,GAAG,CAAC;EAEnB,SAASlK,QAAQ;IACf,OAAOkK,WAAW,KAAK,CAAC;;EAE1B,IAAIC,iBAAiB,GAAG,KAAK;EAE7B,SAASC,eAAe;IAAC;SAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;MAAdC;;IACvB,IAAI,CAACH,iBAAiB,EAAE;MACtBA,iBAAiB,GAAG,IAAI;MACxBN,QAAQ,CAACU,KAAK,CAAC,IAAI,EAAED,IAAI,CAAC;;;EAI9B,SAASE,aAAa,CAACC,MAAc;IACnCT,SAAS,GAAGU,UAAU,CAAC;MACrBV,SAAS,GAAG,IAAI;MAChBJ,CAAC,CAACe,OAAO,EAAE3K,QAAQ,EAAE,CAAC;KACvB,EAAEyK,MAAM,CAAC;;EAGZ,SAASE,OAAO,CAACC,OAAgB;IAAE;SAAA,UAAc,EAAdP,qBAAc,EAAdA,IAAc;MAAdC;;IACjC,IAAIH,iBAAiB,EAAE;MACrB;;IAEF,IAAIS,OAAO,EAAE;MACXR,eAAe,CAACS,IAAI,OAApBT,eAAe,iBAAM,IAAI,EAAEQ,OAAO,GAAKN,IAAI;MAC3C;;IAEF,IAAMQ,QAAQ,GAAG9K,QAAQ,EAAE,IAAIiK,UAAU;IACzC,IAAIa,QAAQ,EAAE;MACZV,eAAe,CAACS,IAAI,OAApBT,eAAe,iBAAM,IAAI,EAAEQ,OAAO,GAAKN,IAAI;MAC3C;;IAEF,IAAIP,WAAW,GAAG,EAAE,EAAE;;MAEpBA,WAAW,IAAI,CAAC;;IAElB,IAAIgB,UAAU;IACd,IAAIb,WAAW,KAAK,CAAC,EAAE;MACrBA,WAAW,GAAG,CAAC;MACfa,UAAU,GAAG,CAAC;KACf,MAAM;MACLA,UAAU,GAAG,CAAChB,WAAW,GAAGiB,IAAI,CAACC,MAAM,EAAE,IAAI,IAAI;;IAEnDT,aAAa,CAACO,UAAU,CAAC;;EAE3B,IAAIG,OAAO,GAAG,KAAK;EAEnB,SAASC,IAAI,CAACC,UAAmB;IAC/B,IAAIF,OAAO,EAAE;MACX;;IAEFA,OAAO,GAAG,IAAI;IACd,IAAIf,iBAAiB,EAAE;MACrB;;IAEF,IAAIH,SAAS,KAAK,IAAI,EAAE;MACtB,IAAI,CAACoB,UAAU,EAAE;QACflB,WAAW,GAAG,CAAC;;MAEjBmB,YAAY,CAACrB,SAAS,CAAC;MACvBQ,aAAa,CAAC,CAAC,CAAC;KACjB,MAAM;MACL,IAAI,CAACY,UAAU,EAAE;QACflB,WAAW,GAAG,CAAC;;;;EAIrBM,aAAa,CAAC,CAAC,CAAC;EAChBE,UAAU,CAAC;IACTT,UAAU,GAAG,IAAI;IACjBkB,IAAI,CAAC,IAAI,CAAC;GACX,EAAErB,OAAO,CAAC;EACX,OAAOqB,IAAI;AACb;AAEA;;;;;;;SAOgBA,IAAI,CAACG,EAAM;EACzBA,EAAE,CAAC,KAAK,CAAC;AACX;;ACnIA;;;;;;;;;;;;;;;;SAmBgBC,SAAS,CAAIC,CAAuB;EAClD,OAAOA,CAAC,KAAK,KAAK,CAAC;AACrB;AAEA;SACgBC,UAAU,CAACD,CAAU;EACnC,OAAO,OAAOA,CAAC,KAAK,UAAU;AAChC;SAEgBE,gBAAgB,CAACF,CAAU;EACzC,OAAO,OAAOA,CAAC,KAAK,QAAQ,IAAI,CAACG,KAAK,CAACC,OAAO,CAACJ,CAAC,CAAC;AACnD;SAEgBK,QAAQ,CAACL,CAAU;EACjC,OAAO,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,YAAYM,MAAM;AACrD;SAEgBC,YAAY,CAACP,CAAU;EACrC,OAAOQ,mBAAmB,EAAE,IAAIR,CAAC,YAAYS,IAAI;AACnD;SAEgBD,mBAAmB;EACjC,OAAO,OAAOC,IAAI,KAAK,WAAW;AACpC;SAEgBC,cAAc,CAC5BC,QAAgB,EAChBC,QAAgB,EAChBC,QAAgB,EAChBrK,KAAa;EAEb,IAAIA,KAAK,GAAGoK,QAAQ,EAAE;IACpB,MAAM5L,eAAe,CACnB,wBAAsB2L,QAAQ,oBAAeC,QAAQ,iBAAc,CACpE;;EAEH,IAAIpK,KAAK,GAAGqK,QAAQ,EAAE;IACpB,MAAM7L,eAAe,CACnB,wBAAsB2L,QAAQ,oBAAeE,QAAQ,cAAW,CACjE;;AAEL;;AC5DA;;;;;;;;;;;;;;;;SAsBgBC,OAAO,CAACC,OAAe,EAAEjF,IAAY;EACnD,IAAMkF,aAAa,GAAGlF,IAAI,CAAC5D,KAAK,CAAC,eAAe,CAAC;EACjD,IAAM+I,QAAQ,GAAGD,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAG,CAAC,CAAC;EACnC,IAAIE,MAAM,GAAGpF,IAAI;EACjB,IAAImF,QAAQ,IAAI,IAAI,EAAE;IACpBC,MAAM,GAAG,aAAWpF,IAAM;;EAE5B,OAAUoF,MAAM,WAAMH,OAAS;AACjC;SAEgBI,eAAe,CAACC,MAAiB;EAC/C,IAAMzF,MAAM,GAAGC,kBAAkB;EACjC,IAAIyF,SAAS,GAAG,GAAG;EACnB,KAAK,IAAM3G,GAAG,IAAI0G,MAAM,EAAE;IACxB,IAAIA,MAAM,CAACzG,cAAc,CAACD,GAAG,CAAC,EAAE;MAC9B,IAAM4G,QAAQ,GAAG3F,MAAM,CAACjB,GAAG,CAAC,GAAG,GAAG,GAAGiB,MAAM,CAACyF,MAAM,CAAC1G,GAAG,CAAC,CAAC;MACxD2G,SAAS,GAAGA,SAAS,GAAGC,QAAQ,GAAG,GAAG;;;;EAK1CD,SAAS,GAAGA,SAAS,CAAC/E,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAClC,OAAO+E,SAAS;AAClB;;AC7CA;;;;;;;;;;;;;;;;AAiDA;EAuBE,wBACE3M,GAAW,EACX0F,MAAc,EACdE,OAAgB,EAChBD,IAAuC,EACvCkH,YAAsB,EACtBC,oBAA8B,EAC9BnD,QAA2C,EAC3CoD,aAEQ,EACRnD,OAAe,EACfoD,gBAA2D,EAC3DC,IAAoB;IAbtB;IAhBQ,uBAAkB,GAAsB,IAAI;IAC5C,eAAU,GAAqB,IAAI;IAInC,cAAS,GAAY,KAAK;IAC1B,eAAU,GAAY,KAAK;IAyBjC,IAAI,CAACC,IAAI,GAAGlN,GAAG;IACf,IAAI,CAACmN,OAAO,GAAGzH,MAAM;IACrB,IAAI,CAAC0H,QAAQ,GAAGxH,OAAO;IACvB,IAAI,CAACyH,KAAK,GAAG1H,IAAI;IACjB,IAAI,CAAC2H,aAAa,GAAGT,YAAY,CAACjF,KAAK,EAAE;IACzC,IAAI,CAAC2F,qBAAqB,GAAGT,oBAAoB,CAAClF,KAAK,EAAE;IACzD,IAAI,CAAC4F,SAAS,GAAG7D,QAAQ;IACzB,IAAI,CAAC8D,cAAc,GAAGV,aAAa;IACnC,IAAI,CAACW,iBAAiB,GAAGV,gBAAgB;IACzC,IAAI,CAACW,QAAQ,GAAG/D,OAAO;IACvB,IAAI,CAACgE,KAAK,GAAGX,IAAI;IACjB,IAAI,CAAC5D,QAAQ,GAAG,IAAIjE,OAAO,CAAC,UAACG,OAAO,EAAE+D,MAAM;MAC1C1K,KAAI,CAACiP,QAAQ,GAAGtI,OAA+C;MAC/D3G,KAAI,CAACkP,OAAO,GAAGxE,MAAM;MACrB1K,KAAI,CAACmP,MAAM,EAAE;KACd,CAAC;;;;;EAMIC,+BAAM,GAAd;IACE,IAAMC,IAAI,GAAG,IAAI;IAEjB,SAASC,YAAY,CACnBC,eAAwD,EACxDrO,QAAiB;MAEjB,IAAIA,QAAQ,EAAE;QACZqO,eAAe,CAAC,KAAK,EAAE,IAAIC,gBAAgB,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/D;;MAEF,IAAMC,UAAU,GAAGJ,IAAI,CAACL,KAAK,CAACU,gBAAgB,EAAE;MAChDL,IAAI,CAACM,kBAAkB,GAAGF,UAAU;MAEpC,SAASG,gBAAgB,CAACC,aAA4B;QACpD,IAAMC,MAAM,GAAGD,aAAa,CAACC,MAAM;QACnC,IAAMC,KAAK,GAAGF,aAAa,CAACG,gBAAgB,GAAGH,aAAa,CAACE,KAAK,GAAG,CAAC,CAAC;QACvE,IAAIV,IAAI,CAACP,iBAAiB,KAAK,IAAI,EAAE;UACnCO,IAAI,CAACP,iBAAiB,CAACgB,MAAM,EAAEC,KAAK,CAAC;;;MAGzC,IAAIV,IAAI,CAACP,iBAAiB,KAAK,IAAI,EAAE;QACnCW,UAAU,CAACQ,yBAAyB,CAACL,gBAAgB,CAAC;;;MAIxDH,UAAU,CACPjI,IAAI,CAAC6H,IAAI,CAACf,IAAI,EAAEe,IAAI,CAACd,OAAO,EAAEc,IAAI,CAACZ,KAAK,EAAEY,IAAI,CAACb,QAAQ,CAAC,CACxD0B,IAAI,CAAC;QACJ,IAAIb,IAAI,CAACP,iBAAiB,KAAK,IAAI,EAAE;UACnCW,UAAU,CAACU,4BAA4B,CAACP,gBAAgB,CAAC;;QAE3DP,IAAI,CAACM,kBAAkB,GAAG,IAAI;QAC9B,IAAMS,SAAS,GAAGX,UAAU,CAACY,YAAY,EAAE,KAAKnK,SAAS,CAACI,QAAQ;QAClE,IAAMmB,MAAM,GAAGgI,UAAU,CAACa,SAAS,EAAE;QACrC,IAAI,CAACF,SAAS,IAAIf,IAAI,CAACkB,kBAAkB,CAAC9I,MAAM,CAAC,EAAE;UACjD,IAAM+I,WAAW,GAAGf,UAAU,CAACY,YAAY,EAAE,KAAKnK,SAAS,CAACQ,KAAK;UACjE6I,eAAe,CACb,KAAK,EACL,IAAIC,gBAAgB,CAAC,KAAK,EAAE,IAAI,EAAEgB,WAAW,CAAC,CAC/C;UACD;;QAEF,IAAMC,WAAW,GAAGpB,IAAI,CAACX,aAAa,CAACxK,OAAO,CAACuD,MAAM,CAAC,KAAK,CAAC,CAAC;QAC7D8H,eAAe,CAAC,IAAI,EAAE,IAAIC,gBAAgB,CAACiB,WAAW,EAAEhB,UAAU,CAAC,CAAC;OACrE,CAAC;;;;;;IAON,SAASiB,WAAW,CAClBC,kBAA2B,EAC3BlJ,MAAwB;MAExB,IAAMd,OAAO,GAAG0I,IAAI,CAACJ,QAAQ;MAC7B,IAAMvE,MAAM,GAAG2E,IAAI,CAACH,OAAO;MAC3B,IAAMO,UAAU,GAAGhI,MAAM,CAACgI,UAAwB;MAClD,IAAIhI,MAAM,CAACmJ,cAAc,EAAE;QACzB,IAAI;UACF,IAAMC,MAAM,GAAGxB,IAAI,CAACT,SAAS,CAC3Ba,UAAU,EACVA,UAAU,CAACqB,eAAe,EAAE,CAC7B;UACD,IAAIrE,SAAS,CAACoE,MAAM,CAAC,EAAE;YACrBlK,OAAO,CAACkK,MAAM,CAAC;WAChB,MAAM;YACLlK,OAAO,EAAE;;SAEZ,CAAC,OAAO3C,CAAC,EAAE;UACV0G,MAAM,CAAC1G,CAAC,CAAC;;OAEZ,MAAM;QACL,IAAIyL,UAAU,KAAK,IAAI,EAAE;UACvB,IAAMsB,GAAG,GAAGtQ,OAAO,EAAE;UACrBsQ,GAAG,CAAC9Q,cAAc,GAAGwP,UAAU,CAACqB,eAAe,EAAE;UACjD,IAAIzB,IAAI,CAACR,cAAc,EAAE;YACvBnE,MAAM,CAAC2E,IAAI,CAACR,cAAc,CAACY,UAAU,EAAEsB,GAAG,CAAC,CAAC;WAC7C,MAAM;YACLrG,MAAM,CAACqG,GAAG,CAAC;;SAEd,MAAM;UACL,IAAItJ,MAAM,CAACvG,QAAQ,EAAE;YACnB,IAAM6P,GAAG,GAAG1B,IAAI,CAAC2B,UAAU,GAAGrP,UAAU,EAAE,GAAGT,QAAQ,EAAE;YACvDwJ,MAAM,CAACqG,GAAG,CAAC;WACZ,MAAM;YACL,IAAMA,GAAG,GAAG9P,kBAAkB,EAAE;YAChCyJ,MAAM,CAACqG,GAAG,CAAC;;;;;IAKnB,IAAI,IAAI,CAACE,SAAS,EAAE;MAClBP,WAAW,CAAC,KAAK,EAAE,IAAIlB,gBAAgB,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KAC5D,MAAM;MACL,IAAI,CAAC0B,UAAU,GAAGrG,KAAK,CAACyE,YAAY,EAAEoB,WAAW,EAAE,IAAI,CAAC3B,QAAQ,CAAC;;GAEpE;;EAGDK,mCAAU,GAAV;IACE,OAAO,IAAI,CAAC3E,QAAQ;GACrB;;EAGD2E,+BAAM,GAAN,UAAO+B,SAAmB;IACxB,IAAI,CAACF,SAAS,GAAG,IAAI;IACrB,IAAI,CAACD,UAAU,GAAGG,SAAS,IAAI,KAAK;IACpC,IAAI,IAAI,CAACD,UAAU,KAAK,IAAI,EAAE;MAC5B7E,IAAI,CAAC,IAAI,CAAC6E,UAAU,CAAC;;IAEvB,IAAI,IAAI,CAACvB,kBAAkB,KAAK,IAAI,EAAE;MACpC,IAAI,CAACA,kBAAkB,CAAChI,KAAK,EAAE;;GAElC;EAEOyH,2CAAkB,GAA1B,UAA2B3H,MAAc;;;IAGvC,IAAM2J,iBAAiB,GAAG3J,MAAM,IAAI,GAAG,IAAIA,MAAM,GAAG,GAAG;IACvD,IAAM4J,eAAe,GAAG;;IAEtB,GAAG;;IAEH,GAAG,CACJ;IACD,IAAMC,gBAAgB,GAAGD,eAAe,CAACnN,OAAO,CAACuD,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/D,IAAM8J,0BAA0B,GAC9B,IAAI,CAAC5C,qBAAqB,CAACzK,OAAO,CAACuD,MAAM,CAAC,KAAK,CAAC,CAAC;IACnD,OAAO2J,iBAAiB,IAAIE,gBAAgB,IAAIC,0BAA0B;GAC3E;EACH,qBAAC;AAAD,CAAC;AAED;;;;AAIA;EAME,0BACSX,cAAuB,EACvBnB,UAA6B,EACpCvO,QAAkB;IAFX,mBAAc,GAAd0P,cAAc;IACd,eAAU,GAAVnB,UAAU;IAGjB,IAAI,CAACvO,QAAQ,GAAG,CAAC,CAACA,QAAQ;;EAE9B,uBAAC;AAAD,CAAC;SAEesQ,cAAc,CAC5BxK,OAAgB,EAChByK,SAAwB;EAExB,IAAIA,SAAS,KAAK,IAAI,IAAIA,SAAS,CAACpO,MAAM,GAAG,CAAC,EAAE;IAC9C2D,OAAO,CAAC,eAAe,CAAC,GAAG,WAAW,GAAGyK,SAAS;;AAEtD;SAEgBC,iBAAiB,CAC/B1K,OAAgB,EAChB2K,eAAwB;EAExB3K,OAAO,CAAC,4BAA4B,CAAC,GACnC,QAAQ,IAAI2K,eAAe,aAAfA,eAAe,cAAfA,eAAe,GAAI,YAAY,CAAC;AAChD;SAEgBC,eAAe,CAAC5K,OAAgB,EAAE6K,KAAoB;EACpE,IAAIA,KAAK,EAAE;IACT7K,OAAO,CAAC,kBAAkB,CAAC,GAAG6K,KAAK;;AAEvC;SAEgBC,kBAAkB,CAChC9K,OAAgB,EAChB+K,aAA4B;EAE5B,IAAIA,aAAa,KAAK,IAAI,EAAE;IAC1B/K,OAAO,CAAC,qBAAqB,CAAC,GAAG+K,aAAa;;AAElD;SAEgBC,WAAW,CACzBC,WAA2B,EAC3BJ,KAAoB,EACpBJ,SAAwB,EACxBM,aAA4B,EAC5B1D,IAAoB,EACpBsD,eAAwB;EAExB,IAAM5D,SAAS,GAAGF,eAAe,CAACoE,WAAW,CAACC,SAAS,CAAC;EACxD,IAAM9Q,GAAG,GAAG6Q,WAAW,CAAC7Q,GAAG,GAAG2M,SAAS;EACvC,IAAM/G,OAAO,GAAG7G,MAAM,CAACgS,MAAM,CAAC,EAAE,EAAEF,WAAW,CAACjL,OAAO,CAAC;EACtD4K,eAAe,CAAC5K,OAAO,EAAE6K,KAAK,CAAC;EAC/BL,cAAc,CAACxK,OAAO,EAAEyK,SAAS,CAAC;EAClCC,iBAAiB,CAAC1K,OAAO,EAAE2K,eAAe,CAAC;EAC3CG,kBAAkB,CAAC9K,OAAO,EAAE+K,aAAa,CAAC;EAC1C,OAAO,IAAI3C,cAAc,CACvBhO,GAAG,EACH6Q,WAAW,CAACnL,MAAM,EAClBE,OAAO,EACPiL,WAAW,CAAClL,IAAI,EAChBkL,WAAW,CAAChE,YAAY,EACxBgE,WAAW,CAAC/D,oBAAoB,EAChC+D,WAAW,CAACpG,OAAO,EACnBoG,WAAW,CAACG,YAAY,EACxBH,WAAW,CAACjH,OAAO,EACnBiH,WAAW,CAAC7D,gBAAgB,EAC5BC,IAAI,CACL;AACH;;ACjUA;;;;;;;;;;;;;;;;AAwBA,SAASgE,cAAc;EACrB,IAAI,OAAOC,WAAW,KAAK,WAAW,EAAE;IACtC,OAAOA,WAAW;GACnB,MAAM,IAAI,OAAOC,iBAAiB,KAAK,WAAW,EAAE;IACnD,OAAOA,iBAAiB;GACzB,MAAM;IACL,OAAOpL,SAAS;;AAEpB;AAEA;;;;;;SAMgBqL,OAAO;EAAC;OAAA,UAA2C,EAA3CjH,qBAA2C,EAA3CA,IAA2C;IAA3CC;;EACtB,IAAM8G,WAAW,GAAGD,cAAc,EAAE;EACpC,IAAIC,WAAW,KAAKnL,SAAS,EAAE;IAC7B,IAAMsL,EAAE,GAAG,IAAIH,WAAW,EAAE;IAC5B,KAAK,IAAIlP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoI,IAAI,CAACnI,MAAM,EAAED,CAAC,EAAE,EAAE;MACpCqP,EAAE,CAACC,MAAM,CAAClH,IAAI,CAACpI,CAAC,CAAC,CAAC;;IAEpB,OAAOqP,EAAE,CAACD,OAAO,EAAE;GACpB,MAAM;IACL,IAAItF,mBAAmB,EAAE,EAAE;MACzB,OAAO,IAAIC,IAAI,CAAC3B,IAAI,CAAC;KACtB,MAAM;MACL,MAAM,IAAInL,oBAAoB,0DAE5B,qDAAqD,CACtD;;;AAGP;AAEA;;;;;;;;;SASgBsS,SAAS,CAACC,IAAU,EAAE/H,KAAa,EAAEvF,GAAW;EAC9D,IAAIsN,IAAI,CAACC,WAAW,EAAE;IACpB,OAAOD,IAAI,CAACC,WAAW,CAAChI,KAAK,EAAEvF,GAAG,CAAC;GACpC,MAAM,IAAIsN,IAAI,CAACE,QAAQ,EAAE;IACxB,OAAOF,IAAI,CAACE,QAAQ,CAACjI,KAAK,EAAEvF,GAAG,CAAC;GACjC,MAAM,IAAIsN,IAAI,CAAC5J,KAAK,EAAE;IACrB,OAAO4J,IAAI,CAAC5J,KAAK,CAAC6B,KAAK,EAAEvF,GAAG,CAAC;;EAE/B,OAAO,IAAI;AACb;;AC9EA;;;;;;;;;;;;;;;;AA0BA;;;;;;;AAOA;EAKE,iBAAY7C,IAAqC,EAAEsQ,SAAmB;IACpE,IAAIC,IAAI,GAAW,CAAC;IACpB,IAAIC,QAAQ,GAAW,EAAE;IACzB,IAAIhG,YAAY,CAACxK,IAAI,CAAC,EAAE;MACtB,IAAI,CAACyQ,KAAK,GAAGzQ,IAAY;MACzBuQ,IAAI,GAAIvQ,IAAa,CAACuQ,IAAI;MAC1BC,QAAQ,GAAIxQ,IAAa,CAAC0Q,IAAI;KAC/B,MAAM,IAAI1Q,IAAI,YAAY2Q,WAAW,EAAE;MACtC,IAAIL,SAAS,EAAE;QACb,IAAI,CAACG,KAAK,GAAG,IAAItP,UAAU,CAACnB,IAAI,CAAC;OAClC,MAAM;QACL,IAAI,CAACyQ,KAAK,GAAG,IAAItP,UAAU,CAACnB,IAAI,CAAC4Q,UAAU,CAAC;QAC5C,IAAI,CAACH,KAAK,CAACI,GAAG,CAAC,IAAI1P,UAAU,CAACnB,IAAI,CAAC,CAAC;;MAEtCuQ,IAAI,GAAG,IAAI,CAACE,KAAK,CAAC7P,MAAM;KACzB,MAAM,IAAIZ,IAAI,YAAYmB,UAAU,EAAE;MACrC,IAAImP,SAAS,EAAE;QACb,IAAI,CAACG,KAAK,GAAGzQ,IAAkB;OAChC,MAAM;QACL,IAAI,CAACyQ,KAAK,GAAG,IAAItP,UAAU,CAACnB,IAAI,CAACY,MAAM,CAAC;QACxC,IAAI,CAAC6P,KAAK,CAACI,GAAG,CAAC7Q,IAAkB,CAAC;;MAEpCuQ,IAAI,GAAGvQ,IAAI,CAACY,MAAM;;IAEpB,IAAI,CAACkQ,KAAK,GAAGP,IAAI;IACjB,IAAI,CAACQ,KAAK,GAAGP,QAAQ;;EAGvBQ,sBAAI,GAAJ;IACE,OAAO,IAAI,CAACF,KAAK;GAClB;EAEDE,sBAAI,GAAJ;IACE,OAAO,IAAI,CAACD,KAAK;GAClB;EAEDC,uBAAK,GAAL,UAAMC,SAAiB,EAAEC,OAAe;IACtC,IAAI1G,YAAY,CAAC,IAAI,CAACiG,KAAK,CAAC,EAAE;MAC5B,IAAMU,QAAQ,GAAG,IAAI,CAACV,KAAa;MACnC,IAAMW,MAAM,GAAGlB,SAAS,CAACiB,QAAQ,EAAEF,SAAS,EAAEC,OAAO,CAAC;MACtD,IAAIE,MAAM,KAAK,IAAI,EAAE;QACnB,OAAO,IAAI;;MAEb,OAAO,IAAIJ,OAAO,CAACI,MAAM,CAAC;KAC3B,MAAM;MACL,IAAM7K,KAAK,GAAG,IAAIpF,UAAU,CACzB,IAAI,CAACsP,KAAoB,CAACY,MAAM,EACjCJ,SAAS,EACTC,OAAO,GAAGD,SAAS,CACpB;MACD,OAAO,IAAID,OAAO,CAACzK,KAAK,EAAE,IAAI,CAAC;;GAElC;EAEMyK,eAAO,GAAd;IAAe;SAAA,UAAgC,EAAhClI,qBAAgC,EAAhCA,IAAgC;MAAhCC;;IACb,IAAI0B,mBAAmB,EAAE,EAAE;MACzB,IAAM6G,MAAM,GAAsCvI,IAAI,CAACwI,GAAG,CACxD,UAACC,GAAqB;QACpB,IAAIA,GAAG,YAAYR,OAAO,EAAE;UAC1B,OAAOQ,GAAG,CAACf,KAAK;SACjB,MAAM;UACL,OAAOe,GAAG;;OAEb,CACF;MACD,OAAO,IAAIR,OAAO,CAACjB,OAAO,CAAC/G,KAAK,CAAC,IAAI,EAAEsI,MAAM,CAAC,CAAC;KAChD,MAAM;MACL,IAAMG,WAAW,GAAiB1I,IAAI,CAACwI,GAAG,CACxC,UAACC,GAAqB;QACpB,IAAIlH,QAAQ,CAACkH,GAAG,CAAC,EAAE;UACjB,OAAOtR,cAAc,CAACP,YAAY,CAACC,GAAG,EAAE4R,GAAa,CAAC,CAACxR,IAAI;SAC5D,MAAM;;UAEL,OAAQwR,GAAe,CAACf,KAAmB;;OAE9C,CACF;MACD,IAAIiB,aAAW,GAAG,CAAC;MACnBD,WAAW,CAACE,OAAO,CAAC,UAAC3P,KAAiB;QACpC0P,aAAW,IAAI1P,KAAK,CAAC4O,UAAU;OAChC,CAAC;MACF,IAAMgB,QAAM,GAAG,IAAIzQ,UAAU,CAACuQ,aAAW,CAAC;MAC1C,IAAIG,OAAK,GAAG,CAAC;MACbJ,WAAW,CAACE,OAAO,CAAC,UAAC3P,KAAiB;QACpC,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqB,KAAK,CAACpB,MAAM,EAAED,CAAC,EAAE,EAAE;UACrCiR,QAAM,CAACC,OAAK,EAAE,CAAC,GAAG7P,KAAK,CAACrB,CAAC,CAAC;;OAE7B,CAAC;MACF,OAAO,IAAIqQ,OAAO,CAACY,QAAM,EAAE,IAAI,CAAC;;GAEnC;EAEDZ,4BAAU,GAAV;IACE,OAAO,IAAI,CAACP,KAAK;GAClB;EACH,cAAC;AAAD,CAAC;;ACrID;;;;;;;;;;;;;;;;AAkBA;;;;SAIgBqB,gBAAgB,CAC9BlP,CAAS;EAET,IAAImP,GAAG;EACP,IAAI;IACFA,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACrP,CAAC,CAAC;GACpB,CAAC,OAAOrB,CAAC,EAAE;IACV,OAAO,IAAI;;EAEb,IAAI4I,gBAAgB,CAAC4H,GAAG,CAAC,EAAE;IACzB,OAAOA,GAAG;GACX,MAAM;IACL,OAAO,IAAI;;AAEf;;ACpCA;;;;;;;;;;;;;;;;AAiBA;;;AAIA;;;SAGgBG,MAAM,CAAChU,IAAY;EACjC,IAAIA,IAAI,CAAC0C,MAAM,KAAK,CAAC,EAAE;IACrB,OAAO,IAAI;;EAEb,IAAMuR,KAAK,GAAGjU,IAAI,CAACkU,WAAW,CAAC,GAAG,CAAC;EACnC,IAAID,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB,OAAO,EAAE;;EAEX,IAAME,OAAO,GAAGnU,IAAI,CAACqI,KAAK,CAAC,CAAC,EAAE4L,KAAK,CAAC;EACpC,OAAOE,OAAO;AAChB;SAEgBC,KAAK,CAACpU,IAAY,EAAEqU,SAAiB;EACnD,IAAMC,kBAAkB,GAAGD,SAAS,CACjCE,KAAK,CAAC,GAAG,CAAC,CACVC,MAAM,CAAC,mBAAS;IAAI,gBAAS,CAAC9R,MAAM,GAAG,CAAC;EAAA,EAAC,CACzC+R,IAAI,CAAC,GAAG,CAAC;EACZ,IAAIzU,IAAI,CAAC0C,MAAM,KAAK,CAAC,EAAE;IACrB,OAAO4R,kBAAkB;GAC1B,MAAM;IACL,OAAOtU,IAAI,GAAG,GAAG,GAAGsU,kBAAkB;;AAE1C;AAEA;;;;;;SAMgBI,aAAa,CAAC1U,IAAY;EACxC,IAAMiU,KAAK,GAAGjU,IAAI,CAACkU,WAAW,CAAC,GAAG,EAAElU,IAAI,CAAC0C,MAAM,GAAG,CAAC,CAAC;EACpD,IAAIuR,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB,OAAOjU,IAAI;GACZ,MAAM;IACL,OAAOA,IAAI,CAACqI,KAAK,CAAC4L,KAAK,GAAG,CAAC,CAAC;;AAEhC;;AC7DA;;;;;;;;;;;;;;;;SA8BgBU,QAAQ,CAAIC,QAAkB,EAAErS,KAAQ;EACtD,OAAOA,KAAK;AACd;AAEA;EAKE,iBACSsS,MAAc,EACrBC,KAAqB,EACrBC,QAAkB,EAClBC,KAAwD;IAHjD,WAAM,GAANH,MAAM;IAKb,IAAI,CAACC,KAAK,GAAGA,KAAK,IAAID,MAAM;IAC5B,IAAI,CAACE,QAAQ,GAAG,CAAC,CAACA,QAAQ;IAC1B,IAAI,CAACC,KAAK,GAAGA,KAAK,IAAIL,QAAQ;;EAElC,cAAC;AAAD,CAAC;AAKD,IAAIM,SAAS,GAAoB,IAAI;SAErBC,SAAS,CAACC,QAA4B;EACpD,IAAI,CAAC/I,QAAQ,CAAC+I,QAAQ,CAAC,IAAIA,QAAQ,CAACzS,MAAM,GAAG,CAAC,EAAE;IAC9C,OAAOyS,QAAQ;GAChB,MAAM;IACL,OAAOT,aAAa,CAACS,QAAQ,CAAC;;AAElC;SAEgBC,WAAW;EACzB,IAAIH,SAAS,EAAE;IACb,OAAOA,SAAS;;EAElB,IAAMI,QAAQ,GAAa,EAAE;EAC7BA,QAAQ,CAACxS,IAAI,CAAC,IAAIyS,OAAO,CAAS,QAAQ,CAAC,CAAC;EAC5CD,QAAQ,CAACxS,IAAI,CAAC,IAAIyS,OAAO,CAAS,YAAY,CAAC,CAAC;EAChDD,QAAQ,CAACxS,IAAI,CAAC,IAAIyS,OAAO,CAAS,gBAAgB,CAAC,CAAC;EACpDD,QAAQ,CAACxS,IAAI,CAAC,IAAIyS,OAAO,CAAS,MAAM,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;EAE5D,SAASC,iBAAiB,CACxBC,SAAmB,EACnBL,QAA4B;IAE5B,OAAOD,SAAS,CAACC,QAAQ,CAAC;;EAE5B,IAAMM,WAAW,GAAG,IAAIH,OAAO,CAAS,MAAM,CAAC;EAC/CG,WAAW,CAACT,KAAK,GAAGO,iBAAiB;EACrCF,QAAQ,CAACxS,IAAI,CAAC4S,WAAW,CAAC;;;;EAK1B,SAASC,SAAS,CAChBF,SAAmB,EACnBnD,IAAsB;IAEtB,IAAIA,IAAI,KAAK7L,SAAS,EAAE;MACtB,OAAOmP,MAAM,CAACtD,IAAI,CAAC;KACpB,MAAM;MACL,OAAOA,IAAI;;;EAGf,IAAMuD,WAAW,GAAG,IAAIN,OAAO,CAAS,MAAM,CAAC;EAC/CM,WAAW,CAACZ,KAAK,GAAGU,SAAS;EAC7BL,QAAQ,CAACxS,IAAI,CAAC+S,WAAW,CAAC;EAC1BP,QAAQ,CAACxS,IAAI,CAAC,IAAIyS,OAAO,CAAS,aAAa,CAAC,CAAC;EACjDD,QAAQ,CAACxS,IAAI,CAAC,IAAIyS,OAAO,CAAS,SAAS,CAAC,CAAC;EAC7CD,QAAQ,CAACxS,IAAI,CAAC,IAAIyS,OAAO,CAAS,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;EACzDD,QAAQ,CAACxS,IAAI,CAAC,IAAIyS,OAAO,CAAS,cAAc,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;EAC9DD,QAAQ,CAACxS,IAAI,CAAC,IAAIyS,OAAO,CAAS,oBAAoB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;EACpED,QAAQ,CAACxS,IAAI,CAAC,IAAIyS,OAAO,CAAS,iBAAiB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;EACjED,QAAQ,CAACxS,IAAI,CAAC,IAAIyS,OAAO,CAAS,iBAAiB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;EACjED,QAAQ,CAACxS,IAAI,CAAC,IAAIyS,OAAO,CAAS,aAAa,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;EAC7DD,QAAQ,CAACxS,IAAI,CAAC,IAAIyS,OAAO,CAAS,UAAU,EAAE,gBAAgB,EAAE,IAAI,CAAC,CAAC;EACtEL,SAAS,GAAGI,QAAQ;EACpB,OAAOJ,SAAS;AAClB;SAEgBY,MAAM,CAACjB,QAAkB,EAAEkB,OAA4B;EACrE,SAASC,WAAW;IAClB,IAAM7V,MAAM,GAAW0U,QAAQ,CAAC,QAAQ,CAAW;IACnD,IAAM5U,IAAI,GAAW4U,QAAQ,CAAC,UAAU,CAAW;IACnD,IAAMzM,GAAG,GAAG,IAAIV,QAAQ,CAACvH,MAAM,EAAEF,IAAI,CAAC;IACtC,OAAO8V,OAAO,CAACE,qBAAqB,CAAC7N,GAAG,CAAC;;EAE3C3I,MAAM,CAACyW,cAAc,CAACrB,QAAQ,EAAE,KAAK,EAAE;IAAEsB,GAAG,EAAEH;EAAW,CAAE,CAAC;AAC9D;SAEgBI,YAAY,CAC1BL,OAA4B,EAC5BM,QAAqC,EACrCf,QAAkB;EAElB,IAAMT,QAAQ,GAAa,EAAc;EACzCA,QAAQ,CAAC,MAAM,CAAC,GAAG,MAAM;EACzB,IAAMyB,GAAG,GAAGhB,QAAQ,CAAC3S,MAAM;EAC3B,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4T,GAAG,EAAE5T,CAAC,EAAE,EAAE;IAC5B,IAAM6T,OAAO,GAAGjB,QAAQ,CAAC5S,CAAC,CAAC;IAC3BmS,QAAQ,CAAC0B,OAAO,CAACxB,KAAK,CAAC,GAAIwB,OAA4B,CAACtB,KAAK,CAC3DJ,QAAQ,EACRwB,QAAQ,CAACE,OAAO,CAACzB,MAAM,CAAC,CACzB;;EAEHgB,MAAM,CAACjB,QAAQ,EAAEkB,OAAO,CAAC;EACzB,OAAOlB,QAAQ;AACjB;SAEgB2B,kBAAkB,CAChCT,OAA4B,EAC5BU,cAAsB,EACtBnB,QAAkB;EAElB,IAAMxB,GAAG,GAAGD,gBAAgB,CAAC4C,cAAc,CAAC;EAC5C,IAAI3C,GAAG,KAAK,IAAI,EAAE;IAChB,OAAO,IAAI;;EAEb,IAAMuC,QAAQ,GAAGvC,GAAe;EAChC,OAAOsC,YAAY,CAACL,OAAO,EAAEM,QAAQ,EAAEf,QAAQ,CAAC;AAClD;SAEgBoB,6BAA6B,CAC3C7B,QAAkB,EAClB4B,cAAsB,EACtB3O,IAAY;EAEZ,IAAMgM,GAAG,GAAGD,gBAAgB,CAAC4C,cAAc,CAAC;EAC5C,IAAI3C,GAAG,KAAK,IAAI,EAAE;IAChB,OAAO,IAAI;;EAEb,IAAI,CAACzH,QAAQ,CAACyH,GAAG,CAAC,gBAAgB,CAAC,CAAC,EAAE;;;IAGpC,OAAO,IAAI;;EAEb,IAAM6C,MAAM,GAAW7C,GAAG,CAAC,gBAAgB,CAAW;EACtD,IAAI6C,MAAM,CAAChU,MAAM,KAAK,CAAC,EAAE;IACvB,OAAO,IAAI;;EAEb,IAAMgF,MAAM,GAAGC,kBAAkB;EACjC,IAAMgP,UAAU,GAAGD,MAAM,CAACnC,KAAK,CAAC,GAAG,CAAC;EACpC,IAAMqC,IAAI,GAAGD,UAAU,CAACtD,GAAG,CAAC,UAACwD,KAAa;IACxC,IAAM3W,MAAM,GAAW0U,QAAQ,CAAC,QAAQ,CAAW;IACnD,IAAM5U,IAAI,GAAW4U,QAAQ,CAAC,UAAU,CAAW;IACnD,IAAM9H,OAAO,GAAG,KAAK,GAAGpF,MAAM,CAACxH,MAAM,CAAC,GAAG,KAAK,GAAGwH,MAAM,CAAC1H,IAAI,CAAC;IAC7D,IAAM8W,IAAI,GAAGjK,OAAO,CAACC,OAAO,EAAEjF,IAAI,CAAC;IACnC,IAAMkP,WAAW,GAAG7J,eAAe,CAAC;MAClC8J,GAAG,EAAE,OAAO;MACZH,KAAK;KACN,CAAC;IACF,OAAOC,IAAI,GAAGC,WAAW;GAC1B,CAAC;EACF,OAAOH,IAAI,CAAC,CAAC,CAAC;AAChB;SAEgBK,gBAAgB,CAC9BrC,QAA2B,EAC3BS,QAAkB;EAElB,IAAMe,QAAQ,GAEV,EAAE;EACN,IAAMC,GAAG,GAAGhB,QAAQ,CAAC3S,MAAM;EAC3B,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4T,GAAG,EAAE5T,CAAC,EAAE,EAAE;IAC5B,IAAM6T,OAAO,GAAGjB,QAAQ,CAAC5S,CAAC,CAAC;IAC3B,IAAI6T,OAAO,CAACvB,QAAQ,EAAE;MACpBqB,QAAQ,CAACE,OAAO,CAACzB,MAAM,CAAC,GAAGD,QAAQ,CAAC0B,OAAO,CAACxB,KAAK,CAAC;;;EAGtD,OAAOhB,IAAI,CAACoD,SAAS,CAACd,QAAQ,CAAC;AACjC;;AC5MA;;;;;;;;;;;;;;;;AA4CA,IAAMe,YAAY,GAAG,UAAU;AAC/B,IAAMC,SAAS,GAAG,OAAO;AAEzB,SAASC,mBAAmB,CAC1BvB,OAA4B,EAC5B5V,MAAc,EACdkW,QAA4B;EAE5B,IAAMkB,UAAU,GAAe;IAC7BC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,aAAa,EAAErB,QAAQ,CAAC,eAAe;GACxC;EACD,IAAIA,QAAQ,CAACe,YAAY,CAAC,EAAE;IAC1B,KAAmB,UAAsB,EAAtBO,aAAQ,CAACP,YAAY,CAAC,EAAtBvM,cAAsB,EAAtBA,IAAsB,EAAE;MAAtC,IAAM5K,IAAI;MACb,IAAM2X,wBAAwB,GAAG3X,IAAI,CAAC4D,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;MACxD,IAAMgU,SAAS,GAAG9B,OAAO,CAACE,qBAAqB,CAC7C,IAAIvO,QAAQ,CAACvH,MAAM,EAAEyX,wBAAwB,CAAC,CAC/C;MACDL,UAAU,CAACC,QAAQ,CAAC1U,IAAI,CAAC+U,SAAS,CAAC;;;EAIvC,IAAIxB,QAAQ,CAACgB,SAAS,CAAC,EAAE;IACvB,KAAmB,UAAmB,EAAnBS,aAAQ,CAACT,SAAS,CAAC,EAAnBU,cAAmB,EAAnBA,IAAmB,EAAE;MAAnC,IAAMC,IAAI;MACb,IAAMH,SAAS,GAAG9B,OAAO,CAACE,qBAAqB,CAC7C,IAAIvO,QAAQ,CAACvH,MAAM,EAAE6X,IAAI,CAAC,MAAM,CAAC,CAAC,CACnC;MACDT,UAAU,CAACE,KAAK,CAAC3U,IAAI,CAAC+U,SAAS,CAAC;;;EAGpC,OAAON,UAAU;AACnB;SAEgBU,kBAAkB,CAChClC,OAA4B,EAC5B5V,MAAc,EACdsW,cAAsB;EAEtB,IAAM3C,GAAG,GAAGD,gBAAgB,CAAC4C,cAAc,CAAC;EAC5C,IAAI3C,GAAG,KAAK,IAAI,EAAE;IAChB,OAAO,IAAI;;EAEb,IAAMuC,QAAQ,GAAGvC,GAAoC;EACrD,OAAOwD,mBAAmB,CAACvB,OAAO,EAAE5V,MAAM,EAAEkW,QAAQ,CAAC;AACvD;AC/DA;EAiBE,qBACS3V,GAAW,EACX0F,MAAc;;;;;;;;EAQd+E,OAA0C,EAC1Cb,OAAe;IAVf,QAAG,GAAH5J,GAAG;IACH,WAAM,GAAN0F,MAAM;IAQN,YAAO,GAAP+E,OAAO;IACP,YAAO,GAAPb,OAAO;IA3BhB,cAAS,GAAc,EAAE;IACzB,YAAO,GAAY,EAAE;IACrB,SAAI,GAAsC,IAAI;IAE9C,iBAAY,GAED,IAAI;;;;;IAMf,qBAAgB,GAA8C,IAAI;IAClE,iBAAY,GAAa,CAAC,GAAG,CAAC;IAC9B,yBAAoB,GAAa,EAAE;;EAerC,kBAAC;AAAD,CAAC;;ACxDD;;;;;;;;;;;;;;;;AAiDA;;;SAGgB4N,YAAY,CAACC,IAAa;EACxC,IAAI,CAACA,IAAI,EAAE;IACT,MAAMpY,OAAO,EAAE;;AAEnB;SAEgBqY,eAAe,CAC7BrC,OAA4B,EAC5BT,QAAkB;EAElB,SAASnK,OAAO,CAACkN,GAAe,EAAEC,IAAY;IAC5C,IAAMzD,QAAQ,GAAG2B,kBAAkB,CAACT,OAAO,EAAEuC,IAAI,EAAEhD,QAAQ,CAAC;IAC5D4C,YAAY,CAACrD,QAAQ,KAAK,IAAI,CAAC;IAC/B,OAAOA,QAAoB;;EAE7B,OAAO1J,OAAO;AAChB;SAEgBoN,WAAW,CACzBxC,OAA4B,EAC5B5V,MAAc;EAEd,SAASgL,OAAO,CAACkN,GAAe,EAAEC,IAAY;IAC5C,IAAMf,UAAU,GAAGU,kBAAkB,CAAClC,OAAO,EAAE5V,MAAM,EAAEmY,IAAI,CAAC;IAC5DJ,YAAY,CAACX,UAAU,KAAK,IAAI,CAAC;IACjC,OAAOA,UAAwB;;EAEjC,OAAOpM,OAAO;AAChB;SAEgBqN,kBAAkB,CAChCzC,OAA4B,EAC5BT,QAAkB;EAElB,SAASnK,OAAO,CAACkN,GAAe,EAAEC,IAAY;IAC5C,IAAMzD,QAAQ,GAAG2B,kBAAkB,CAACT,OAAO,EAAEuC,IAAI,EAAEhD,QAAQ,CAAC;IAC5D4C,YAAY,CAACrD,QAAQ,KAAK,IAAI,CAAC;IAC/B,OAAO6B,6BAA6B,CAClC7B,QAAoB,EACpByD,IAAI,EACJvC,OAAO,CAACjO,IAAI,CACb;;EAEH,OAAOqD,OAAO;AAChB;SAEgBsN,kBAAkB,CAChCxQ,QAAkB;EAElB,SAASyJ,YAAY,CACnB2G,GAAe,EACfhI,GAAyB;IAEzB,IAAIqI,MAAM;IACV,IAAIL,GAAG,CAACzI,SAAS,EAAE,KAAK,GAAG,EAAE;MAC3B;;;MAGEyI,GAAG,CAACjI,eAAe,EAAE,CAACuI,QAAQ,CAAC,qCAAqC,CAAC,EACrE;QACAD,MAAM,GAAGrY,eAAe,EAAE;OAC3B,MAAM;QACLqY,MAAM,GAAGtY,eAAe,EAAE;;KAE7B,MAAM;MACL,IAAIiY,GAAG,CAACzI,SAAS,EAAE,KAAK,GAAG,EAAE;QAC3B8I,MAAM,GAAGxY,aAAa,CAAC+H,QAAQ,CAAC9H,MAAM,CAAC;OACxC,MAAM;QACL,IAAIkY,GAAG,CAACzI,SAAS,EAAE,KAAK,GAAG,EAAE;UAC3B8I,MAAM,GAAGpY,YAAY,CAAC2H,QAAQ,CAAChI,IAAI,CAAC;SACrC,MAAM;UACLyY,MAAM,GAAGrI,GAAG;;;;IAIlBqI,MAAM,CAACnZ,cAAc,GAAG8Q,GAAG,CAAC9Q,cAAc;IAC1C,OAAOmZ,MAAM;;EAEf,OAAOhH,YAAY;AACrB;SAEgBkH,kBAAkB,CAChC3Q,QAAkB;EAElB,IAAM4Q,MAAM,GAAGJ,kBAAkB,CAACxQ,QAAQ,CAAC;EAE3C,SAASyJ,YAAY,CACnB2G,GAAe,EACfhI,GAAyB;IAEzB,IAAIqI,MAAM,GAAGG,MAAM,CAACR,GAAG,EAAEhI,GAAG,CAAC;IAC7B,IAAIgI,GAAG,CAACzI,SAAS,EAAE,KAAK,GAAG,EAAE;MAC3B8I,MAAM,GAAG1Y,cAAc,CAACiI,QAAQ,CAAChI,IAAI,CAAC;;IAExCyY,MAAM,CAACnZ,cAAc,GAAG8Q,GAAG,CAAC9Q,cAAc;IAC1C,OAAOmZ,MAAM;;EAEf,OAAOhH,YAAY;AACrB;SAEgBoH,aAAW,CACzB/C,OAA4B,EAC5B9N,QAAkB,EAClBqN,QAAkB;EAElB,IAAMvI,OAAO,GAAG9E,QAAQ,CAAC8Q,aAAa,EAAE;EACxC,IAAMrY,GAAG,GAAGoM,OAAO,CAACC,OAAO,EAAEgJ,OAAO,CAACjO,IAAI,CAAC;EAC1C,IAAM1B,MAAM,GAAG,KAAK;EACpB,IAAMkE,OAAO,GAAGyL,OAAO,CAACiD,qBAAqB;EAC7C,IAAMzH,WAAW,GAAG,IAAI0H,WAAW,CACjCvY,GAAG,EACH0F,MAAM,EACNgS,eAAe,CAACrC,OAAO,EAAET,QAAQ,CAAC,EAClChL,OAAO,CACR;EACDiH,WAAW,CAACG,YAAY,GAAGkH,kBAAkB,CAAC3Q,QAAQ,CAAC;EACvD,OAAOsJ,WAAW;AACpB;SAEgB2H,MAAI,CAClBnD,OAA4B,EAC5B9N,QAAkB,EAClBkR,SAAkB,EAClBC,SAAyB,EACzBC,UAA0B;EAE1B,IAAM7H,SAAS,GAAc,EAAE;EAC/B,IAAIvJ,QAAQ,CAACqR,MAAM,EAAE;IACnB9H,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE;GACzB,MAAM;IACLA,SAAS,CAAC,QAAQ,CAAC,GAAGvJ,QAAQ,CAAChI,IAAI,GAAG,GAAG;;EAE3C,IAAIkZ,SAAS,IAAIA,SAAS,CAACxW,MAAM,GAAG,CAAC,EAAE;IACrC6O,SAAS,CAAC,WAAW,CAAC,GAAG2H,SAAS;;EAEpC,IAAIC,SAAS,EAAE;IACb5H,SAAS,CAAC,WAAW,CAAC,GAAG4H,SAAS;;EAEpC,IAAIC,UAAU,EAAE;IACd7H,SAAS,CAAC,YAAY,CAAC,GAAG6H,UAAU;;EAEtC,IAAMtM,OAAO,GAAG9E,QAAQ,CAACsR,mBAAmB,EAAE;EAC9C,IAAM7Y,GAAG,GAAGoM,OAAO,CAACC,OAAO,EAAEgJ,OAAO,CAACjO,IAAI,CAAC;EAC1C,IAAM1B,MAAM,GAAG,KAAK;EACpB,IAAMkE,OAAO,GAAGyL,OAAO,CAACiD,qBAAqB;EAC7C,IAAMzH,WAAW,GAAG,IAAI0H,WAAW,CACjCvY,GAAG,EACH0F,MAAM,EACNmS,WAAW,CAACxC,OAAO,EAAE9N,QAAQ,CAAC9H,MAAM,CAAC,EACrCmK,OAAO,CACR;EACDiH,WAAW,CAACC,SAAS,GAAGA,SAAS;EACjCD,WAAW,CAACG,YAAY,GAAG+G,kBAAkB,CAACxQ,QAAQ,CAAC;EACvD,OAAOsJ,WAAW;AACpB;SAEgBiI,cAAc,CAC5BzD,OAA4B,EAC5B9N,QAAkB,EAClBqN,QAAkB;EAElB,IAAMvI,OAAO,GAAG9E,QAAQ,CAAC8Q,aAAa,EAAE;EACxC,IAAMrY,GAAG,GAAGoM,OAAO,CAACC,OAAO,EAAEgJ,OAAO,CAACjO,IAAI,CAAC;EAC1C,IAAM1B,MAAM,GAAG,KAAK;EACpB,IAAMkE,OAAO,GAAGyL,OAAO,CAACiD,qBAAqB;EAC7C,IAAMzH,WAAW,GAAG,IAAI0H,WAAW,CACjCvY,GAAG,EACH0F,MAAM,EACNoS,kBAAkB,CAACzC,OAAO,EAAET,QAAQ,CAAC,EACrChL,OAAO,CACR;EACDiH,WAAW,CAACG,YAAY,GAAGkH,kBAAkB,CAAC3Q,QAAQ,CAAC;EACvD,OAAOsJ,WAAW;AACpB;SAEgBkI,gBAAc,CAC5B1D,OAA4B,EAC5B9N,QAAkB,EAClB4M,QAA2B,EAC3BS,QAAkB;EAElB,IAAMvI,OAAO,GAAG9E,QAAQ,CAAC8Q,aAAa,EAAE;EACxC,IAAMrY,GAAG,GAAGoM,OAAO,CAACC,OAAO,EAAEgJ,OAAO,CAACjO,IAAI,CAAC;EAC1C,IAAM1B,MAAM,GAAG,OAAO;EACtB,IAAMC,IAAI,GAAG6Q,gBAAgB,CAACrC,QAAQ,EAAES,QAAQ,CAAC;EACjD,IAAMhP,OAAO,GAAG;IAAE,cAAc,EAAE;EAAiC,CAAE;EACrE,IAAMgE,OAAO,GAAGyL,OAAO,CAACiD,qBAAqB;EAC7C,IAAMzH,WAAW,GAAG,IAAI0H,WAAW,CACjCvY,GAAG,EACH0F,MAAM,EACNgS,eAAe,CAACrC,OAAO,EAAET,QAAQ,CAAC,EAClChL,OAAO,CACR;EACDiH,WAAW,CAACjL,OAAO,GAAGA,OAAO;EAC7BiL,WAAW,CAAClL,IAAI,GAAGA,IAAI;EACvBkL,WAAW,CAACG,YAAY,GAAGkH,kBAAkB,CAAC3Q,QAAQ,CAAC;EACvD,OAAOsJ,WAAW;AACpB;SAEgBmI,cAAY,CAC1B3D,OAA4B,EAC5B9N,QAAkB;EAElB,IAAM8E,OAAO,GAAG9E,QAAQ,CAAC8Q,aAAa,EAAE;EACxC,IAAMrY,GAAG,GAAGoM,OAAO,CAACC,OAAO,EAAEgJ,OAAO,CAACjO,IAAI,CAAC;EAC1C,IAAM1B,MAAM,GAAG,QAAQ;EACvB,IAAMkE,OAAO,GAAGyL,OAAO,CAACiD,qBAAqB;EAE7C,SAAS7N,OAAO,CAACwO,IAAgB,EAAEC,KAAa;EAChD,IAAMrI,WAAW,GAAG,IAAI0H,WAAW,CAACvY,GAAG,EAAE0F,MAAM,EAAE+E,OAAO,EAAEb,OAAO,CAAC;EAClEiH,WAAW,CAAChE,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;EACrCgE,WAAW,CAACG,YAAY,GAAGkH,kBAAkB,CAAC3Q,QAAQ,CAAC;EACvD,OAAOsJ,WAAW;AACpB;SAEgBsI,qBAAqB,CACnChF,QAAyB,EACzB3C,IAAoB;EAEpB,OACG2C,QAAQ,IAAIA,QAAQ,CAAC,aAAa,CAAC,IACnC3C,IAAI,IAAIA,IAAI,CAACO,IAAI,EAAG,IACrB,0BAA0B;AAE9B;SAEgBqH,kBAAkB,CAChC7R,QAAkB,EAClBiK,IAAa,EACb2C,QAA0B;EAE1B,IAAMkF,aAAa,GAAGta,MAAM,CAACgS,MAAM,CAAC,EAAE,EAAEoD,QAAQ,CAAC;EACjDkF,aAAa,CAAC,UAAU,CAAC,GAAG9R,QAAQ,CAAChI,IAAI;EACzC8Z,aAAa,CAAC,MAAM,CAAC,GAAG7H,IAAI,CAACI,IAAI,EAAE;EACnC,IAAI,CAACyH,aAAa,CAAC,aAAa,CAAC,EAAE;IACjCA,aAAa,CAAC,aAAa,CAAC,GAAGF,qBAAqB,CAAC,IAAI,EAAE3H,IAAI,CAAC;;EAElE,OAAO6H,aAAa;AACtB;AAEA;;;SAGgBC,eAAe,CAC7BjE,OAA4B,EAC5B9N,QAAkB,EAClBqN,QAAkB,EAClBpD,IAAa,EACb2C,QAA0B;EAE1B,IAAM9H,OAAO,GAAG9E,QAAQ,CAACsR,mBAAmB,EAAE;EAC9C,IAAMjT,OAAO,GAA+B;IAC1C,wBAAwB,EAAE;GAC3B;EAED,SAAS2T,WAAW;IAClB,IAAIC,GAAG,GAAG,EAAE;IACZ,KAAK,IAAIxX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BwX,GAAG,GAAGA,GAAG,GAAG1O,IAAI,CAACC,MAAM,EAAE,CAAC5E,QAAQ,EAAE,CAACyB,KAAK,CAAC,CAAC,CAAC;;IAE/C,OAAO4R,GAAG;;EAEZ,IAAMC,QAAQ,GAAGF,WAAW,EAAE;EAC9B3T,OAAO,CAAC,cAAc,CAAC,GAAG,8BAA8B,GAAG6T,QAAQ;EACnE,IAAMC,SAAS,GAAGN,kBAAkB,CAAC7R,QAAQ,EAAEiK,IAAI,EAAE2C,QAAQ,CAAC;EAC9D,IAAMwF,cAAc,GAAGnD,gBAAgB,CAACkD,SAAS,EAAE9E,QAAQ,CAAC;EAC5D,IAAMgF,WAAW,GACf,IAAI,GACJH,QAAQ,GACR,MAAM,GACN,uDAAuD,GACvDE,cAAc,GACd,QAAQ,GACRF,QAAQ,GACR,MAAM,GACN,gBAAgB,GAChBC,SAAS,CAAC,aAAa,CAAC,GACxB,UAAU;EACZ,IAAMG,YAAY,GAAG,QAAQ,GAAGJ,QAAQ,GAAG,IAAI;EAC/C,IAAM9T,IAAI,GAAG0M,OAAO,CAACjB,OAAO,CAACwI,WAAW,EAAEpI,IAAI,EAAEqI,YAAY,CAAC;EAC7D,IAAIlU,IAAI,KAAK,IAAI,EAAE;IACjB,MAAMxF,eAAe,EAAE;;EAEzB,IAAM2Q,SAAS,GAAc;IAAErQ,IAAI,EAAEiZ,SAAS,CAAC,UAAU;EAAE,CAAE;EAC7D,IAAM1Z,GAAG,GAAGoM,OAAO,CAACC,OAAO,EAAEgJ,OAAO,CAACjO,IAAI,CAAC;EAC1C,IAAM1B,MAAM,GAAG,MAAM;EACrB,IAAMkE,OAAO,GAAGyL,OAAO,CAACyE,kBAAkB;EAC1C,IAAMjJ,WAAW,GAAG,IAAI0H,WAAW,CACjCvY,GAAG,EACH0F,MAAM,EACNgS,eAAe,CAACrC,OAAO,EAAET,QAAQ,CAAC,EAClChL,OAAO,CACR;EACDiH,WAAW,CAACC,SAAS,GAAGA,SAAS;EACjCD,WAAW,CAACjL,OAAO,GAAGA,OAAO;EAC7BiL,WAAW,CAAClL,IAAI,GAAGA,IAAI,CAACoU,UAAU,EAAE;EACpClJ,WAAW,CAACG,YAAY,GAAG+G,kBAAkB,CAACxQ,QAAQ,CAAC;EACvD,OAAOsJ,WAAW;AACpB;AAEA;;;;;;;AAOA;EAIE,+BACSmJ,OAAe,EACfrL,KAAa,EACpBsL,SAAmB,EACnB9F,QAA0B;IAHnB,YAAO,GAAP6F,OAAO;IACP,UAAK,GAALrL,KAAK;IAIZ,IAAI,CAACsL,SAAS,GAAG,CAAC,CAACA,SAAS;IAC5B,IAAI,CAAC9F,QAAQ,GAAGA,QAAQ,IAAI,IAAI;;EAEpC,4BAAC;AAAD,CAAC;SAEe+F,kBAAkB,CAChCvC,GAAe,EACfwC,OAAkB;EAElB,IAAI9T,MAAM,GAAkB,IAAI;EAChC,IAAI;IACFA,MAAM,GAAGsR,GAAG,CAAClR,iBAAiB,CAAC,sBAAsB,CAAC;GACvD,CAAC,OAAO7D,CAAC,EAAE;IACV4U,YAAY,CAAC,KAAK,CAAC;;EAErB,IAAM4C,aAAa,GAAGD,OAAO,IAAI,CAAC,QAAQ,CAAC;EAC3C3C,YAAY,CAAC,CAAC,CAACnR,MAAM,IAAI+T,aAAa,CAACtX,OAAO,CAACuD,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;EAC9D,OAAOA,MAAgB;AACzB;SAEgBgU,qBAAqB,CACnChF,OAA4B,EAC5B9N,QAAkB,EAClBqN,QAAkB,EAClBpD,IAAa,EACb2C,QAA0B;EAE1B,IAAM9H,OAAO,GAAG9E,QAAQ,CAACsR,mBAAmB,EAAE;EAC9C,IAAMyB,iBAAiB,GAAGlB,kBAAkB,CAAC7R,QAAQ,EAAEiK,IAAI,EAAE2C,QAAQ,CAAC;EACtE,IAAMrD,SAAS,GAAc;IAAErQ,IAAI,EAAE6Z,iBAAiB,CAAC,UAAU;EAAE,CAAE;EACrE,IAAMta,GAAG,GAAGoM,OAAO,CAACC,OAAO,EAAEgJ,OAAO,CAACjO,IAAI,CAAC;EAC1C,IAAM1B,MAAM,GAAG,MAAM;EACrB,IAAME,OAAO,GAAG;IACd,wBAAwB,EAAE,WAAW;IACrC,uBAAuB,EAAE,OAAO;IAChC,qCAAqC,EAAE,KAAG4L,IAAI,CAACI,IAAI,EAAI;IACvD,mCAAmC,EAAE0I,iBAAiB,CAAC,aAAa,CAAE;IACtE,cAAc,EAAE;GACjB;EACD,IAAM3U,IAAI,GAAG6Q,gBAAgB,CAAC8D,iBAAiB,EAAE1F,QAAQ,CAAC;EAC1D,IAAMhL,OAAO,GAAGyL,OAAO,CAACyE,kBAAkB;EAE1C,SAASrP,OAAO,CAACkN,GAAe;IAC9BuC,kBAAkB,CAACvC,GAAG,CAAC;IACvB,IAAI3X,GAAG;IACP,IAAI;MACFA,GAAG,GAAG2X,GAAG,CAAClR,iBAAiB,CAAC,mBAAmB,CAAC;KACjD,CAAC,OAAO7D,CAAC,EAAE;MACV4U,YAAY,CAAC,KAAK,CAAC;;IAErBA,YAAY,CAAC7L,QAAQ,CAAC3L,GAAG,CAAC,CAAC;IAC3B,OAAOA,GAAa;;EAEtB,IAAM6Q,WAAW,GAAG,IAAI0H,WAAW,CAACvY,GAAG,EAAE0F,MAAM,EAAE+E,OAAO,EAAEb,OAAO,CAAC;EAClEiH,WAAW,CAACC,SAAS,GAAGA,SAAS;EACjCD,WAAW,CAACjL,OAAO,GAAGA,OAAO;EAC7BiL,WAAW,CAAClL,IAAI,GAAGA,IAAI;EACvBkL,WAAW,CAACG,YAAY,GAAG+G,kBAAkB,CAACxQ,QAAQ,CAAC;EACvD,OAAOsJ,WAAW;AACpB;AAEA;;;SAGgB0J,wBAAwB,CACtClF,OAA4B,EAC5B9N,QAAkB,EAClBvH,GAAW,EACXwR,IAAa;EAEb,IAAM5L,OAAO,GAAG;IAAE,uBAAuB,EAAE;EAAO,CAAE;EAEpD,SAAS6E,OAAO,CAACkN,GAAe;IAC9B,IAAMtR,MAAM,GAAG6T,kBAAkB,CAACvC,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC3D,IAAI6C,UAAU,GAAkB,IAAI;IACpC,IAAI;MACFA,UAAU,GAAG7C,GAAG,CAAClR,iBAAiB,CAAC,6BAA6B,CAAC;KAClE,CAAC,OAAO7D,CAAC,EAAE;MACV4U,YAAY,CAAC,KAAK,CAAC;;IAGrB,IAAI,CAACgD,UAAU,EAAE;;MAEfhD,YAAY,CAAC,KAAK,CAAC;;IAGrB,IAAM5F,IAAI,GAAGsD,MAAM,CAACsF,UAAU,CAAC;IAC/BhD,YAAY,CAAC,CAACiD,KAAK,CAAC7I,IAAI,CAAC,CAAC;IAC1B,OAAO,IAAI8I,qBAAqB,CAAC9I,IAAI,EAAEJ,IAAI,CAACI,IAAI,EAAE,EAAEvL,MAAM,KAAK,OAAO,CAAC;;EAEzE,IAAMX,MAAM,GAAG,MAAM;EACrB,IAAMkE,OAAO,GAAGyL,OAAO,CAACyE,kBAAkB;EAC1C,IAAMjJ,WAAW,GAAG,IAAI0H,WAAW,CAACvY,GAAG,EAAE0F,MAAM,EAAE+E,OAAO,EAAEb,OAAO,CAAC;EAClEiH,WAAW,CAACjL,OAAO,GAAGA,OAAO;EAC7BiL,WAAW,CAACG,YAAY,GAAG+G,kBAAkB,CAACxQ,QAAQ,CAAC;EACvD,OAAOsJ,WAAW;AACpB;AAEA;;;;AAIO,IAAM8J,2BAA2B,GAAW,GAAG,GAAG,IAAI;AAE7D;;;;;;;;;SASgBC,uBAAuB,CACrCrT,QAAkB,EAClB8N,OAA4B,EAC5BrV,GAAW,EACXwR,IAAa,EACbqJ,SAAiB,EACjBjG,QAAkB,EAClBvO,MAAqC,EACrC2G,gBAA4D;;;EAI5D,IAAM8N,OAAO,GAAG,IAAIJ,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/C,IAAIrU,MAAM,EAAE;IACVyU,OAAO,CAACd,OAAO,GAAG3T,MAAM,CAAC2T,OAAO;IAChCc,OAAO,CAACnM,KAAK,GAAGtI,MAAM,CAACsI,KAAK;GAC7B,MAAM;IACLmM,OAAO,CAACd,OAAO,GAAG,CAAC;IACnBc,OAAO,CAACnM,KAAK,GAAG6C,IAAI,CAACI,IAAI,EAAE;;EAE7B,IAAIJ,IAAI,CAACI,IAAI,EAAE,KAAKkJ,OAAO,CAACnM,KAAK,EAAE;IACjC,MAAMvO,mBAAmB,EAAE;;EAE7B,IAAM2a,SAAS,GAAGD,OAAO,CAACnM,KAAK,GAAGmM,OAAO,CAACd,OAAO;EACjD,IAAIgB,aAAa,GAAGD,SAAS;EAC7B,IAAIF,SAAS,GAAG,CAAC,EAAE;IACjBG,aAAa,GAAGlQ,IAAI,CAACmQ,GAAG,CAACD,aAAa,EAAEH,SAAS,CAAC;;EAEpD,IAAMvI,SAAS,GAAGwI,OAAO,CAACd,OAAO;EACjC,IAAMzH,OAAO,GAAGD,SAAS,GAAG0I,aAAa;EACzC,IAAME,aAAa,GACjBF,aAAa,KAAKD,SAAS,GAAG,kBAAkB,GAAG,QAAQ;EAC7D,IAAMnV,OAAO,GAAG;IACd,uBAAuB,EAAEsV,aAAa;IACtC,sBAAsB,EAAE,KAAGJ,OAAO,CAACd;GACpC;EACD,IAAMrU,IAAI,GAAG6L,IAAI,CAAC5J,KAAK,CAAC0K,SAAS,EAAEC,OAAO,CAAC;EAC3C,IAAI5M,IAAI,KAAK,IAAI,EAAE;IACjB,MAAMxF,eAAe,EAAE;;EAGzB,SAASsK,OAAO,CAACkN,GAAe,EAAEC,IAAY;;;;;IAK5C,IAAMuD,YAAY,GAAGjB,kBAAkB,CAACvC,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACjE,IAAMyD,UAAU,GAAGN,OAAO,CAACd,OAAO,GAAGgB,aAAa;IAClD,IAAMpJ,IAAI,GAAGJ,IAAI,CAACI,IAAI,EAAE;IACxB,IAAIuC,QAAQ;IACZ,IAAIgH,YAAY,KAAK,OAAO,EAAE;MAC5BhH,QAAQ,GAAGuD,eAAe,CAACrC,OAAO,EAAET,QAAQ,CAAC,CAAC+C,GAAG,EAAEC,IAAI,CAAC;KACzD,MAAM;MACLzD,QAAQ,GAAG,IAAI;;IAEjB,OAAO,IAAIuG,qBAAqB,CAC9BU,UAAU,EACVxJ,IAAI,EACJuJ,YAAY,KAAK,OAAO,EACxBhH,QAAQ,CACT;;EAEH,IAAMzO,MAAM,GAAG,MAAM;EACrB,IAAMkE,OAAO,GAAGyL,OAAO,CAACyE,kBAAkB;EAC1C,IAAMjJ,WAAW,GAAG,IAAI0H,WAAW,CAACvY,GAAG,EAAE0F,MAAM,EAAE+E,OAAO,EAAEb,OAAO,CAAC;EAClEiH,WAAW,CAACjL,OAAO,GAAGA,OAAO;EAC7BiL,WAAW,CAAClL,IAAI,GAAGA,IAAI,CAACoU,UAAU,EAAE;EACpClJ,WAAW,CAAC7D,gBAAgB,GAAGA,gBAAgB,IAAI,IAAI;EACvD6D,WAAW,CAACG,YAAY,GAAG+G,kBAAkB,CAACxQ,QAAQ,CAAC;EACvD,OAAOsJ,WAAW;AACpB;;ACxiBA;;;;;;;;;;;;;;;;AAqEA;EAKE,kBACEwK,cAA+C,EAC/CjS,KAAe,EACfkS,QAAqB;IAErB,IAAMC,WAAW,GACfhQ,UAAU,CAAC8P,cAAc,CAAC,IAAIjS,KAAK,IAAI,IAAI,IAAIkS,QAAQ,IAAI,IAAI;IACjE,IAAIC,WAAW,EAAE;MACf,IAAI,CAACC,IAAI,GAAGH,cAA2B;MACvC,IAAI,CAACjS,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACkS,QAAQ,GAAGA,QAAQ;KACzB,MAAM;MACL,IAAMG,QAAQ,GAAGJ,cAIhB;MACD,IAAI,CAACG,IAAI,GAAGC,QAAQ,CAACD,IAAI;MACzB,IAAI,CAACpS,KAAK,GAAGqS,QAAQ,CAACrS,KAAK;MAC3B,IAAI,CAACkS,QAAQ,GAAGG,QAAQ,CAACH,QAAQ;;;EAGvC,eAAC;AAAD,CAAC;;AChGD;;;;;;;;;;;;;;;;AAiBA;;;;;AAKA;SACgBI,KAAK,CAAChS,CAAW;EAC/B,OAAO;IAAC;SAAA,UAA2B,EAA3BS,qBAA2B,EAA3BA,IAA2B;MAA3BwR;;;IAENvW,OAAO,CAACG,OAAO,EAAE,CAACuJ,IAAI,CAAC;MAAM,QAAC,eAAI6M,aAAa;IAAA,CAAC,CAAC;GAClD;AACH;;AC5BA;;;;;;;;;;;;;;;;AAwDA;;;;;AAKA;;;;;;EAsCE,oBAAYC,GAAc,EAAEpK,IAAa,EAAE2C,QAAgC;IAA3E;IAA2C;MAAAA,eAAgC;IAAA;;;;IAxB3E,iBAAY,GAAW,CAAC;IAChB,uBAAkB,GAAY,KAAK;IACnC,yBAAoB,GAAY,KAAK;IACrC,eAAU,GAA+C,EAAE;IAM3D,WAAM,GAA0BpO,SAAS;IACzC,eAAU,GAAYA,SAAS;IAC/B,aAAQ,GAAsBA,SAAS;IACvC,qBAAgB,GAAW,CAAC;IAG5B,aAAQ,GAAsCA,SAAS;IACvD,YAAO,GAAwCA,SAAS;IAS9D,IAAI,CAAC8V,IAAI,GAAGD,GAAG;IACf,IAAI,CAACE,KAAK,GAAGtK,IAAI;IACjB,IAAI,CAACuD,SAAS,GAAGZ,QAAQ;IACzB,IAAI,CAAC4H,SAAS,GAAGpH,WAAW,EAAE;IAC9B,IAAI,CAACqH,UAAU,GAAG,IAAI,CAACC,kBAAkB,CAAC,IAAI,CAACH,KAAK,CAAC;IACrD,IAAI,CAACI,MAAM;IACX,IAAI,CAACC,aAAa,GAAG,eAAK;MACxBvd,KAAI,CAACwd,QAAQ,GAAGrW,SAAS;MACzBnH,KAAI,CAACyd,gBAAgB,GAAG,CAAC;MACzB,IAAIjT,KAAK,CAACkT,WAAW,2BAA2B,EAAE;QAChD1d,KAAI,CAAC2d,kBAAkB,GAAG,IAAI;QAC9B3d,KAAI,CAAC4d,oBAAoB,EAAE;OAC5B,MAAM;QACL5d,KAAI,CAAC6d,MAAM,GAAGrT,KAAK;QACnBxK,KAAI,CAAC8d,WAAW,qBAAyB;;KAE5C;;IACD,IAAI,CAACC,qBAAqB,GAAG,eAAK;MAChC/d,KAAI,CAACwd,QAAQ,GAAGrW,SAAS;MACzB,IAAIqD,KAAK,CAACkT,WAAW,2BAA2B,EAAE;QAChD1d,KAAI,CAAC4d,oBAAoB,EAAE;OAC5B,MAAM;QACL5d,KAAI,CAAC6d,MAAM,GAAGrT,KAAK;QACnBxK,KAAI,CAAC8d,WAAW,qBAAyB;;KAE5C;;IACD,IAAI,CAACE,QAAQ,GAAG,IAAIxX,OAAO,CAAC,UAACG,OAAO,EAAE+D,MAAM;MAC1C1K,KAAI,CAACie,QAAQ,GAAGtX,OAAO;MACvB3G,KAAI,CAACke,OAAO,GAAGxT,MAAM;MACrB1K,KAAI,CAACme,MAAM,EAAE;KACd,CAAC;;;IAIF,IAAI,CAACH,QAAQ,CAAC9N,IAAI,CAAC,IAAI,EAAE,cAAQ,CAAC;;EAG5BkO,0CAAqB,GAA7B;IAAA;IACE,IAAMC,UAAU,GAAG,IAAI,CAACC,YAAY;IACpC,OAAO,gBAAM;MAAI,YAAI,CAACC,eAAe,CAACF,UAAU,GAAGvO,MAAM,CAAC;IAAA;GAC3D;EAEOsO,uCAAkB,GAA1B,UAA2BxL,IAAa;IACtC,OAAOA,IAAI,CAACI,IAAI,EAAE,GAAG,GAAG,GAAG,IAAI;GAChC;EAEOoL,2BAAM,GAAd;IACE,IAAI,IAAI,CAACd,MAAM,8BAAgC;;MAE7C;;IAEF,IAAI,IAAI,CAACE,QAAQ,KAAKrW,SAAS,EAAE;MAC/B;;IAEF,IAAI,IAAI,CAACiW,UAAU,EAAE;MACnB,IAAI,IAAI,CAACoB,UAAU,KAAKrX,SAAS,EAAE;QACjC,IAAI,CAACsX,gBAAgB,EAAE;OACxB,MAAM;QACL,IAAI,IAAI,CAACd,kBAAkB,EAAE;UAC3B,IAAI,CAACe,YAAY,EAAE;SACpB,MAAM;UACL,IAAI,IAAI,CAACC,oBAAoB,EAAE;;YAE7B,IAAI,CAACC,cAAc,EAAE;WACtB,MAAM;YACL,IAAI,CAACC,eAAe,EAAE;;;;KAI7B,MAAM;MACL,IAAI,CAACC,cAAc,EAAE;;GAExB;EAEOV,kCAAa,GAArB,UACErT,QAA0E;IAD5E;;IAIEvE,OAAO,CAACuY,GAAG,CAAC,CACV,IAAI,CAAC9B,IAAI,CAAC+B,OAAO,CAACC,aAAa,EAAE,EACjC,IAAI,CAAChC,IAAI,CAAC+B,OAAO,CAACE,iBAAiB,EAAE,CACtC,CAAC,CAAChP,IAAI,CAAC,UAACmI,EAA0B;UAAzB5G,SAAS;QAAEM,aAAa;MAChC,QAAQ/R,KAAI,CAACsd,MAAM;QACjB;UACEvS,QAAQ,CAAC0G,SAAS,EAAEM,aAAa,CAAC;UAClC;QACF;UACE/R,KAAI,CAAC8d,WAAW,2BAA4B;UAC5C;QACF;UACE9d,KAAI,CAAC8d,WAAW,uBAA0B;UAC1C;MAAM;KAGX,CAAC;GACH;;EAIOM,qCAAgB,GAAxB;IAAA;IACE,IAAI,CAACe,aAAa,CAAC,UAAC1N,SAAS,EAAEM,aAAa;MAC1C,IAAME,WAAW,GAAGwJ,qBAAqB,CACvCzb,KAAI,CAACid,IAAI,CAAC+B,OAAO,EACjBhf,KAAI,CAACid,IAAI,CAACmC,SAAS,EACnBpf,KAAI,CAACmd,SAAS,EACdnd,KAAI,CAACkd,KAAK,EACVld,KAAI,CAACmW,SAAS,CACf;MACD,IAAMkJ,aAAa,GAAGrf,KAAI,CAACid,IAAI,CAAC+B,OAAO,CAACM,YAAY,CAClDrN,WAAW,EACXR,SAAS,EACTM,aAAa,CACd;MACD/R,KAAI,CAACwd,QAAQ,GAAG6B,aAAa;MAC7BA,aAAa,CAACE,UAAU,EAAE,CAACrP,IAAI,CAAC,UAAC9O,GAAW;QAC1CpB,KAAI,CAACwd,QAAQ,GAAGrW,SAAS;QACzBnH,KAAI,CAACwe,UAAU,GAAGpd,GAAG;QACrBpB,KAAI,CAAC2d,kBAAkB,GAAG,KAAK;QAC/B3d,KAAI,CAAC4d,oBAAoB,EAAE;OAC5B,EAAE5d,KAAI,CAACud,aAAa,CAAC;KACvB,CAAC;GACH;EAEOa,iCAAY,GAApB;IAAA;;IAEE,IAAMhd,GAAG,GAAG,IAAI,CAACod,UAAoB;IACrC,IAAI,CAACW,aAAa,CAAC,UAAC1N,SAAS,EAAEM,aAAa;MAC1C,IAAME,WAAW,GAAG0J,wBAAwB,CAC1C3b,KAAI,CAACid,IAAI,CAAC+B,OAAO,EACjBhf,KAAI,CAACid,IAAI,CAACmC,SAAS,EACnBhe,GAAG,EACHpB,KAAI,CAACkd,KAAK,CACX;MACD,IAAMsC,aAAa,GAAGxf,KAAI,CAACid,IAAI,CAAC+B,OAAO,CAACM,YAAY,CAClDrN,WAAW,EACXR,SAAS,EACTM,aAAa,CACd;MACD/R,KAAI,CAACwd,QAAQ,GAAGgC,aAAa;MAC7BA,aAAa,CAACD,UAAU,EAAE,CAACrP,IAAI,CAAC,gBAAM;QACpCzI,MAAM,GAAGA,MAA+B;QACxCzH,KAAI,CAACwd,QAAQ,GAAGrW,SAAS;QACzBnH,KAAI,CAACue,eAAe,CAAC9W,MAAM,CAAC2T,OAAO,CAAC;QACpCpb,KAAI,CAAC2d,kBAAkB,GAAG,KAAK;QAC/B,IAAIlW,MAAM,CAAC4T,SAAS,EAAE;UACpBrb,KAAI,CAAC2e,oBAAoB,GAAG,IAAI;;QAElC3e,KAAI,CAAC4d,oBAAoB,EAAE;OAC5B,EAAE5d,KAAI,CAACud,aAAa,CAAC;KACvB,CAAC;GACH;EAEOa,oCAAe,GAAvB;IAAA;IACE,IAAMnC,SAAS,GAAGF,2BAA2B,GAAG,IAAI,CAAC0B,gBAAgB;IACrE,IAAMhW,MAAM,GAAG,IAAIqU,qBAAqB,CACtC,IAAI,CAACwC,YAAY,EACjB,IAAI,CAACpB,KAAK,CAAClK,IAAI,EAAE,CAClB;;IAGD,IAAM5R,GAAG,GAAG,IAAI,CAACod,UAAoB;IACrC,IAAI,CAACW,aAAa,CAAC,UAAC1N,SAAS,EAAEM,aAAa;MAC1C,IAAIE,WAAW;MACf,IAAI;QACFA,WAAW,GAAG+J,uBAAuB,CACnChc,KAAI,CAACid,IAAI,CAACmC,SAAS,EACnBpf,KAAI,CAACid,IAAI,CAAC+B,OAAO,EACjB5d,GAAG,EACHpB,KAAI,CAACkd,KAAK,EACVjB,SAAS,EACTjc,KAAI,CAACmd,SAAS,EACd1V,MAAM,EACNzH,KAAI,CAACyf,qBAAqB,EAAE,CAC7B;OACF,CAAC,OAAOzb,CAAC,EAAE;QACVhE,KAAI,CAAC6d,MAAM,GAAG7Z,CAAC;QACfhE,KAAI,CAAC8d,WAAW,qBAAyB;QACzC;;MAEF,IAAM4B,aAAa,GAAG1f,KAAI,CAACid,IAAI,CAAC+B,OAAO,CAACM,YAAY,CAClDrN,WAAW,EACXR,SAAS,EACTM,aAAa,CACd;MACD/R,KAAI,CAACwd,QAAQ,GAAGkC,aAAa;MAC7BA,aAAa,CAACH,UAAU,EAAE,CAACrP,IAAI,CAAC,UAACyP,SAAgC;QAC/D3f,KAAI,CAAC4f,mBAAmB,EAAE;QAC1B5f,KAAI,CAACwd,QAAQ,GAAGrW,SAAS;QACzBnH,KAAI,CAACue,eAAe,CAACoB,SAAS,CAACvE,OAAO,CAAC;QACvC,IAAIuE,SAAS,CAACtE,SAAS,EAAE;UACvBrb,KAAI,CAACmW,SAAS,GAAGwJ,SAAS,CAACpK,QAAQ;UACnCvV,KAAI,CAAC8d,WAAW,yBAA2B;SAC5C,MAAM;UACL9d,KAAI,CAAC4d,oBAAoB,EAAE;;OAE9B,EAAE5d,KAAI,CAACud,aAAa,CAAC;KACvB,CAAC;GACH;EAEOa,wCAAmB,GAA3B;IACE,IAAMyB,WAAW,GAAG9D,2BAA2B,GAAG,IAAI,CAAC0B,gBAAgB;;IAGvE,IAAIoC,WAAW,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE;MAClC,IAAI,CAACpC,gBAAgB,IAAI,CAAC;;GAE7B;EAEOW,mCAAc,GAAtB;IAAA;IACE,IAAI,CAACe,aAAa,CAAC,UAAC1N,SAAS,EAAEM,aAAa;MAC1C,IAAME,WAAW,GAAGuH,aAAW,CAC7BxZ,KAAI,CAACid,IAAI,CAAC+B,OAAO,EACjBhf,KAAI,CAACid,IAAI,CAACmC,SAAS,EACnBpf,KAAI,CAACmd,SAAS,CACf;MACD,IAAM2C,eAAe,GAAG9f,KAAI,CAACid,IAAI,CAAC+B,OAAO,CAACM,YAAY,CACpDrN,WAAW,EACXR,SAAS,EACTM,aAAa,CACd;MACD/R,KAAI,CAACwd,QAAQ,GAAGsC,eAAe;MAC/BA,eAAe,CAACP,UAAU,EAAE,CAACrP,IAAI,CAAC,kBAAQ;QACxClQ,KAAI,CAACwd,QAAQ,GAAGrW,SAAS;QACzBnH,KAAI,CAACmW,SAAS,GAAGZ,QAAQ;QACzBvV,KAAI,CAAC8d,WAAW,yBAA2B;OAC5C,EAAE9d,KAAI,CAAC+d,qBAAqB,CAAC;KAC/B,CAAC;GACH;EAEOK,mCAAc,GAAtB;IAAA;IACE,IAAI,CAACe,aAAa,CAAC,UAAC1N,SAAS,EAAEM,aAAa;MAC1C,IAAME,WAAW,GAAGyI,eAAe,CACjC1a,KAAI,CAACid,IAAI,CAAC+B,OAAO,EACjBhf,KAAI,CAACid,IAAI,CAACmC,SAAS,EACnBpf,KAAI,CAACmd,SAAS,EACdnd,KAAI,CAACkd,KAAK,EACVld,KAAI,CAACmW,SAAS,CACf;MACD,IAAM4J,gBAAgB,GAAG/f,KAAI,CAACid,IAAI,CAAC+B,OAAO,CAACM,YAAY,CACrDrN,WAAW,EACXR,SAAS,EACTM,aAAa,CACd;MACD/R,KAAI,CAACwd,QAAQ,GAAGuC,gBAAgB;MAChCA,gBAAgB,CAACR,UAAU,EAAE,CAACrP,IAAI,CAAC,kBAAQ;QACzClQ,KAAI,CAACwd,QAAQ,GAAGrW,SAAS;QACzBnH,KAAI,CAACmW,SAAS,GAAGZ,QAAQ;QACzBvV,KAAI,CAACue,eAAe,CAACve,KAAI,CAACkd,KAAK,CAAClK,IAAI,EAAE,CAAC;QACvChT,KAAI,CAAC8d,WAAW,yBAA2B;OAC5C,EAAE9d,KAAI,CAACud,aAAa,CAAC;KACvB,CAAC;GACH;EAEOa,oCAAe,GAAvB,UAAwB4B,WAAmB;IACzC,IAAMC,GAAG,GAAG,IAAI,CAAC3B,YAAY;IAC7B,IAAI,CAACA,YAAY,GAAG0B,WAAW;;;;IAK/B,IAAI,IAAI,CAAC1B,YAAY,KAAK2B,GAAG,EAAE;MAC7B,IAAI,CAACC,gBAAgB,EAAE;;GAE1B;EAEO9B,gCAAW,GAAnB,UAAoBnY,KAAwB;IAC1C,IAAI,IAAI,CAACqX,MAAM,KAAKrX,KAAK,EAAE;MACzB;;IAEF,QAAQA,KAAK;MACX;;;;QAIE,IAAI,CAACqX,MAAM,GAAGrX,KAAK;QACnB,IAAI,IAAI,CAACuX,QAAQ,KAAKrW,SAAS,EAAE;UAC/B,IAAI,CAACqW,QAAQ,CAAC2C,MAAM,EAAE;;QAExB;MACF;;;QAGE,IAAI,CAAC7C,MAAM,GAAGrX,KAAK;QACnB,IAAI,IAAI,CAACuX,QAAQ,KAAKrW,SAAS,EAAE;UAC/B,IAAI,CAACqW,QAAQ,CAAC2C,MAAM,EAAE;;QAExB;MACF;;;;QAIE,IAAMC,SAAS,GAAG,IAAI,CAAC9C,MAAM;QAC7B,IAAI,CAACA,MAAM,GAAGrX,KAAK;QACnB,IAAIma,SAAS,EAAE;UACb,IAAI,CAACF,gBAAgB,EAAE;UACvB,IAAI,CAAC/B,MAAM,EAAE;;QAEf;MACF;;;QAGE,IAAI,CAACb,MAAM,GAAGrX,KAAK;QACnB,IAAI,CAACia,gBAAgB,EAAE;QACvB;MACF;;;;QAIE,IAAI,CAACrC,MAAM,GAAG3c,QAAQ,EAAE;QACxB,IAAI,CAACoc,MAAM,GAAGrX,KAAK;QACnB,IAAI,CAACia,gBAAgB,EAAE;QACvB;MACF;;;;;QAKE,IAAI,CAAC5C,MAAM,GAAGrX,KAAK;QACnB,IAAI,CAACia,gBAAgB,EAAE;QACvB;MACF;;;;;QAKE,IAAI,CAAC5C,MAAM,GAAGrX,KAAK;QACnB,IAAI,CAACia,gBAAgB,EAAE;QACvB;IAAM;GAGX;EAEO9B,yCAAoB,GAA5B;IACE,QAAQ,IAAI,CAACd,MAAM;MACjB;QACE,IAAI,CAACQ,WAAW,uBAA0B;QAC1C;MACF;QACE,IAAI,CAACA,WAAW,2BAA4B;QAC5C;MACF;QACE,IAAI,CAACK,MAAM,EAAE;QACb;IAAM;GAKX;EAKDhe,sBAAIie,gCAAQ;;;;SAAZ;MACE,IAAMiC,aAAa,GAAGra,8BAA8B,CAAC,IAAI,CAACsX,MAAM,CAAC;MACjE,OAAO;QACLgD,gBAAgB,EAAE,IAAI,CAAChC,YAAY;QACnCiC,UAAU,EAAE,IAAI,CAACrD,KAAK,CAAClK,IAAI,EAAE;QAC7B/M,KAAK,EAAEoa,aAAa;QACpB9K,QAAQ,EAAE,IAAI,CAACY,SAAU;QACzBqK,IAAI,EAAE,IAAI;QACVxD,GAAG,EAAE,IAAI,CAACC;OACX;KACF;;;;;;;;;;;;;;;;;;;;;EAmBDmB,uBAAE,GAAF,UACEjL,IAAe,EACfsJ,cAEwC,EACxCjS,KAAe,EACfiW,SAAsB;IANxB;IAQE,IAAM5D,QAAQ,GAAG,IAAI6D,QAAQ,CAACjE,cAAc,EAAEjS,KAAK,EAAEiW,SAAS,CAAC;IAC/D,IAAI,CAACE,YAAY,CAAC9D,QAAQ,CAAC;IAC3B,OAAO;MACL7c,KAAI,CAAC4gB,eAAe,CAAC/D,QAAQ,CAAC;KAC/B;GACF;;;;;;;EAQDuB,yBAAI,GAAJ,UACEyC,WAAoE,EACpEC,UAAqE;;;IAIrE,OAAO,IAAI,CAAC9C,QAAQ,CAAC9N,IAAI,CACvB2Q,WAA4D,EAC5DC,UAAyD,CAC1D;GACF;;;;EAKD1C,0BAAK,GAAL,UACE0C,UAAwD;IAExD,OAAO,IAAI,CAAC5Q,IAAI,CAAC,IAAI,EAAE4Q,UAAU,CAAC;GACnC;;;;EAKO1C,iCAAY,GAApB,UAAqBvB,QAAsC;IACzD,IAAI,CAACkE,UAAU,CAACvd,IAAI,CAACqZ,QAAQ,CAAC;IAC9B,IAAI,CAACmE,eAAe,CAACnE,QAAQ,CAAC;GAC/B;;;;EAKOuB,oCAAe,GAAvB,UAAwBvB,QAAsC;IAC5D,IAAMzZ,CAAC,GAAG,IAAI,CAAC2d,UAAU,CAAC7c,OAAO,CAAC2Y,QAAQ,CAAC;IAC3C,IAAIzZ,CAAC,KAAK,CAAC,CAAC,EAAE;MACZ,IAAI,CAAC2d,UAAU,CAACE,MAAM,CAAC7d,CAAC,EAAE,CAAC,CAAC;;GAE/B;EAEOgb,qCAAgB,GAAxB;IAAA;IACE,IAAI,CAAC8C,cAAc,EAAE;IACrB,IAAMC,SAAS,GAAG,IAAI,CAACJ,UAAU,CAAC/X,KAAK,EAAE;IACzCmY,SAAS,CAAC/M,OAAO,CAAC,kBAAQ;MACxBpU,KAAI,CAACghB,eAAe,CAACnE,QAAQ,CAAC;KAC/B,CAAC;GACH;EAEOuB,mCAAc,GAAtB;IACE,IAAI,IAAI,CAACH,QAAQ,KAAK9W,SAAS,EAAE;MAC/B,IAAIia,SAAS,GAAG,IAAI;MACpB,QAAQpb,8BAA8B,CAAC,IAAI,CAACsX,MAAM,CAAC;QACjD,KAAK5X,SAAS,CAACG,OAAO;UACpBwb,KAAQ,CAAC,IAAI,CAACpD,QAAQ,CAACqD,IAAI,CAAC,IAAI,EAAE,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAE;UACnD;QACF,KAAK7b,SAAS,CAACI,QAAQ;QACvB,KAAKJ,SAAS,CAACK,KAAK;UAClB,IAAMyb,MAAM,GAAG,IAAI,CAACtD,OAA6C;UACjEmD,KAAQ,CAACG,MAAM,CAACF,IAAI,CAAC,IAAI,EAAE,IAAI,CAACzD,MAA8B,CAAC,CAAC,EAAE;UAClE;QACF;UACEuD,SAAS,GAAG,KAAK;UACjB;MAAM;MAEV,IAAIA,SAAS,EAAE;QACb,IAAI,CAACnD,QAAQ,GAAG9W,SAAS;QACzB,IAAI,CAAC+W,OAAO,GAAG/W,SAAS;;;GAG7B;EAEOiX,oCAAe,GAAvB,UAAwBvB,QAAsC;IAC5D,IAAMwD,aAAa,GAAGra,8BAA8B,CAAC,IAAI,CAACsX,MAAM,CAAC;IACjE,QAAQ+C,aAAa;MACnB,KAAK3a,SAAS,CAACC,OAAO;MACtB,KAAKD,SAAS,CAACE,MAAM;QACnB,IAAIiX,QAAQ,CAACD,IAAI,EAAE;UACjByE,KAAQ,CAACxE,QAAQ,CAACD,IAAI,CAAC0E,IAAI,CAACzE,QAAQ,EAAE,IAAI,CAAC0E,QAAQ,CAAC,CAAC,EAAE;;QAEzD;MACF,KAAK7b,SAAS,CAACG,OAAO;QACpB,IAAIgX,QAAQ,CAACH,QAAQ,EAAE;UACrB2E,KAAQ,CAACxE,QAAQ,CAACH,QAAQ,CAAC4E,IAAI,CAACzE,QAAQ,CAAC,CAAC,EAAE;;QAE9C;MACF,KAAKnX,SAAS,CAACI,QAAQ;MACvB,KAAKJ,SAAS,CAACK,KAAK;QAClB,IAAI8W,QAAQ,CAACrS,KAAK,EAAE;UAClB6W,KAAQ,CACNxE,QAAQ,CAACrS,KAAK,CAAC8W,IAAI,CAACzE,QAAQ,EAAE,IAAI,CAACgB,MAA8B,CAAC,CACnE,EAAE;;QAEL;MACF;;QAEE,IAAIhB,QAAQ,CAACrS,KAAK,EAAE;UAClB6W,KAAQ,CACNxE,QAAQ,CAACrS,KAAK,CAAC8W,IAAI,CAACzE,QAAQ,EAAE,IAAI,CAACgB,MAA8B,CAAC,CACnE,EAAE;;IACJ;GAEN;;;;;EAMDO,2BAAM,GAAN;IACE,IAAM3a,KAAK,GACT,IAAI,CAAC6Z,MAAM,8BACX,IAAI,CAACA,MAAM;IACb,IAAI7Z,KAAK,EAAE;MACT,IAAI,CAACqa,WAAW,yBAA2B;;;IAE7C,OAAOra,KAAK;GACb;;;;;EAMD2a,0BAAK,GAAL;IACE,IAAM3a,KAAK,GAAG,IAAI,CAAC6Z,MAAM;IACzB,IAAI7Z,KAAK,EAAE;MACT,IAAI,CAACqa,WAAW,yBAA2B;;;IAE7C,OAAOra,KAAK;GACb;;;;;;EAOD2a,2BAAM,GAAN;IACE,IAAM3a,KAAK,GACT,IAAI,CAAC6Z,MAAM,gCACX,IAAI,CAACA,MAAM;IACb,IAAI7Z,KAAK,EAAE;MACT,IAAI,CAACqa,WAAW,6BAA6B;;;IAE/C,OAAOra,KAAK;GACb;EACH,iBAAC;AAAD,CAAC;;ACpoBD;;;;;;;;;;;;;;;;AA2CA;;;;;;;;;;;;AAYA;EAGE,mBACUge,QAA6B,EACrC9Y,QAA2B;IADnB,aAAQ,GAAR8Y,QAAQ;IAGhB,IAAI9Y,QAAQ,YAAYP,QAAQ,EAAE;MAChC,IAAI,CAACgX,SAAS,GAAGzW,QAAQ;KAC1B,MAAM;MACL,IAAI,CAACyW,SAAS,GAAGhX,QAAQ,CAACM,WAAW,CAACC,QAAQ,EAAE8Y,QAAQ,CAACjZ,IAAI,CAAC;;;;;;;;EASlEkZ,4BAAQ,GAAR;IACE,OAAO,OAAO,GAAG,IAAI,CAACtC,SAAS,CAACve,MAAM,GAAG,GAAG,GAAG,IAAI,CAACue,SAAS,CAACze,IAAI;GACnE;EAES+gB,2BAAO,GAAjB,UACEjL,OAA4B,EAC5B9N,QAAkB;IAElB,OAAO,IAAI+Y,SAAS,CAACjL,OAAO,EAAE9N,QAAQ,CAAC;GACxC;EAKDxI,sBAAIuhB,2BAAI;;;;SAAR;MACE,IAAM/Y,QAAQ,GAAG,IAAIP,QAAQ,CAAC,IAAI,CAACgX,SAAS,CAACve,MAAM,EAAE,EAAE,CAAC;MACxD,OAAO,IAAI,CAAC8gB,OAAO,CAAC,IAAI,CAACF,QAAQ,EAAE9Y,QAAQ,CAAC;KAC7C;;;;EAKDxI,sBAAIuhB,6BAAM;;;;SAAV;MACE,OAAO,IAAI,CAACtC,SAAS,CAACve,MAAM;KAC7B;;;;EAKDV,sBAAIuhB,+BAAQ;;;;SAAZ;MACE,OAAO,IAAI,CAACtC,SAAS,CAACze,IAAI;KAC3B;;;;EAMDR,sBAAIuhB,2BAAI;;;;;SAAR;MACE,OAAOrM,aAAa,CAAC,IAAI,CAAC+J,SAAS,CAACze,IAAI,CAAC;KAC1C;;;;EAKDR,sBAAIuhB,8BAAO;;;;SAAX;MACE,OAAO,IAAI,CAACD,QAAQ;KACrB;;;;EAMDthB,sBAAIuhB,6BAAM;;;;;SAAV;MACE,IAAM5M,OAAO,GAAGH,MAAM,CAAC,IAAI,CAACyK,SAAS,CAACze,IAAI,CAAC;MAC3C,IAAImU,OAAO,KAAK,IAAI,EAAE;QACpB,OAAO,IAAI;;MAEb,IAAMnM,QAAQ,GAAG,IAAIP,QAAQ,CAAC,IAAI,CAACgX,SAAS,CAACve,MAAM,EAAEiU,OAAO,CAAC;MAC7D,OAAO,IAAI4M,SAAS,CAAC,IAAI,CAACD,QAAQ,EAAE9Y,QAAQ,CAAC;KAC9C;;;;;;;EAKD+Y,gCAAY,GAAZ,UAAa7f,IAAY;IACvB,IAAI,IAAI,CAACud,SAAS,CAACze,IAAI,KAAK,EAAE,EAAE;MAC9B,MAAMiB,oBAAoB,CAACC,IAAI,CAAC;;GAEnC;EACH,gBAAC;AAAD,CAAC;AAmCD;;;;;;;;;SASgB+f,sBAAoB,CAClC5E,GAAc,EACdva,IAAqC,EACrC8S,QAAmB;EAEnByH,GAAG,CAAC6E,YAAY,CAAC,sBAAsB,CAAC;EACxC,OAAO,IAAIzD,UAAU,CAACpB,GAAG,EAAE,IAAIvJ,OAAO,CAAChR,IAAI,CAAC,EAAE8S,QAAQ,CAAC;AACzD;AA2BA;;;;;;;;;;;;;;;;;;;SAmBgBuM,SAAO,CAAC9E,GAAc;EACpC,IAAM+E,WAAW,GAAe;IAC9B7J,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE;GACR;EACD,OAAO6J,aAAa,CAAChF,GAAG,EAAE+E,WAAW,CAAC,CAAC7R,IAAI,CAAC;IAAM,kBAAW;EAAA,EAAC;AAChE;AAEA;;;;;;AAMA,SAAe8R,aAAa,CAC1BhF,GAAc,EACd+E,WAAuB,EACvBjI,SAAkB;;;;;;;UAEZmI,GAAG,GAAgB;;YAEvBnI,SAAS;WACV;UACgB,qBAAMF,MAAI,CAACoD,GAAG,EAAEiF,GAAG,CAAC;;UAA/BC,QAAQ,GAAG1J,SAAoB;UACrC,iBAAW,CAACN,QAAQ,EAAC1U,IAAI,WAAI0e,QAAQ,CAAChK,QAAQ;UAC9C,iBAAW,CAACC,KAAK,EAAC3U,IAAI,WAAI0e,QAAQ,CAAC/J,KAAK;gBACpC+J,QAAQ,CAAC9J,aAAa,IAAI,IAAI,GAA9B;UACF,qBAAM4J,aAAa,CAAChF,GAAG,EAAE+E,WAAW,EAAEG,QAAQ,CAAC9J,aAAa,CAAC;;UAA7DI,SAA6D;;;;;;;;AAIjE;;;;;;;;;;;;;;;;;;;;;;SAsBsBoB,MAAI,CACxBoD,GAAc,EACdmF,OAA4B;;;;;;UAE5B,IAAIA,OAAO,IAAI,IAAI,EAAE;YACnB,IAAI,OAAOA,OAAO,CAACpI,UAAU,KAAK,QAAQ,EAAE;cAC1C3M,cAAc,CACZ,oBAAoB,iBACJ,CAAC,iBACD,IAAI,EACpB+U,OAAO,CAACpI,UAAU,CACnB;;;UAGCqI,EAAE,GAAGD,OAAO,IAAI,EAAE;UAClBlQ,WAAW,GAAGoQ,MAAY,CAC9BrF,GAAG,CAACgC,OAAO,EACXhC,GAAG,CAACoC,SAAS,iBACG,GAAG,EACnBgD,EAAE,CAACtI,SAAS,EACZsI,EAAE,CAACrI,UAAU,CACd;UACO,qBAAMiD,GAAG,CAACgC,OAAO,CAACsD,qBAAqB,CAACrQ,WAAW,CAAC;;UAA5D,sBAAQoG,SAAoD,CAAEkH,UAAU,EAAE;MAAC;;;;AAG7E;;;;;;;SAOsB/F,aAAW,CAACwD,GAAc;;;;;;UAC9CA,GAAG,CAAC6E,YAAY,CAAC,aAAa,CAAC;UACzB5P,WAAW,GAAGsQ,aAAmB,CACrCvF,GAAG,CAACgC,OAAO,EACXhC,GAAG,CAACoC,SAAS,EACbrJ,WAAW,EAAE,CACd;UACO,qBAAMiH,GAAG,CAACgC,OAAO,CAACsD,qBAAqB,CAACrQ,WAAW,CAAC;;UAA5D,sBAAQoG,SAAoD,CAAEkH,UAAU,EAAE;MAAC;;;;AAG7E;;;;;;;;;;;SAWsBpF,gBAAc,CAClC6C,GAAc,EACdzH,QAA2B;;;;;;UAE3ByH,GAAG,CAAC6E,YAAY,CAAC,gBAAgB,CAAC;UAC5B5P,WAAW,GAAGuQ,gBAAsB,CACxCxF,GAAG,CAACgC,OAAO,EACXhC,GAAG,CAACoC,SAAS,EACb7J,QAAQ,EACRQ,WAAW,EAAE,CACd;UACO,qBAAMiH,GAAG,CAACgC,OAAO,CAACsD,qBAAqB,CAACrQ,WAAW,CAAC;;UAA5D,sBAAQoG,SAAoD,CAAEkH,UAAU,EAAE;MAAC;;;;AAG7E;;;;;;SAMsBkD,gBAAc,CAACzF,GAAc;;;;;;UACjDA,GAAG,CAAC6E,YAAY,CAAC,gBAAgB,CAAC;UAC5B5P,WAAW,GAAGyQ,cAAsB,CACxC1F,GAAG,CAACgC,OAAO,EACXhC,GAAG,CAACoC,SAAS,EACbrJ,WAAW,EAAE,CACd;UACO,qBAAMiH,GAAG,CAACgC,OAAO,CAACsD,qBAAqB,CAACrQ,WAAW,CAAC;;UAA5D,sBAAQoG,SAAoD,CACzDkH,UAAU,EAAE,CACZrP,IAAI,CAAC,aAAG;YACP,IAAI9O,GAAG,KAAK,IAAI,EAAE;cAChB,MAAMK,aAAa,EAAE;;YAEvB,OAAOL,GAAG;WACX,CAAC;MAAC;;;;AAGP;;;;;;SAMsBgZ,cAAY,CAAC4C,GAAc;;;;;;UAC/CA,GAAG,CAAC6E,YAAY,CAAC,cAAc,CAAC;UAC1B5P,WAAW,GAAG0Q,cAAoB,CAAC3F,GAAG,CAACgC,OAAO,EAAEhC,GAAG,CAACoC,SAAS,CAAC;UAC5D,qBAAMpC,GAAG,CAACgC,OAAO,CAACsD,qBAAqB,CAACrQ,WAAW,CAAC;;UAA5D,sBAAQoG,SAAoD,CAAEkH,UAAU,EAAE;MAAC;;;;AAG7E;;;;;;;;;;SAUgBqD,WAAS,CAAC5F,GAAc,EAAEhI,SAAiB;EACzD,IAAMF,OAAO,GAAGC,KAAK,CAACiI,GAAG,CAACoC,SAAS,CAACze,IAAI,EAAEqU,SAAS,CAAC;EACpD,IAAMrM,QAAQ,GAAG,IAAIP,QAAQ,CAAC4U,GAAG,CAACoC,SAAS,CAACve,MAAM,EAAEiU,OAAO,CAAC;EAC5D,OAAO,IAAI4M,SAAS,CAAC1E,GAAG,CAACgC,OAAO,EAAErW,QAAQ,CAAC;AAC7C;;ACzZA;;;;;;;;;;;;;;;;SA2CgBka,KAAK,CAACliB,IAAa;EACjC,OAAO,iBAAiB,CAACmiB,IAAI,CAACniB,IAAc,CAAC;AAC/C;AAEA;;;AAGA,SAASoiB,UAAU,CAACtM,OAA4B,EAAErV,GAAW;EAC3D,OAAO,IAAIsgB,SAAS,CAACjL,OAAO,EAAErV,GAAG,CAAC;AACpC;AAEA;;;;AAIA,SAAS4hB,WAAW,CAClBhG,GAAoC,EACpCrc,IAAa;EAEb,IAAIqc,GAAG,YAAYiG,mBAAmB,EAAE;IACtC,IAAMxM,OAAO,GAAGuG,GAAG;IACnB,IAAIvG,OAAO,CAACyM,OAAO,IAAI,IAAI,EAAE;MAC3B,MAAM5hB,eAAe,EAAE;;IAEzB,IAAMiX,SAAS,GAAG,IAAImJ,SAAS,CAACjL,OAAO,EAAEA,OAAO,CAACyM,OAAQ,CAAC;IAC1D,IAAIviB,IAAI,IAAI,IAAI,EAAE;MAChB,OAAOqiB,WAAW,CAACzK,SAAS,EAAE5X,IAAI,CAAC;KACpC,MAAM;MACL,OAAO4X,SAAS;;GAEnB,MAAM;;IAEL,IAAI5X,IAAI,KAAKwG,SAAS,EAAE;MACtB,OAAOyb,WAAS,CAAC5F,GAAG,EAAErc,IAAI,CAAC;KAC5B,MAAM;MACL,OAAOqc,GAAG;;;AAGhB;SAqBgBA,KAAG,CACjBmG,YAA6C,EAC7CC,SAAkB;EAElB,IAAIA,SAAS,IAAIP,KAAK,CAACO,SAAS,CAAC,EAAE;IACjC,IAAID,YAAY,YAAYF,mBAAmB,EAAE;MAC/C,OAAOF,UAAU,CAACI,YAAY,EAAEC,SAAS,CAAC;KAC3C,MAAM;MACL,MAAM1hB,eAAe,CACnB,0EAA0E,CAC3E;;GAEJ,MAAM;IACL,OAAOshB,WAAW,CAACG,YAAY,EAAEC,SAAS,CAAC;;AAE/C;AAEA,SAASC,aAAa,CACpB7a,IAAY,EACZ8a,MAAwB;EAExB,IAAM/a,YAAY,GAAG+a,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAG9jB,yBAAyB,CAAC;EACxD,IAAI+I,YAAY,IAAI,IAAI,EAAE;IACxB,OAAO,IAAI;;EAEb,OAAOH,QAAQ,CAACmb,kBAAkB,CAAChb,YAAY,EAAEC,IAAI,CAAC;AACxD;SAEgBgb,wBAAsB,CACpCxE,OAA4B,EAC5BxW,IAAY,EACZib,IAAY,EACZtB,OAEM;EAFN;IAAAA,YAEM;EAAA;EAENnD,OAAO,CAACxW,IAAI,GAAG,YAAUA,IAAI,SAAIib,IAAM;EAC/B,iBAAa,GAAKtB,OAAO,cAAZ;EACrB,IAAIuB,aAAa,EAAE;IACjB1E,OAAO,CAAC2E,kBAAkB,GACxB,OAAOD,aAAa,KAAK,QAAQ,GAC7BA,aAAa,GACbE,mBAAmB,CAACF,aAAa,EAAE1E,OAAO,CAAC6E,GAAG,CAAC1B,OAAO,CAAC2B,SAAS,CAAC;;AAE3E;AAEA;;;;;AAKA;EAgBE;;;;EAIWD,GAAgB,EAChBE,aAAiD;;;;EAIjDC,iBAA0D;;;;EAI1DC,KAAqB,EACrBC,IAAa,EACbC,gBAAyB;IAXzB,QAAG,GAAHN,GAAG;IACH,kBAAa,GAAbE,aAAa;IAIb,sBAAiB,GAAjBC,iBAAiB;IAIjB,UAAK,GAALC,KAAK;IACL,SAAI,GAAJC,IAAI;IACJ,qBAAgB,GAAhBC,gBAAgB;IA9B3B,YAAO,GAAoB,IAAI;;;;;;;IAOvB,UAAK,GAAW5kB,YAAY;IACjB,WAAM,GAAkB,IAAI;IAEvC,aAAQ,GAAY,KAAK;IAsB/B,IAAI,CAAC6kB,sBAAsB,GAAG3kB,gCAAgC;IAC9D,IAAI,CAAC4kB,mBAAmB,GAAG3kB,6BAA6B;IACxD,IAAI,CAAC4kB,SAAS,GAAG,IAAIC,GAAG,EAAE;IAC1B,IAAIL,IAAI,IAAI,IAAI,EAAE;MAChB,IAAI,CAAChB,OAAO,GAAG9a,QAAQ,CAACmb,kBAAkB,CAACW,IAAI,EAAE,IAAI,CAACM,KAAK,CAAC;KAC7D,MAAM;MACL,IAAI,CAACtB,OAAO,GAAGG,aAAa,CAAC,IAAI,CAACmB,KAAK,EAAE,IAAI,CAACX,GAAG,CAAC1B,OAAO,CAAC;;;EAI9DhiB,sBAAI8iB,qCAAI;SAAR;MACE,OAAO,IAAI,CAACuB,KAAK;KAClB;;;;;;SAOD,UAAShc,IAAY;MACnB,IAAI,CAACgc,KAAK,GAAGhc,IAAI;MACjB,IAAI,IAAI,CAAC0b,IAAI,IAAI,IAAI,EAAE;QACrB,IAAI,CAAChB,OAAO,GAAG9a,QAAQ,CAACmb,kBAAkB,CAAC,IAAI,CAACW,IAAI,EAAE1b,IAAI,CAAC;OAC5D,MAAM;QACL,IAAI,CAAC0a,OAAO,GAAGG,aAAa,CAAC7a,IAAI,EAAE,IAAI,CAACqb,GAAG,CAAC1B,OAAO,CAAC;;KAEvD;;;;EAKDhiB,sBAAI8iB,mDAAkB;;;;SAAtB;MACE,OAAO,IAAI,CAACoB,mBAAmB;KAChC;SAED,UAAuBI,IAAY;MACjCrX,cAAc,CACZ,MAAM,gBACS,CAAC,iBACAkJ,MAAM,CAACoO,iBAAiB,EACxCD,IAAI,CACL;MACD,IAAI,CAACJ,mBAAmB,GAAGI,IAAI;KAChC;;;;EAMDtkB,sBAAI8iB,sDAAqB;;;;;SAAzB;MACE,OAAO,IAAI,CAACmB,sBAAsB;KACnC;SAED,UAA0BK,IAAY;MACpCrX,cAAc,CACZ,MAAM,gBACS,CAAC,iBACAkJ,MAAM,CAACoO,iBAAiB,EACxCD,IAAI,CACL;MACD,IAAI,CAACL,sBAAsB,GAAGK,IAAI;KACnC;;;;EAEKxB,2CAAa,GAAnB;;;;;;YACE,IAAI,IAAI,CAACU,kBAAkB,EAAE;cAC3B,sBAAO,IAAI,CAACA,kBAAkB;;YAE1BgB,IAAI,GAAG,IAAI,CAACZ,aAAa,CAACa,YAAY,CAAC;cAAEC,QAAQ,EAAE;YAAI,CAAE,CAAC;iBAC5DF,IAAI,EAAJ;YACgB,qBAAMA,IAAI,CAACG,QAAQ,EAAE;;YAAjCC,SAAS,GAAG1M,SAAqB;YACvC,IAAI0M,SAAS,KAAK,IAAI,EAAE;cACtB,sBAAOA,SAAS,CAACC,WAAW;;;;YAGhC,sBAAO,IAAI;QAAC;;;GACb;EAEK/B,+CAAiB,GAAvB;;;;;;YACQgC,QAAQ,GAAG,IAAI,CAACjB,iBAAiB,CAACY,YAAY,CAAC;cAAEC,QAAQ,EAAE;YAAI,CAAE,CAAC;iBACpEI,QAAQ,EAAR;YACa,qBAAMA,QAAQ,CAACH,QAAQ,EAAE;;YAAlCjU,MAAM,GAAGwH,SAAyB;;;;;YAKxC,sBAAOxH,MAAM,CAAC2G,KAAK;;YAErB,sBAAO,IAAI;QAAC;;;GACb;;;;EAKDyL,qCAAO,GAAP;IACE,IAAI,CAAC,IAAI,CAACiC,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAI;MACpB,IAAI,CAACZ,SAAS,CAAClQ,OAAO,CAAC,iBAAO;QAAI,cAAO,CAAC+L,MAAM,EAAE;MAAA,EAAC;MACnD,IAAI,CAACmE,SAAS,CAACa,KAAK,EAAE;;IAExB,OAAO3e,OAAO,CAACG,OAAO,EAAE;GACzB;;;;;EAMDsc,mDAAqB,GAArB,UAAsBna,GAAa;IACjC,OAAO,IAAI4Y,SAAS,CAAC,IAAI,EAAE5Y,GAAG,CAAC;GAChC;;;;;EAMDma,0CAAY,GAAZ,UACEhR,WAA2B,EAC3BR,SAAwB,EACxBM,aAA4B;IAH9B;IAKE,IAAI,CAAC,IAAI,CAACmT,QAAQ,EAAE;MAClB,IAAME,SAAO,GAAGpT,WAAW,CACzBC,WAAW,EACX,IAAI,CAACoT,MAAM,EACX5T,SAAS,EACTM,aAAa,EACb,IAAI,CAACkS,KAAK,EACV,IAAI,CAACE,gBAAgB,CACtB;MACD,IAAI,CAACG,SAAS,CAACgB,GAAG,CAACF,SAAO,CAAC;;MAE3BA,SAAO,CAAC7F,UAAU,EAAE,CAACrP,IAAI,CACvB;QAAM,YAAI,CAACoU,SAAS,CAACiB,MAAM,CAACH,SAAO,CAAC;MAAA,GACpC;QAAM,YAAI,CAACd,SAAS,CAACiB,MAAM,CAACH,SAAO,CAAC;MAAA,EACrC;MACD,OAAOA,SAAO;KACf,MAAM;MACL,OAAO,IAAIza,WAAW,CAAChJ,UAAU,EAAE,CAAC;;GAEvC;EAEKshB,mDAAqB,GAA3B,UACEhR,WAA2B;;;;;;YAEQ,qBAAMzL,OAAO,CAACuY,GAAG,CAAC,CACnD,IAAI,CAACE,aAAa,EAAE,EACpB,IAAI,CAACC,iBAAiB,EAAE,CACzB,CAAC;;YAHI7G,KAA6BI,SAGjC,EAHKhH,SAAS,UAAEM,aAAa;YAK/B,sBAAO,IAAI,CAACuN,YAAY,CAACrN,WAAW,EAAER,SAAS,EAAEM,aAAa,CAAC;QAAC;;;GACjE;EACH,0BAAC;AAAD,CAAC;;AChVD;;;;;;;;;;;;;;;;AA+GA;;;;;;;;;SASgB6P,oBAAoB,CAClC5E,GAAqB,EACrBva,IAAqC,EACrC8S,QAAyB;EAEzByH,GAAG,GAAGwI,kBAAkB,CAACxI,GAAG,CAAC;EAC7B,OAAOyI,sBAA4B,CACjCzI,GAAgB,EAChBva,IAAI,EACJ8S,QAA4B,CACf;AACjB;AAEA;;;;;;;SAOgBiE,WAAW,CAACwD,GAAqB;EAC/CA,GAAG,GAAGwI,kBAAkB,CAACxI,GAAG,CAAC;EAC7B,OAAO0I,aAAmB,CAAC1I,GAAgB,CAA0B;AACvE;AAEA;;;;;;;;;SASgB7C,cAAc,CAC5B6C,GAAqB,EACrBzH,QAA0B;EAE1ByH,GAAG,GAAGwI,kBAAkB,CAACxI,GAAG,CAAC;EAC7B,OAAO2I,gBAAsB,CAC3B3I,GAAgB,EAChBzH,QAAqC,CACb;AAC5B;AAEA;;;;;;;;;;;;;;;;;;;;;;SAsBgBqE,IAAI,CAClBoD,GAAqB,EACrBmF,OAAqB;EAErBnF,GAAG,GAAGwI,kBAAkB,CAACxI,GAAG,CAAC;EAC7B,OAAO4I,MAAY,CAAC5I,GAAgB,EAAEmF,OAAO,CAAC;AAChD;AAEA;;;;;;;;;;;;;;;;;;;SAmBgBL,OAAO,CAAC9E,GAAqB;EAC3CA,GAAG,GAAGwI,kBAAkB,CAACxI,GAAG,CAAC;EAC7B,OAAO6I,SAAe,CAAC7I,GAAgB,CAAC;AAC1C;AAEA;;;;;;;SAOgByF,cAAc,CAACzF,GAAqB;EAClDA,GAAG,GAAGwI,kBAAkB,CAACxI,GAAG,CAAC;EAC7B,OAAO8I,gBAAsB,CAAC9I,GAAgB,CAAC;AACjD;AAEA;;;;;;SAMgB5C,YAAY,CAAC4C,GAAqB;EAChDA,GAAG,GAAGwI,kBAAkB,CAACxI,GAAG,CAAC;EAC7B,OAAO+I,cAAoB,CAAC/I,GAAgB,CAAC;AAC/C;SAqBgBA,GAAG,CACjBmG,YAAgD,EAChDC,SAAkB;EAElBD,YAAY,GAAGqC,kBAAkB,CAACrC,YAAY,CAAC;EAC/C,OAAO6C,KAAW,CAChB7C,YAA+C,EAC/CC,SAAS,CACV;AACH;AAEA;;;SAGgBR,SAAS,CAAC5F,GAAqB,EAAEhI,SAAiB;EAChE,OAAOiR,WAAiB,CAACjJ,GAAgB,EAAEhI,SAAS,CAAC;AACvD;AA2BA;;;;;;;;;SASgBwO,sBAAsB,CACpCxE,OAAwB,EACxBxW,IAAY,EACZib,IAAY,EACZtB,OAEM;EAFN;IAAAA,YAEM;EAAA;EAEN+D,wBAAuB,CAAClH,OAA8B,EAAExW,IAAI,EAAEib,IAAI,EAAEtB,OAAO,CAAC;AAC9E;;AClUA;;;;;;;;;;;;;;;;AAuBA;EAEE,kCACWgE,SAA6B,EAC7B3F,IAAsB,EACtBxD,GAAoB;IAFpB,cAAS,GAATmJ,SAAS;IACT,SAAI,GAAJ3F,IAAI;IACJ,QAAG,GAAHxD,GAAG;;EAGd7c,sBAAIimB,sDAAgB;SAApB;MACE,OAAO,IAAI,CAACD,SAAS,CAAC7F,gBAAgB;KACvC;;;;EACDngB,sBAAIimB,8CAAQ;SAAZ;MACE,OAAO,IAAI,CAACD,SAAS,CAAC5Q,QAA8B;KACrD;;;;EACDpV,sBAAIimB,2CAAK;SAAT;MACE,OAAO,IAAI,CAACD,SAAS,CAAClgB,KAAK;KAC5B;;;;EACD9F,sBAAIimB,gDAAU;SAAd;MACE,OAAO,IAAI,CAACD,SAAS,CAAC5F,UAAU;KACjC;;;;EACH,+BAAC;AAAD,CAAC;;AC3CD;;;;;;;;;;;;;;;;AA6BA;EACE,0BACW4F,SAAqB,EACblJ,IAAqB;IAD7B,cAAS,GAATkJ,SAAS;IACD,SAAI,GAAJlJ,IAAI;IAWvB,WAAM,GAAG,IAAI,CAACkJ,SAAS,CAAChG,MAAM,CAACmB,IAAI,CAAC,IAAI,CAAC6E,SAAS,CAAC;IACnD,UAAK,GAAG,IAAI,CAACA,SAAS,CAACE,KAAK,CAAC/E,IAAI,CAAC,IAAI,CAAC6E,SAAS,CAAC;IACjD,UAAK,GAAG,IAAI,CAACA,SAAS,CAACG,KAAK,CAAChF,IAAI,CAAC,IAAI,CAAC6E,SAAS,CAAC;IACjD,WAAM,GAAG,IAAI,CAACA,SAAS,CAACI,MAAM,CAACjF,IAAI,CAAC,IAAI,CAAC6E,SAAS,CAAC;;EAXnDhmB,sBAAIqmB,sCAAQ;SAAZ;MACE,OAAO,IAAIJ,wBAAwB,CACjC,IAAI,CAACD,SAAS,CAAC5E,QAAQ,EACvB,IAAI,EACJ,IAAI,CAACtE,IAAI,CACV;KACF;;;;EAODuJ,+BAAI,GAAJ,UACE3F,WAA+D,EAC/DC,UAA0D;IAF5D;IAIE,OAAO,IAAI,CAACqF,SAAS,CAACjW,IAAI,CAAC,kBAAQ;MACjC,IAAI2Q,WAAW,EAAE;QACf,OAAOA,WAAW,CAChB,IAAIuF,wBAAwB,CAAC7E,QAAQ,EAAEvhB,KAAI,EAAEA,KAAI,CAACid,IAAI,CAAC,CACxD;;KAEJ,EAAE6D,UAAU,CAAC;GACf;EAED0F,6BAAE,GAAF,UACErT,IAAe,EACfsJ,cAG8C,EAC9CjS,KAAoD,EACpDiW,SAA6B;IAP/B;IASE,IAAIgG,qBAAqB,GAGkBtf,SAAS;IACpD,IAAI,CAAC,CAACsV,cAAc,EAAE;MACpB,IAAI,OAAOA,cAAc,KAAK,UAAU,EAAE;QACxCgK,qBAAqB,GAAG,UAACC,YAAgC;UACvD,qBAAc,CACZ,IAAIN,wBAAwB,CAACM,YAAY,EAAE1mB,KAAI,EAAEA,KAAI,CAACid,IAAI,CAAC,CAC5D;SAAA;OACJ,MAAM;QACLwJ,qBAAqB,GAAG;UACtB7J,IAAI,EAAE,CAAC,CAACH,cAAc,CAACG,IAAI,GACvB,UAAC8J,YAAgC;YAC/B,qBAAc,CAAC9J,IAAK,CAClB,IAAIwJ,wBAAwB,CAACM,YAAY,EAAE1mB,KAAI,EAAEA,KAAI,CAACid,IAAI,CAAC,CAC5D;WAAA,GACH9V,SAAS;UACbuV,QAAQ,EAAED,cAAc,CAACC,QAAQ,IAAIvV,SAAS;UAC9CqD,KAAK,EAAEiS,cAAc,CAACjS,KAAK,IAAIrD;SAChC;;;IAGL,OAAO,IAAI,CAACgf,SAAS,CAACQ,EAAE,CACtBxT,IAAI,EACJsT,qBAAqB,EACrBjc,KAAK,IAAIrD,SAAS,EAClBsZ,SAAS,IAAItZ,SAAS,CACvB;GACF;EACH,uBAAC;AAAD,CAAC;AC9ED;EACE,0BACWgf,SAAqB,EACb1E,QAA8B;IADtC,cAAS,GAAT0E,SAAS;IACD,aAAQ,GAAR1E,QAAQ;;EAG3BthB,sBAAIymB,sCAAQ;SAAZ;MAAA;MACE,OAAO,IAAI,CAACT,SAAS,CAACjO,QAAQ,CAAClE,GAAG,CAChC,aAAG;QAAI,WAAI6S,eAAe,CAAC7J,GAAG,EAAEhd,KAAI,CAACyhB,QAAQ,CAAC;MAAA,EAC/C;KACF;;;;EACDthB,sBAAIymB,mCAAK;SAAT;MAAA;MACE,OAAO,IAAI,CAACT,SAAS,CAAChO,KAAK,CAACnE,GAAG,CAC7B,aAAG;QAAI,WAAI6S,eAAe,CAAC7J,GAAG,EAAEhd,KAAI,CAACyhB,QAAQ,CAAC;MAAA,EAC/C;KACF;;;;EACDthB,sBAAIymB,2CAAa;SAAjB;MACE,OAAO,IAAI,CAACT,SAAS,CAAC/N,aAAa,IAAI,IAAI;KAC5C;;;;EACH,uBAAC;AAAD,CAAC;;ACzCD;;;;;;;;;;;;;;;;AA4CA;EAGE,yBACW+N,SAA2B,EAC7BnH,OAA6B;IAD3B,cAAS,GAATmH,SAAS;IACX,YAAO,GAAPnH,OAAO;;EAGhB7e,sBAAI0mB,iCAAI;SAAR;MACE,OAAO,IAAI,CAACV,SAAS,CAACtkB,IAAI;KAC3B;;;;EAED1B,sBAAI0mB,mCAAM;SAAV;MACE,OAAO,IAAI,CAACV,SAAS,CAACtlB,MAAM;KAC7B;;;;EAEDV,sBAAI0mB,qCAAQ;SAAZ;MACE,OAAO,IAAI,CAACV,SAAS,CAACrQ,QAAQ;KAC/B;;;;EAED+Q,kCAAQ,GAAR;IACE,OAAO,IAAI,CAACV,SAAS,CAAC5e,QAAQ,EAAE;GACjC;;;;;;EAODsf,+BAAK,GAAL,UAAM7R,SAAiB;IACrB,IAAMuD,SAAS,GAAGqK,SAAS,CAAC,IAAI,CAACuD,SAAS,EAAEnR,SAAS,CAAC;IACtD,OAAO,IAAI6R,eAAe,CAACtO,SAAS,EAAE,IAAI,CAACyG,OAAO,CAAC;GACpD;EAED7e,sBAAI0mB,iCAAI;SAAR;MACE,OAAO,IAAIA,eAAe,CAAC,IAAI,CAACV,SAAS,CAACW,IAAI,EAAE,IAAI,CAAC9H,OAAO,CAAC;KAC9D;;;;EAMD7e,sBAAI0mB,mCAAM;;;;;SAAV;MACE,IAAMtO,SAAS,GAAG,IAAI,CAAC4N,SAAS,CAACxR,MAAM;MACvC,IAAI4D,SAAS,IAAI,IAAI,EAAE;QACrB,OAAO,IAAI;;MAEb,OAAO,IAAIsO,eAAe,CAACtO,SAAS,EAAE,IAAI,CAACyG,OAAO,CAAC;KACpD;;;;;;;;;;EAQD6H,6BAAG,GAAH,UACEpkB,IAAqC,EACrC8S,QAA6B;IAE7B,IAAI,CAACsM,YAAY,CAAC,KAAK,CAAC;IACxB,OAAO,IAAI2E,gBAAgB,CACzB5E,oBAAoB,CAAC,IAAI,CAACuE,SAAS,EAAE1jB,IAAI,EAAE8S,QAAoB,CAAC,EAChE,IAAI,CACL;GACF;;;;;;;;EASDsR,mCAAS,GAAT,UACE3jB,KAAa,EACbnB,MAAuC,EACvCwT,QAAmB;IADnB;MAAAxT,SAAuBK,YAAY,CAACC,GAAG;IAAA;IAGvC,IAAI,CAACwf,YAAY,CAAC,WAAW,CAAC;IAC9B,IAAMpf,IAAI,GAAGE,cAAc,CAACZ,MAAM,EAAEmB,KAAK,CAAC;IAC1C,IAAMuX,aAAa,GAAGsM,aAAKxR,QAAQ,CAAc;IACjD,IAAIkF,aAAa,CAAC,aAAa,CAAC,IAAI,IAAI,IAAIhY,IAAI,CAACC,WAAW,IAAI,IAAI,EAAE;MACpE+X,aAAa,CAAC,aAAa,CAAC,GAAGhY,IAAI,CAACC,WAAW;;IAEjD,OAAO,IAAI8jB,gBAAgB,CACzB,IAAIQ,UAAW,CACb,IAAI,CAACb,SAAuB,EAC5B,IAAIc,OAAQ,CAACxkB,IAAI,CAACA,IAAI,EAAE,IAAI,CAAC,EAC7BgY,aAAa,CACA,EACf,IAAI,CACL;GACF;;;;;;;;;;;;;;;;;;EAmBDoM,iCAAO,GAAP;IAAA;IACE,OAAO/E,OAAO,CAAC,IAAI,CAACqE,SAAS,CAAC,CAACjW,IAAI,CACjC,WAAC;MAAI,WAAI0W,gBAAgB,CAACM,CAAC,EAAElnB,KAAI,CAACgf,OAAO,CAAC;IAAA,EAC3C;GACF;;;;;;;;;;;;;;;;;;;;EAqBD6H,8BAAI,GAAJ,UAAK1E,OAAkC;IAAvC;IACE,OAAOvI,IAAI,CAAC,IAAI,CAACuM,SAAS,EAAEhE,OAAO,IAAIhb,SAAS,CAAC,CAAC+I,IAAI,CACpD,WAAC;MAAI,WAAI0W,gBAAgB,CAACM,CAAC,EAAElnB,KAAI,CAACgf,OAAO,CAAC;IAAA,EAC3C;GACF;;;;;;EAOD6H,qCAAW,GAAX;IACE,OAAOrN,WAAW,CAAC,IAAI,CAAC2M,SAAS,CAAgC;GAClE;;;;;;;;;;EAWDU,wCAAc,GAAd,UACEtR,QAAgC;IAEhC,OAAO4E,cAAc,CACnB,IAAI,CAACgM,SAAS,EACd5Q,QAAoB,CACU;GACjC;;;;;EAMDsR,wCAAc,GAAd;IACE,OAAOpE,cAAc,CAAC,IAAI,CAAC0D,SAAS,CAAC;GACtC;;;;;EAMDU,gCAAM,GAAN;IACE,IAAI,CAAChF,YAAY,CAAC,QAAQ,CAAC;IAC3B,OAAOzH,YAAY,CAAC,IAAI,CAAC+L,SAAS,CAAC;GACpC;EAEOU,sCAAY,GAApB,UAAqBhlB,IAAY;IAC/B,IAAK,IAAI,CAACskB,SAAwB,CAAC/G,SAAS,CAACze,IAAI,KAAK,EAAE,EAAE;MACxD,MAAMiB,oBAAoB,CAACC,IAAI,CAAC;;GAEnC;EACH,sBAAC;AAAD,CAAC;;AC5OD;;;;;;;;;;;;;;;;AA+BA;;;;AAIA;EAGE,8BAAmBgiB,GAAgB,EAAWsC,SAA0B;IAArD,QAAG,GAAHtC,GAAG;IAAwB,cAAS,GAATsC,SAAS;;EAEvDhmB,sBAAIgnB,uDAAqB;SAAzB;MACE,OAAO,IAAI,CAAChB,SAAS,CAACzM,qBAAqB;KAC5C;;;;EAEDvZ,sBAAIgnB,oDAAkB;SAAtB;MACE,OAAO,IAAI,CAAChB,SAAS,CAACjL,kBAAkB;KACzC;;;;;;;;EAMDiM,kCAAG,GAAH,UAAIxmB,IAAa;IACf,IAAIkiB,KAAK,CAACliB,IAAI,CAAC,EAAE;MACf,MAAMe,eAAe,CACnB,oEAAoE,CACrE;;IAEH,OAAO,IAAImlB,eAAe,CAAC7J,GAAG,CAAC,IAAI,CAACmJ,SAAS,EAAExlB,IAAI,CAAC,EAAE,IAAI,CAAC;GAC5D;;;;;EAMDwmB,yCAAU,GAAV,UAAW/lB,GAAW;IACpB,IAAI,CAACyhB,KAAK,CAACzhB,GAAG,CAAC,EAAE;MACf,MAAMM,eAAe,CACnB,2EAA2E,CAC5E;;IAEH,IAAI;MACF0lB,QAAS,CAAC1e,WAAW,CAACtH,GAAG,EAAG,IAAI,CAAC+kB,SAAiC,CAAC3d,IAAI,CAAC;KACzE,CAAC,OAAOxE,CAAC,EAAE;MACV,MAAMtC,eAAe,CACnB,gEAAgE,CACjE;;IAEH,OAAO,IAAImlB,eAAe,CAAC7J,GAAG,CAAC,IAAI,CAACmJ,SAAS,EAAE/kB,GAAG,CAAC,EAAE,IAAI,CAAC;GAC3D;EAED+lB,oDAAqB,GAArB,UAAsB1C,IAAY;IAChC,IAAI,CAAC0B,SAAS,CAACjL,kBAAkB,GAAGuJ,IAAI;GACzC;EAED0C,uDAAwB,GAAxB,UAAyB1C,IAAY;IACnC,IAAI,CAAC0B,SAAS,CAACzM,qBAAqB,GAAG+K,IAAI;GAC5C;EAED0C,0CAAW,GAAX,UACE3e,IAAY,EACZib,IAAY,EACZtB,OAEM;IAFN;MAAAA,YAEM;IAAA;IAENqB,sBAAsB,CAAC,IAAI,CAAC2C,SAAS,EAAE3d,IAAI,EAAEib,IAAI,EAAEtB,OAAO,CAAC;GAC5D;EACH,2BAAC;AAAD,CAAC;;;;AClGD;;;;;;;;;;;;;;;;AAsCA;;;AAGA,IAAMkF,YAAY,GAAG,SAAS;AAE9B,SAASC,OAAO,CACdC,SAA6B,EAC7BlP,EAAmD;MAA7BjX,GAAG;;;EAIzB,IAAMyiB,GAAG,GAAG0D,SAAS,CAACC,WAAW,CAAC,KAAK,CAAC,CAAC5C,YAAY,EAAE;EACvD,IAAM6C,YAAY,GAAGF,SAAS,CAACC,WAAW,CAAC,eAAe,CAAC;EAC3D,IAAME,gBAAgB,GAAGH,SAAS,CAACC,WAAW,CAAC,oBAAoB,CAAC;;;EAIpE,IAAMG,oBAAoB,GAAyB,IAAIR,oBAAoB,CACzEtD,GAAG,EACH,IAAIZ,mBAAmB,CACrBY,GAAG,EACH4D,YAAY,EACZC,gBAAgB,EAChB,IAAIxf,cAAc,EAAE,EACpB9G,GAAG,EACHwmB,QAAQ,CAACC,WAAW,CACrB,CACF;EACD,OAAOF,oBAAoB;AAC7B;SAEgBG,eAAe,CAACC,QAA4B;EAC1D,IAAMC,gBAAgB,GAAG;;IAEvBtiB,SAAS;IACTF,SAAS;IACTpD,YAAY;IACZ6lB,OAAO,EAAEhF,mBAAmB;IAC5BvB,SAAS,EAAEmF;GACZ;EACDkB,QAAQ,CAACG,QAAQ,CAACC,iBAAiB,CACjC,IAAIC,SAAS,CAACf,YAAY,EAAEC,OAAO,wBAAuB,CACvDe,eAAe,CAACL,gBAAgB,CAAC,CACjCM,oBAAoB,CAAC,IAAI,CAAC,CAC9B;EAEDP,QAAQ,CAACQ,eAAe,CAAC1mB,IAAI,EAAEyH,OAAO,CAAC;AACzC;AAEAwe,eAAe,CAACF,QAA8B,CAAC","names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","__extends","code","message","_super","prependCode","_this","serverResponse","_baseMessage","Object","setPrototypeOf","FirebaseStorageError","prototype","customData","FirebaseError","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorizedApp","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","data","contentType","dataFromString","stringData","StringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","value","b","i","length","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","decodeURIComponent","e","hasMinus","indexOf","hasUnder","invalidChar","hasPlus","hasSlash","replace","bytes","array","dataURL","matches","match","middle","base64","endsWith","substring","rest","dataUrl","parts","DataURLParts","s","end","longEnough","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","ErrorCode","xhr_","XMLHttpRequest","errorCode_","NO_ERROR","sendPromise_","Promise","addEventListener","ABORT","resolve","NETWORK_ERROR","XhrConnection","method","body","headers","sent_","open","undefined","key","hasOwnProperty","setRequestHeader","toString","send","status","responseText","abort","header","getResponseHeader","listener","upload","removeEventListener","newConnection","ConnectionPool","path_","Location","encode","encodeURIComponent","bucketString","host","bucketLocation","makeFromUrl","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","version","firebaseStorageHost","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","group","captures","exec","bucketValue","pathValue","error","promise_","reject","FailRequest","_appDelete","start","f","callback","timeout","waitSeconds","timeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","_i","args","apply","callWithDelay","millis","setTimeout","handler","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","clearTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","protocolMatch","protocol","origin","makeQueryString","params","queryPart","nextPart","successCodes","additionalRetryCodes","errorCallback","progressCallback","pool","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","progressCallback_","timeout_","pool_","resolve_","reject_","start_","NetworkRequest","self","doTheRequest","backoffCallback","RequestEndStatus","connection","createConnection","pendingConnection_","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","then","removeUploadProgressListener","hitServer","getErrorCode","getStatus","isRetryStatusCode_","wasCanceled","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponseText","err","appDelete_","canceled_","backoffId_","appDelete","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","addAuthHeader_","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","urlParams","assign","errorHandler","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","bb","append","sliceBlob","blob","webkitSlice","mozSlice","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","FbsBlob","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength_1","forEach","merged_1","index_1","jsonObjectOrNull","obj","JSON","parse","parent","index","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","join","lastComponent","noXform_","metadata","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","Mapping","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","_a","pathWithoutTrailingSlash","reference","_c","_b","item","fromResponseString","handlerCheck","cndn","metadataHandler","xhr","text","listHandler","downloadUrlHandler","sharedErrorHandler","newErr","includes","objectErrorHandler","shared","getMetadata","fullServerUrl","maxOperationRetryTime","RequestInfo","list","delimiter","pageToken","maxResults","isRoot","bucketOnlyServerUrl","getDownloadUrl","updateMetadata","deleteObject","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","uploadData","current","finalized","checkResumeHeader_","allowed","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","ResumableUploadStatus","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","nextOrObserver","complete","asFunctions","next","observer","async","argsToForward","ref","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_request","_chunkMultiplier","_codeEquals","_needToFetchStatus","completeTransitions_","_error","_transition","_metadataErrorHandler","_promise","_resolve","_reject","_start","UploadTask","sizeBefore","_transferred","_updateProgress","_uploadUrl","_createResumable","_fetchStatus","_needToFetchMetadata","_fetchMetadata","_continueUpload","_oneShotUpload","all","storage","_getAuthToken","_getAppCheckToken","_resolveToken","_location","createRequest","_makeRequest","getPromise","statusRequest","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","bytesTransferred","totalBytes","task","completed","Observer","_addObserver","_removeObserver","onFulfilled","onRejected","_observers","_notifyObserver","splice","_finishPromise","observers","triggered","fbsAsync","bind","snapshot","toCall","_service","Reference","_newRef","uploadBytesResumable","_throwIfRoot","listAll","accumulator","listAllHelper","opt","nextPage","options","op","requestsList","makeRequestWithTokens","requestsGetMetadata","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","requestsDeleteObject","_getChild","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","serviceOrRef","pathOrUrl","extractBucket","config","makeFromBucketSpec","connectStorageEmulator","port","mockUserToken","_overrideAuthToken","createMockUserToken","app","projectId","_authProvider","_appCheckProvider","_pool","_url","_firebaseVersion","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","_host","time","POSITIVE_INFINITY","auth","getImmediate","optional","getToken","tokenData","accessToken","appCheck","_deleted","clear","request_1","_appId","add","delete","getModularInstance","uploadBytesResumableInternal","getMetadataInternal","updateMetadataInternal","listInternal","listAllInternal","getDownloadURLInternal","deleteObjectInternal","refInternal","_getChildInternal","connectEmulatorInternal","_delegate","UploadTaskSnapshotCompat","catch","pause","resume","UploadTaskCompat","wrappedNextOrObserver","taskSnapshot","on","ListResultCompat","ReferenceCompat","root","__assign","_UploadTask","_FbsBlob","r","StorageServiceCompat","_Location","STORAGE_TYPE","factory","container","getProvider","authProvider","appCheckProvider","storageServiceCompat","firebase","SDK_VERSION","registerStorage","instance","namespaceExports","Storage","INTERNAL","registerComponent","Component","setServiceProps","setMultipleInstances","registerVersion"],"sources":["/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/constants.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/error.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/platform/browser/base64.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/string.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/taskenums.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/connection.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/platform/browser/connection.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/connectionPool.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/location.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/failrequest.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/backoff.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/type.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/url.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/request.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/fs.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/blob.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/json.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/path.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/metadata.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/list.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/requestinfo.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/requests.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/observer.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/implementation/async.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/task.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/reference.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/src/service.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/exp/api.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/compat/tasksnapshot.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/compat/task.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/compat/list.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/compat/reference.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/compat/service.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/storage/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class FirebaseStorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to FirebaseStorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, FirebaseStorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `FirebaseStorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new FirebaseStorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new FirebaseStorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function invalidArgument(message: string): FirebaseStorageError {\n  return new FirebaseStorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(\n  format: string,\n  message: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = string;\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n};\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n */\nexport type TaskState = string;\n\n/**\n * Represents the current state of a running upload.\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Network headers\n */\nexport interface Headers {\n  [name: string]: string;\n}\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\nexport interface Connection {\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Headers,\n  Connection,\n  ErrorCode\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nexport class XhrConnection implements Connection {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport function newConnection(): Connection {\n  return new XhrConnection();\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport { Connection } from './connection';\nimport { newConnection } from '../platform/connection';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class ConnectionPool {\n  createConnection(): Connection {\n    return newConnection();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(urlPart: string, host: string): string {\n  const protocolMatch = host.match(/^(\\w+):\\/\\/.+/);\n  const protocol = protocolMatch?.[1];\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { start, stop, id as backoffId } from './backoff';\nimport {\n  FirebaseStorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Headers, Connection, ErrorCode } from './connection';\nimport { ConnectionPool } from './connectionPool';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string | Blob | Uint8Array | null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingConnection_: Connection | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: T | PromiseLike<T>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: Connection, p2: string) => T;\n  private errorCallback_:\n    | ((p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null;\n  private progressCallback_: ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: ConnectionPool;\n  promise_: Promise<T>;\n\n  constructor(\n    url: string,\n    method: string,\n    headers: Headers,\n    body: string | Blob | Uint8Array | null,\n    successCodes: number[],\n    additionalRetryCodes: number[],\n    callback: (p1: Connection, p2: string) => T,\n    errorCallback:\n      | ((p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError)\n      | null,\n    timeout: number,\n    progressCallback: ((p1: number, p2: number) => void) | null,\n    pool: ConnectionPool\n  ) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: T | PromiseLike<T>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const self = this;\n\n    function doTheRequest(\n      backoffCallback: (p1: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ): void {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = self.pool_.createConnection();\n      self.pendingConnection_ = connection;\n\n      function progressListener(progressEvent: ProgressEvent): void {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(self.url_, self.method_, self.body_, self.headers_)\n        .then(() => {\n          if (self.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          self.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (!hitServer || self.isRetryStatusCode_(status)) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = self.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    }\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ): void {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const connection = status.connection as Connection;\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(\n            connection,\n            connection.getResponseText()\n          );\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  pool: ConnectionPool,\n  firebaseVersion?: string\n): Request<T> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    pool\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, FirebaseStorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, Connection } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: (p1: Connection, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  FirebaseStorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection, p2: string) => Metadata {\n  function handler(xhr: Connection, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection, p2: string) => ListResult {\n  function handler(xhr: Connection, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection, p2: string) => string | null {\n  function handler(xhr: Connection, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(\n    xhr: Connection,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getResponseText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection, p2: FirebaseStorageError) => FirebaseStorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: Connection, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { FirebaseStorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `FirebaseStorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `FirebaseStorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  FirebaseStorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  CompleteFn,\n  ErrorFn,\n  Observer,\n  StorageObserver,\n  Subscribe,\n  Unsubscribe\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot } from './tasksnapshot';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserver<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: FirebaseStorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: FirebaseStorageError) => void;\n  private _metadataErrorHandler: (p1: FirebaseStorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: FirebaseStorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `FirebaseStorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | ((a: UploadTaskSnapshot) => unknown),\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: FirebaseStorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(\n    onRejected: (p1: FirebaseStorageError) => T | Promise<T>\n  ): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: FirebaseStorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as FirebaseStorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject,\n  multipartUpload\n} from './implementation/requests';\nimport { ListOptions } from '../exp/public-types';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { UploadResult } from './tasksnapshot';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo)\n    .then(request => request.getPromise())\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport async function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport async function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport async function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport async function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return (await ref.storage.makeRequestWithTokens(requestInfo))\n    .getPromise()\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport async function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return (await ref.storage.makeRequestWithTokens(requestInfo)).getPromise();\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { ConnectionPool } from './implementation/connectionPool';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-exp';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from '../src/implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from '../exp/public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `http://${host}:${port}`;\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @public\n * @param opt_url - gs:// url to a custom Storage Bucket\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   * - protocol://host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _pool: ConnectionPool,\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  get host(): string {\n    return this._host;\n  }\n\n  /**\n   * Set host string for this service.\n   * @param host - host string in the form of host, host:port,\n   * or protocol://host:port\n   */\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    authToken: string | null,\n    appCheckToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        this._pool,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<T>(\n    requestInfo: RequestInfo<T>\n  ): Promise<Request<T>> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(requestInfo, authToken, appCheckToken);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app-exp';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from '../src/service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from '../src/metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal\n} from '../src/reference';\nimport { STORAGE_TYPE } from './constants';\nimport { EmulatorMockTokenOptions, getModularInstance } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from '../src/implementation/location';\nexport { UploadTask as _UploadTask } from '../src/task';\nexport type { Reference as _Reference } from '../src/reference';\nexport { FbsBlob as _FbsBlob } from '../src/implementation/blob';\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: string,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\nexport { StringFormat } from '../src/implementation/string';\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage-exp'> = _getProvider(\n    app,\n    STORAGE_TYPE\n  );\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '../exp/api';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot> {\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  FirebaseStorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '../exp/api';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: FirebaseStorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: FirebaseStorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '../exp/api';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob\n} from '../exp/api'; // import from the exp public API\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Metadata } from '../src/metadata';\nimport { dataFromString } from '../src/implementation/string';\nimport { invalidRootOperation } from '../src/implementation/error';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference>\n{\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as Metadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = dataFromString(format, value);\n    const metadataClone = { ...metadata } as Metadata;\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A `Promise` that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A `Promise` that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as Metadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A `Promise` that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A `Promise` that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport {\n  ref,\n  _Location,\n  connectStorageEmulator,\n  FirebaseStorage\n} from '../exp/api'; // import from the exp public API\nimport { ReferenceCompat } from './reference';\nimport { isUrl, FirebaseStorageImpl } from '../src/service';\nimport { invalidArgument } from '../src/implementation/error';\nimport { Compat, EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<FirebaseStorage>\n{\n  constructor(public app: FirebaseApp, readonly _delegate: FirebaseStorage) {}\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url, (this._delegate as FirebaseStorageImpl).host);\n    } catch (e) {\n      throw invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { StringFormat } from './src/implementation/string';\nimport { TaskEvent, TaskState } from './src/implementation/taskenums';\n\nimport { ConnectionPool } from './src/implementation/connectionPool';\nimport { ReferenceCompat } from './compat/reference';\nimport { StorageServiceCompat } from './compat/service';\nimport { FirebaseStorageImpl } from './src/service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nimport './register-module';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    new FirebaseStorageImpl(\n      app,\n      authProvider,\n      appCheckProvider,\n      new ConnectionPool(),\n      url,\n      firebase.SDK_VERSION\n    )\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: FirebaseStorageImpl,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as _FirebaseNamespace);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}