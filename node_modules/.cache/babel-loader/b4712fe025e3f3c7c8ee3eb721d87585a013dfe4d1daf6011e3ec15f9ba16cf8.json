{"ast":null,"code":"import firebase from '@firebase/app';\nimport { Provider, ComponentContainer, Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, base64, stringToByteArray, Sha1, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken, validateArgCount, validateCallback, validateContextObject } from '@firebase/util';\nimport { __spreadArray, __read, __values, __extends, __awaiter, __generator, __assign } from 'tslib';\nimport { Logger, LogLevel } from '@firebase/logger';\nvar name = \"@firebase/database\";\nvar version = \"0.11.0\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** The semver (www.semver.org) version of the SDK. */\nvar SDK_VERSION = '';\n// SDK_VERSION should be set before any database instance is created\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\nvar DOMStorageWrapper = /** @class */function () {\n  /**\r\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  function DOMStorageWrapper(domStorage_) {\n    this.domStorage_ = domStorage_;\n    // Use a prefix to avoid collisions with other stuff saved by the app.\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param key - The key to save the value under\r\n   * @param value - The value being stored, or null to remove the key.\r\n   */\n  DOMStorageWrapper.prototype.set = function (key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  };\n  /**\r\n   * @returns The value that was stored under this key, or null\r\n   */\n  DOMStorageWrapper.prototype.get = function (key) {\n    var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  };\n  DOMStorageWrapper.prototype.remove = function (key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  };\n  DOMStorageWrapper.prototype.prefixedName_ = function (name) {\n    return this.prefix_ + name;\n  };\n  DOMStorageWrapper.prototype.toString = function () {\n    return this.domStorage_.toString();\n  };\n  return DOMStorageWrapper;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\nvar MemoryStorage = /** @class */function () {\n  function MemoryStorage() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n  MemoryStorage.prototype.set = function (key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  };\n  MemoryStorage.prototype.get = function (key) {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  };\n  MemoryStorage.prototype.remove = function (key) {\n    delete this.cache_[key];\n  };\n  return MemoryStorage;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\nvar createStoragefor = function (domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      var domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nvar PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nvar SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logClient = new Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\nvar LUIDGenerator = function () {\n  var id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\nvar sha1 = function (str) {\n  var utf8Bytes = stringToByteArray(str);\n  var sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  var sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\nvar buildLogMessage_ = function () {\n  var varArgs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n  var message = '';\n  for (var i = 0; i < varArgs.length; i++) {\n    var arg = varArgs[i];\n    if (Array.isArray(arg) || arg && typeof arg === 'object' &&\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\nvar logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n */\nvar firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\nvar enableLogging = function (logger_, persistent) {\n  assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\nvar log = function () {\n  var varArgs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n  if (logger) {\n    var message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\nvar logWrapper = function (prefix) {\n  return function () {\n    var varArgs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      varArgs[_i] = arguments[_i];\n    }\n    log.apply(void 0, __spreadArray([prefix], __read(varArgs)));\n  };\n};\nvar error = function () {\n  var varArgs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n  var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, __spreadArray([], __read(varArgs)));\n  logClient.error(message);\n};\nvar fatal = function () {\n  var varArgs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n  var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, __spreadArray([], __read(varArgs)));\n  logClient.error(message);\n  throw new Error(message);\n};\nvar warn = function () {\n  var varArgs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n  var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, __spreadArray([], __read(varArgs)));\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\nvar warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\nvar isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data !== data ||\n  // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\nvar executeWhenDOMReady = function (fn) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    var called_1 = false;\n    var wrappedFn_1 = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn_1, Math.floor(10));\n        return;\n      }\n      if (!called_1) {\n        called_1 = true;\n        fn();\n      }\n    };\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn_1, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', function () {\n        if (document.readyState === 'complete') {\n          wrappedFn_1();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      window.attachEvent('onload', wrappedFn_1);\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\nvar MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\nvar MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\nvar nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    var aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @returns {!number} comparison result.\r\n */\nvar stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\nvar requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n  }\n};\nvar ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n  var keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (var k in obj) {\n    keys.push(k);\n  }\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  var key = '{';\n  for (var i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\nvar splitStringBySize = function (str, segsize) {\n  var len = str.length;\n  if (len <= segsize) {\n    return [str];\n  }\n  var dataSegs = [];\n  for (var c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\nfunction each(obj, fn) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\nvar doubleToIEEE754String = function (v) {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n  var ebits = 11,\n    fbits = 52;\n  var bias = (1 << ebits - 1) - 1;\n  var s, e, f, ln, i;\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n  // Pack sign, exponent, fraction\n  var bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  var str = bits.join('');\n  // Return the data as a hex string. --MJL\n  var hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\nvar isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\nvar isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\nfunction errorForServerCode(code, query) {\n  var reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n  var error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error.code = code.toUpperCase();\n  return error;\n}\n/**\r\n * Used to test for integer-looking strings\r\n */\nvar INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\nvar INTEGER_32_MIN = -2147483648;\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\nvar INTEGER_32_MAX = 2147483647;\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\nvar tryParseInt = function (str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    var intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\nvar exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function () {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      var stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\nvar beingCrawled = function () {\n  var userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || '';\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\nvar setTimeoutNonBlocking = function (fn, time) {\n  var timeout = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n  return timeout;\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\nvar AppCheckTokenProvider = /** @class */function () {\n  function AppCheckTokenProvider(appName_, appCheckProvider) {\n    var _this = this;\n    this.appName_ = appName_;\n    this.appCheckProvider = appCheckProvider;\n    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({\n      optional: true\n    });\n    if (!this.appCheck) {\n      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(function (appCheck) {\n        return _this.appCheck = appCheck;\n      });\n    }\n  }\n  AppCheckTokenProvider.prototype.getToken = function (forceRefresh) {\n    var _this = this;\n    if (!this.appCheck) {\n      return new Promise(function (resolve, reject) {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(function () {\n          if (_this.appCheck) {\n            _this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  };\n  AppCheckTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    var _a;\n    (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(function (appCheck) {\n      return appCheck.addTokenListener(listener);\n    });\n  };\n  AppCheckTokenProvider.prototype.notifyForInvalidToken = function () {\n    warn(\"Provided AppCheck credentials for the app named \\\"\" + this.appName_ + \"\\\" \" + 'are invalid. This usually indicates your app was not initialized correctly.');\n  };\n  return AppCheckTokenProvider;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\nvar FirebaseAuthTokenProvider = /** @class */function () {\n  function FirebaseAuthTokenProvider(appName_, firebaseOptions_, authProvider_) {\n    var _this = this;\n    this.appName_ = appName_;\n    this.firebaseOptions_ = firebaseOptions_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n    if (!this.auth_) {\n      authProvider_.onInit(function (auth) {\n        return _this.auth_ = auth;\n      });\n    }\n  }\n  FirebaseAuthTokenProvider.prototype.getToken = function (forceRefresh) {\n    var _this = this;\n    if (!this.auth_) {\n      return new Promise(function (resolve, reject) {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(function () {\n          if (_this.auth_) {\n            _this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.auth_.getToken(forceRefresh).catch(function (error) {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  };\n  FirebaseAuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_.get().then(function (auth) {\n        return auth.addAuthTokenListener(listener);\n      });\n    }\n  };\n  FirebaseAuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\n    this.authProvider_.get().then(function (auth) {\n      return auth.removeAuthTokenListener(listener);\n    });\n  };\n  FirebaseAuthTokenProvider.prototype.notifyForInvalidToken = function () {\n    var errorMessage = 'Provided authentication credentials for the app named \"' + this.appName_ + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  };\n  return FirebaseAuthTokenProvider;\n}();\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nvar EmulatorTokenProvider = /** @class */function () {\n  function EmulatorTokenProvider(accessToken) {\n    this.accessToken = accessToken;\n  }\n  EmulatorTokenProvider.prototype.getToken = function (forceRefresh) {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  };\n  EmulatorTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  };\n  EmulatorTokenProvider.prototype.removeTokenChangeListener = function (listener) {};\n  EmulatorTokenProvider.prototype.notifyForInvalidToken = function () {};\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  EmulatorTokenProvider.OWNER = 'owner';\n  return EmulatorTokenProvider;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PROTOCOL_VERSION = '5';\nvar VERSION_PARAM = 'v';\nvar TRANSPORT_SESSION_PARAM = 's';\nvar REFERER_PARAM = 'r';\nvar FORGE_REF = 'f';\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nvar FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nvar LAST_SESSION_PARAM = 'ls';\nvar APPLICATION_ID_PARAM = 'p';\nvar APP_CHECK_TOKEN_PARAM = 'ac';\nvar WEBSOCKET = 'websocket';\nvar LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A class that holds metadata about a Repo object\r\n */\nvar RepoInfo = /** @class */function () {\n  /**\r\n   * @param host - Hostname portion of the url for the repo\r\n   * @param secure - Whether or not this repo is accessed over ssl\r\n   * @param namespace - The namespace represented by the repo\r\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n   * @param persistenceKey - Override the default session persistence storage key\r\n   */\n  function RepoInfo(host, secure, namespace, webSocketOnly, nodeAdmin, persistenceKey, includeNamespaceInQueryParams) {\n    if (nodeAdmin === void 0) {\n      nodeAdmin = false;\n    }\n    if (persistenceKey === void 0) {\n      persistenceKey = '';\n    }\n    if (includeNamespaceInQueryParams === void 0) {\n      includeNamespaceInQueryParams = false;\n    }\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this._host;\n  }\n  RepoInfo.prototype.isCacheableHost = function () {\n    return this.internalHost.substr(0, 2) === 's-';\n  };\n  RepoInfo.prototype.isCustomHost = function () {\n    return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';\n  };\n  Object.defineProperty(RepoInfo.prototype, \"host\", {\n    get: function () {\n      return this._host;\n    },\n    set: function (newHost) {\n      if (newHost !== this.internalHost) {\n        this.internalHost = newHost;\n        if (this.isCacheableHost()) {\n          PersistentStorage.set('host:' + this._host, this.internalHost);\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  RepoInfo.prototype.toString = function () {\n    var str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  };\n  RepoInfo.prototype.toURLString = function () {\n    var protocol = this.secure ? 'https://' : 'http://';\n    var query = this.includeNamespaceInQueryParams ? \"?ns=\" + this.namespace : '';\n    return \"\" + protocol + this.host + \"/\" + query;\n  };\n  return RepoInfo;\n}();\nfunction repoInfoNeedsQueryParam(repoInfo) {\n  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;\n}\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n  var connURL;\n  if (type === WEBSOCKET) {\n    connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n  var pairs = [];\n  each(params, function (key, value) {\n    pairs.push(key + '=' + value);\n  });\n  return connURL + pairs.join('&');\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Tracks a collection of stats.\r\n */\nvar StatsCollection = /** @class */function () {\n  function StatsCollection() {\n    this.counters_ = {};\n  }\n  StatsCollection.prototype.incrementCounter = function (name, amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n    this.counters_[name] += amount;\n  };\n  StatsCollection.prototype.get = function () {\n    return deepCopy(this.counters_);\n  };\n  return StatsCollection;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar collections = {};\nvar reporters = {};\nfunction statsManagerGetCollection(repoInfo) {\n  var hashString = repoInfo.toString();\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n  return collections[hashString];\n}\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n  var hashString = repoInfo.toString();\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n  return reporters[hashString];\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\nvar PacketReceiver = /** @class */function () {\n  /**\r\n   * @param onMessage_\r\n   */\n  function PacketReceiver(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n  PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  };\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   */\n  PacketReceiver.prototype.handleResponse = function (requestNum, data) {\n    var _this = this;\n    this.pendingResponses[requestNum] = data;\n    var _loop_1 = function () {\n      var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\n      delete this_1.pendingResponses[this_1.currentResponseNum];\n      var _loop_2 = function (i) {\n        if (toProcess[i]) {\n          exceptionGuard(function () {\n            _this.onMessage_(toProcess[i]);\n          });\n        }\n      };\n      for (var i = 0; i < toProcess.length; ++i) {\n        _loop_2(i);\n      }\n      if (this_1.currentResponseNum === this_1.closeAfterResponse) {\n        if (this_1.onClose) {\n          this_1.onClose();\n          this_1.onClose = null;\n        }\n        return \"break\";\n      }\n      this_1.currentResponseNum++;\n    };\n    var this_1 = this;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      var state_1 = _loop_1();\n      if (state_1 === \"break\") break;\n    }\n  };\n  return PacketReceiver;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nvar MAX_URL_DATA_SIZE = 1870;\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\nvar LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n */\nvar BrowserPollConnection = /** @class */function () {\n  /**\r\n   * @param connId An identifier for this connection, used for logging\r\n   * @param repoInfo The info for the endpoint to send data to.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The AppCheck token for this client.\r\n   * @param authToken The AuthToken to use for this connection.\r\n   * @param transportSessionId Optional transportSessionid if we are\r\n   * reconnecting for an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n   * already created a connection previously\r\n   */\n  function BrowserPollConnection(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    var _this = this;\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = function (params) {\n      // Always add the token if we have one.\n      if (_this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = _this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n  BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(function () {\n      _this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      _this.onClosed_();\n      _this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT));\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(function () {\n      if (_this.isClosed_) {\n        return;\n      }\n      //Set up a callback that gets triggered once a connection is set up.\n      _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var _a = __read(args, 5),\n          command = _a[0],\n          arg1 = _a[1],\n          arg2 = _a[2];\n        _a[3];\n        _a[4];\n        _this.incrementIncomingBytes_(args);\n        if (!_this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n        _this.everConnected_ = true;\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false;\n            // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n            _this.myPacketOrderer.closeAfter(arg1, function () {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var _a = __read(args, 2),\n          pN = _a[0],\n          data = _a[1];\n        _this.incrementIncomingBytes_(args);\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, function () {\n        _this.onClosed_();\n      }, _this.urlFn);\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n      if (_this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (_this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\n      }\n      if (_this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\n      }\n      if (_this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = _this.applicationId;\n      }\n      if (_this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = _this.appCheckToken;\n      }\n      if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      var connectURL = _this.urlFn(urlParams);\n      _this.log_('Connecting via long-poll to ' + connectURL);\n      _this.scriptTagHolder.addTag(connectURL, function () {\n        /* do nothing */\n      });\n    });\n  };\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n  BrowserPollConnection.prototype.start = function () {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  };\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n  BrowserPollConnection.forceAllow = function () {\n    BrowserPollConnection.forceAllow_ = true;\n  };\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n  BrowserPollConnection.forceDisallow = function () {\n    BrowserPollConnection.forceDisallow_ = true;\n  };\n  // Static method, use string literal so it can be accessed in a generic way\n  BrowserPollConnection.isAvailable = function () {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  };\n  /**\r\n   * No-op for polling\r\n   */\n  BrowserPollConnection.prototype.markConnectionHealthy = function () {};\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   */\n  BrowserPollConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  };\n  /**\r\n   * Triggered when this transport is closed\r\n   */\n  BrowserPollConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n  BrowserPollConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param data - The JSON data to transmit.\r\n   */\n  BrowserPollConnection.prototype.send = function (data) {\n    var dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //first, lets get the base64-encoded data\n    var base64data = base64Encode(dataStr);\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  };\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   */\n  BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    var urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  };\n  /**\r\n   * Used to track the bytes received by this client\r\n   */\n  BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    var bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  };\n  return BrowserPollConnection;\n}();\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\nvar FirebaseIFrameScriptHolder = /** @class */function () {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn;\n    //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n    this.outstandingRequests = new Set();\n    //A queue of the pending segments waiting for transmission to the server.\n    this.pendingSegs = [];\n    //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n    this.currentSerial = Math.floor(Math.random() * 100000000);\n    // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n    this.sendNewPolls = true;\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n      // Set the iframe's contents.\n      var script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        var currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      var iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   */\n  FirebaseIFrameScriptHolder.createIFrame_ = function () {\n    var iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        var a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        var domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  };\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n  FirebaseIFrameScriptHolder.prototype.close = function () {\n    var _this = this;\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(function () {\n        if (_this.myIFrame !== null) {\n          document.body.removeChild(_this.myIFrame);\n          _this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n    // Protect from being called recursively.\n    var onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  };\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param id - The ID of this connection\r\n   * @param pw - The password for this connection\r\n   */\n  FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  };\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n  FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      var theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      var curDataString = '';\n      var i = 0;\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        var nextSeg = this.pendingSegs[0];\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          var theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n  FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    });\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  };\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param url - The URL of the script tag.\r\n   * @param serial - The serial number of the request.\r\n   */\n  FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\n    var _this = this;\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n    var doNewRequest = function () {\n      _this.outstandingRequests.delete(serial);\n      _this.newRequest_();\n    };\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n    var readyStateCB = function () {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n    this.addTag(url, readyStateCB);\n  };\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param url - The URL for the script tag source.\r\n   * @param loadCB - A callback to be triggered once the script has loaded.\r\n   */\n  FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\n    var _this = this;\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(function () {\n        try {\n          // if we're already closed, don't add this poll\n          if (!_this.sendNewPolls) {\n            return;\n          }\n          var newScript_1 = _this.myIFrame.doc.createElement('script');\n          newScript_1.type = 'text/javascript';\n          newScript_1.async = true;\n          newScript_1.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript_1.onload = newScript_1.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var rstate = newScript_1.readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript_1.onload = newScript_1.onreadystatechange = null;\n              if (newScript_1.parentNode) {\n                newScript_1.parentNode.removeChild(newScript_1);\n              }\n              loadCB();\n            }\n          };\n          newScript_1.onerror = function () {\n            log('Long-poll script failed to load: ' + url);\n            _this.sendNewPolls = false;\n            _this.close();\n          };\n          _this.myIFrame.doc.body.appendChild(newScript_1);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  };\n  return FirebaseIFrameScriptHolder;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nvar WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\nvar WebSocketConnection = /** @class */function () {\n  /**\r\n   * @param connId identifier for this transport\r\n   * @param repoInfo The info for the websocket endpoint.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The App Check Token for this client.\r\n   * @param authToken The Auth Token for this client.\r\n   * @param transportSessionId Optional transportSessionId if this is connecting\r\n   * to an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if there was a previous\r\n   * connection\r\n   */\n  function WebSocketConnection(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n  /**\r\n   * @param repoInfo - The info for the websocket endpoint.\r\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n   * @returns connection url\r\n   */\n  WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId, appCheckToken) {\n    var urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n    if (!isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  };\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n  WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n    try {\n      if (isNodeSdk()) {\n        var device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        var options = {\n          headers: {\n            'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + SDK_VERSION + \"/\" + process.platform + \"/\" + device,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = \"Bearer \" + this.authToken;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        var env = process['env'];\n        var proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        var options = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      var error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n    this.mySock.onopen = function () {\n      _this.log_('Websocket connected.');\n      _this.everConnected_ = true;\n    };\n    this.mySock.onclose = function () {\n      _this.log_('Websocket connection was disconnected.');\n      _this.mySock = null;\n      _this.onClosed_();\n    };\n    this.mySock.onmessage = function (m) {\n      _this.handleIncomingFrame(m);\n    };\n    this.mySock.onerror = function (e) {\n      _this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var error = e.message || e.data;\n      if (error) {\n        _this.log_(error);\n      }\n      _this.onClosed_();\n    };\n  };\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n  WebSocketConnection.prototype.start = function () {};\n  WebSocketConnection.forceDisallow = function () {\n    WebSocketConnection.forceDisallow_ = true;\n  };\n  WebSocketConnection.isAvailable = function () {\n    var isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  };\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   */\n  WebSocketConnection.previouslyFailed = function () {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  };\n  WebSocketConnection.prototype.markConnectionHealthy = function () {\n    PersistentStorage.remove('previous_websocket_failure');\n  };\n  WebSocketConnection.prototype.appendFrame_ = function (data) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      var fullMess = this.frames.join('');\n      this.frames = null;\n      var jsonMess = jsonEval(fullMess);\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  };\n  /**\r\n   * @param frameCount - The number of frames we are expecting from the server\r\n   */\n  WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  };\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @returns Any remaining data to be process, or null if there is none\r\n   */\n  WebSocketConnection.prototype.extractFrameCount_ = function (data) {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      var frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  };\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess - The frame data\r\n   */\n  WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n\n    var data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      var remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  };\n  /**\r\n   * Send a message to the server\r\n   * @param data - The JSON object to transmit\r\n   */\n  WebSocketConnection.prototype.send = function (data) {\n    this.resetKeepAlive();\n    var dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n    //Send the actual data in segments.\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  };\n  WebSocketConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  };\n  WebSocketConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n  WebSocketConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n  WebSocketConnection.prototype.resetKeepAlive = function () {\n    var _this = this;\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(function () {\n      //If there has been no websocket activity for a while, send a no-op\n      if (_this.mySock) {\n        _this.sendString_('0');\n      }\n      _this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  };\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param str - String to send.\r\n   */\n  WebSocketConnection.prototype.sendString_ = function (str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  };\n  /**\r\n   * Number of response before we consider the connection \"healthy.\"\r\n   */\n  WebSocketConnection.responsesRequiredToBeHealthy = 2;\n  /**\r\n   * Time to wait for the connection te become healthy before giving up.\r\n   */\n  WebSocketConnection.healthyTimeout = 30000;\n  return WebSocketConnection;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\nvar TransportManager = /** @class */function () {\n  /**\r\n   * @param repoInfo - Metadata around the namespace we're connecting to\r\n   */\n  function TransportManager(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n  Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\n    get: function () {\n      return [BrowserPollConnection, WebSocketConnection];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  TransportManager.prototype.initTransports_ = function (repoInfo) {\n    var e_1, _a;\n    var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n      isSkipPollConnection = true;\n    }\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      var transports = this.transports_ = [];\n      try {\n        for (var _b = __values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var transport = _c.value;\n          if (transport && transport['isAvailable']()) {\n            transports.push(transport);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\r\n   * @returns The constructor for the initial transport to use\r\n   */\n  TransportManager.prototype.initialTransport = function () {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  };\n  /**\r\n   * @returns The constructor for the next transport, or null\r\n   */\n  TransportManager.prototype.upgradeTransport = function () {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  };\n  return TransportManager;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\nvar UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nvar MESSAGE_TYPE = 't';\nvar MESSAGE_DATA = 'd';\nvar CONTROL_SHUTDOWN = 's';\nvar CONTROL_RESET = 'r';\nvar CONTROL_ERROR = 'e';\nvar CONTROL_PONG = 'o';\nvar SWITCH_ACK = 'a';\nvar END_TRANSMISSION = 'n';\nvar PING = 'p';\nvar SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\nvar Connection = /** @class */function () {\n  /**\r\n   * @param id - an id for this connection\r\n   * @param repoInfo_ - the info for the endpoint to connect to\r\n   * @param applicationId_ - the Firebase App ID for this project\r\n   * @param appCheckToken_ - The App Check Token for this device.\r\n   * @param authToken_ - The auth token for this session.\r\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  function Connection(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.appCheckToken_ = appCheckToken_;\n    this.authToken_ = authToken_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0 /* CONNECTING */;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   */\n  Connection.prototype.start_ = function () {\n    var _this = this;\n    var conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessageReceived = this.connReceiver_(this.conn_);\n    var onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n    setTimeout(function () {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    var healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(function () {\n        _this.healthyTimeout_ = null;\n        if (!_this.isHealthy_) {\n          if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has received ' + _this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n            _this.isHealthy_ = true;\n            _this.conn_.markConnectionHealthy();\n          } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has sent ' + _this.conn_.bytesSent + ' bytes.  Leaving connection alive.');\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            _this.log_('Closing unhealthy connection after timeout.');\n            _this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS));\n    }\n  };\n  Connection.prototype.nextTransportId_ = function () {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  };\n  Connection.prototype.disconnReceiver_ = function (conn) {\n    var _this = this;\n    return function (everConnected) {\n      if (conn === _this.conn_) {\n        _this.onConnectionLost_(everConnected);\n      } else if (conn === _this.secondaryConn_) {\n        _this.log_('Secondary connection lost.');\n        _this.onSecondaryConnectionLost_();\n      } else {\n        _this.log_('closing an old connection');\n      }\n    };\n  };\n  Connection.prototype.connReceiver_ = function (conn) {\n    var _this = this;\n    return function (message) {\n      if (_this.state_ !== 2 /* DISCONNECTED */) {\n        if (conn === _this.rx_) {\n          _this.onPrimaryMessageReceived_(message);\n        } else if (conn === _this.secondaryConn_) {\n          _this.onSecondaryMessageReceived_(message);\n        } else {\n          _this.log_('message on old connection');\n        }\n      }\n    };\n  };\n  /**\r\n   * @param dataMsg - An arbitrary data message to be sent to the server\r\n   */\n  Connection.prototype.sendRequest = function (dataMsg) {\n    // wrap in a data message envelope and send it on\n    var msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  };\n  Connection.prototype.tryCleanupConnection = function () {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  };\n\n  Connection.prototype.onSecondaryControl_ = function (controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      var cmd = controlData[MESSAGE_TYPE];\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  };\n  Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  };\n  Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  };\n  Connection.prototype.proceedWithUpgrade_ = function () {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    });\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  };\n  Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  };\n  Connection.prototype.onDataMessage_ = function (message) {\n    this.onPrimaryResponse_();\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  };\n  Connection.prototype.onPrimaryResponse_ = function () {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  };\n  Connection.prototype.onControl_ = function (controlData) {\n    var cmd = requireKey(MESSAGE_TYPE, controlData);\n    if (MESSAGE_DATA in controlData) {\n      var payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (var i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  };\n  /**\r\n   * @param handshake - The handshake data returned from the server\r\n   */\n  Connection.prototype.onHandshake_ = function (handshake) {\n    var timestamp = handshake.ts;\n    var version = handshake.v;\n    var host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === 0 /* CONNECTING */) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  };\n  Connection.prototype.tryStartUpgrade_ = function () {\n    var conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  };\n  Connection.prototype.startUpgrade_ = function (conn) {\n    var _this = this;\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessage = this.connReceiver_(this.secondaryConn_);\n    var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(function () {\n      if (_this.secondaryConn_) {\n        _this.log_('Timed out trying to upgrade.');\n        _this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  };\n  Connection.prototype.onReset_ = function (host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === 1 /* CONNECTED */) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  };\n  Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\n    var _this = this;\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1 /* CONNECTED */;\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(function () {\n        _this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  };\n  Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\n      this.log_('sending ping on primary.');\n      this.sendData_({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  };\n  Connection.prototype.onSecondaryConnectionLost_ = function () {\n    var conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  };\n  /**\r\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   */\n  Connection.prototype.onConnectionLost_ = function (everConnected) {\n    this.conn_ = null;\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === 0 /* CONNECTING */) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === 1 /* CONNECTED */) {\n      this.log_('Realtime connection lost.');\n    }\n    this.close();\n  };\n  Connection.prototype.onConnectionShutdown_ = function (reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n    this.close();\n  };\n  Connection.prototype.sendData_ = function (data) {\n    if (this.state_ !== 1 /* CONNECTED */) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  };\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n  Connection.prototype.close = function () {\n    if (this.state_ !== 2 /* DISCONNECTED */) {\n      this.log_('Closing realtime connection.');\n      this.state_ = 2 /* DISCONNECTED */;\n      this.closeConnections_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n  Connection.prototype.closeConnections_ = function () {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  };\n  return Connection;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\nvar ServerActions = /** @class */function () {\n  function ServerActions() {}\n  ServerActions.prototype.put = function (pathString, data, onComplete, hash) {};\n  ServerActions.prototype.merge = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param token - The authentication token\r\n   */\n  ServerActions.prototype.refreshAuthToken = function (token) {};\n  /**\r\n   * Refreshes the app check token for the current connection.\r\n   * @param token The app check token\r\n   */\n  ServerActions.prototype.refreshAppCheckToken = function (token) {};\n  ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) {};\n  ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) {};\n  ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) {};\n  ServerActions.prototype.reportStats = function (stats) {};\n  return ServerActions;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\nvar EventEmitter = /** @class */function () {\n  function EventEmitter(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   */\n  EventEmitter.prototype.trigger = function (eventType) {\n    var varArgs = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      varArgs[_i - 1] = arguments[_i];\n    }\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      var listeners = __spreadArray([], __read(this.listeners_[eventType]));\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  };\n  EventEmitter.prototype.on = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback: callback,\n      context: context\n    });\n    var eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  };\n  EventEmitter.prototype.off = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    var listeners = this.listeners_[eventType] || [];\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  };\n  EventEmitter.prototype.validateEventType_ = function (eventType) {\n    assert(this.allowedEvents_.find(function (et) {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  };\n  return EventEmitter;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\nvar OnlineMonitor = /** @class */function (_super) {\n  __extends(OnlineMonitor, _super);\n  function OnlineMonitor() {\n    var _this = _super.call(this, ['online']) || this;\n    _this.online_ = true;\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !isMobileCordova()) {\n      window.addEventListener('online', function () {\n        if (!_this.online_) {\n          _this.online_ = true;\n          _this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', function () {\n        if (_this.online_) {\n          _this.online_ = false;\n          _this.trigger('online', false);\n        }\n      }, false);\n    }\n    return _this;\n  }\n  OnlineMonitor.getInstance = function () {\n    return new OnlineMonitor();\n  };\n  OnlineMonitor.prototype.getInitialEvent = function (eventType) {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  };\n  OnlineMonitor.prototype.currentlyOnline = function () {\n    return this.online_;\n  };\n  return OnlineMonitor;\n}(EventEmitter);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Maximum key depth. */\nvar MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nvar MAX_PATH_LENGTH_BYTES = 768;\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\nvar Path = /** @class */function () {\n  /**\r\n   * @param pathOrString - Path string to parse, or another path, or the raw\r\n   * tokens array\r\n   */\n  function Path(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/');\n      // Remove empty pieces.\n      var copyTo = 0;\n      for (var i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n  Path.prototype.toString = function () {\n    var pathString = '';\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n    return pathString || '/';\n  };\n  return Path;\n}();\nfunction newEmptyPath() {\n  return new Path('');\n}\nfunction pathGetFront(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  return path.pieces_[path.pieceNum_];\n}\n/**\r\n * @returns The number of segments in this path\r\n */\nfunction pathGetLength(path) {\n  return path.pieces_.length - path.pieceNum_;\n}\nfunction pathPopFront(path) {\n  var pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\nfunction pathGetBack(path) {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n  return null;\n}\nfunction pathToUrlEncodedString(path) {\n  var pathString = '';\n  for (var i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n  return pathString || '/';\n}\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\nfunction pathSlice(path, begin) {\n  if (begin === void 0) {\n    begin = 0;\n  }\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\nfunction pathParent(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  var pieces = [];\n  for (var i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  return new Path(pieces, 0);\n}\nfunction pathChild(path, childPathObj) {\n  var pieces = [];\n  for (var i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  if (childPathObj instanceof Path) {\n    for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    var childPieces = childPathObj.split('/');\n    for (var i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n  return new Path(pieces, 0);\n}\n/**\r\n * @returns True if there are no segments in this path\r\n */\nfunction pathIsEmpty(path) {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\nfunction newRelativePath(outerPath, innerPath) {\n  var outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n  }\n}\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\nfunction pathCompare(left, right) {\n  var leftKeys = pathSlice(left, 0);\n  var rightKeys = pathSlice(right, 0);\n  for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    var cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\r\n * @returns true if paths are the same.\r\n */\nfunction pathEquals(path, other) {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n  for (var i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\nfunction pathContains(path, other) {\n  var i = path.pieceNum_;\n  var j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\nvar ValidationPath = /** @class */function () {\n  /**\r\n   * @param path - Initial Path.\r\n   * @param errorPrefix_ - Prefix for any error messages.\r\n   */\n  function ValidationPath(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n    for (var i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n  return ValidationPath;\n}();\nfunction validationPathPush(validationPath, child) {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\nfunction validationPathPop(validationPath) {\n  var last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\nfunction validationPathCheckValid(validationPath) {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));\n  }\n}\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\nfunction validationPathToErrorString(validationPath) {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar VisibilityMonitor = /** @class */function (_super) {\n  __extends(VisibilityMonitor, _super);\n  function VisibilityMonitor() {\n    var _this = _super.call(this, ['visible']) || this;\n    var hidden;\n    var visibilityChange;\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    _this.visible_ = true;\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, function () {\n        var visible = !document[hidden];\n        if (visible !== _this.visible_) {\n          _this.visible_ = visible;\n          _this.trigger('visible', visible);\n        }\n      }, false);\n    }\n    return _this;\n  }\n  VisibilityMonitor.getInstance = function () {\n    return new VisibilityMonitor();\n  };\n  VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  };\n  return VisibilityMonitor;\n}(EventEmitter);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar RECONNECT_MIN_DELAY = 1000;\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nvar GET_CONNECT_TIMEOUT = 3 * 1000;\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nvar INVALID_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\nvar PersistentConnection = /** @class */function (_super) {\n  __extends(PersistentConnection, _super);\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param applicationId_ - The Firebase App ID for this project\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  function PersistentConnection(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n    var _this = _super.call(this) || this;\n    _this.repoInfo_ = repoInfo_;\n    _this.applicationId_ = applicationId_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.onConnectStatus_ = onConnectStatus_;\n    _this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    _this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    _this.authOverride_ = authOverride_;\n    // Used for diagnostic logging.\n    _this.id = PersistentConnection.nextPersistentConnectionId_++;\n    _this.log_ = logWrapper('p:' + _this.id + ':');\n    _this.interruptReasons_ = {};\n    _this.listens = new Map();\n    _this.outstandingPuts_ = [];\n    _this.outstandingGets_ = [];\n    _this.outstandingPutCount_ = 0;\n    _this.outstandingGetCount_ = 0;\n    _this.onDisconnectRequestQueue_ = [];\n    _this.connected_ = false;\n    _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    _this.securityDebugCallback_ = null;\n    _this.lastSessionId = null;\n    _this.establishConnectionTimer_ = null;\n    _this.visible_ = false;\n    // Before we get connected, we keep a queue of pending messages to send.\n    _this.requestCBHash_ = {};\n    _this.requestNumber_ = 0;\n    _this.realtime_ = null;\n    _this.authToken_ = null;\n    _this.appCheckToken_ = null;\n    _this.forceTokenRefresh_ = false;\n    _this.invalidAuthTokenCount_ = 0;\n    _this.invalidAppCheckTokenCount_ = 0;\n    _this.firstConnection_ = true;\n    _this.lastConnectionAttemptTime_ = null;\n    _this.lastConnectionEstablishedTime_ = null;\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n    VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\n    }\n    return _this;\n  }\n  PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\n    var curReqNum = ++this.requestNumber_;\n    var msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(stringify(msg));\n    assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  };\n  PersistentConnection.prototype.get = function (query) {\n    var _this = this;\n    this.initConnection_();\n    var deferred = new Deferred();\n    var request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    var outstandingGet = {\n      action: 'g',\n      request: request,\n      onComplete: function (message) {\n        var payload = message['d'];\n        if (message['s'] === 'ok') {\n          _this.onDataUpdate_(request['p'], payload, /*isMerge*/false, /*tag*/null);\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    var index = this.outstandingGets_.length - 1;\n    if (!this.connected_) {\n      setTimeout(function () {\n        var get = _this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete _this.outstandingGets_[index];\n        _this.outstandingGetCount_--;\n        if (_this.outstandingGetCount_ === 0) {\n          _this.outstandingGets_ = [];\n        }\n        _this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n    return deferred.promise;\n  };\n  PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    this.initConnection_();\n    var queryId = query._queryIdentifier;\n    var pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n    assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\n    var listenSpec = {\n      onComplete: onComplete,\n      hashFn: currentHashFn,\n      query: query,\n      tag: tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  };\n  PersistentConnection.prototype.sendGet_ = function (index) {\n    var _this = this;\n    var get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, function (message) {\n      delete _this.outstandingGets_[index];\n      _this.outstandingGetCount_--;\n      if (_this.outstandingGetCount_ === 0) {\n        _this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  };\n  PersistentConnection.prototype.sendListen_ = function (listenSpec) {\n    var _this = this;\n    var query = listenSpec.query;\n    var pathString = query._path.toString();\n    var queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/p: pathString\n    };\n    var action = 'q';\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n    req[/*hash*/'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, function (message) {\n      var payload = message[/*data*/'d'];\n      var status = message[/*status*/'s'];\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n      var currentListenSpec = _this.listens.get(pathString) && _this.listens.get(pathString).get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        _this.log_('listen response', message);\n        if (status !== 'ok') {\n          _this.removeListen_(pathString, queryId);\n        }\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  };\n  PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var warnings = safeGet(payload, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        var indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        var indexPath = query._path.toString();\n        warn(\"Using an unspecified index. Your data will be downloaded and \" + (\"filtered on the client. Consider adding \" + indexSpec + \" at \") + (indexPath + \" to your security rules for better performance.\"));\n      }\n    }\n  };\n  PersistentConnection.prototype.refreshAuthToken = function (token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, function () {});\n      }\n    }\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  };\n  PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    var isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  };\n  PersistentConnection.prototype.refreshAppCheckToken = function (token) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, function () {});\n      }\n    }\n  };\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n  PersistentConnection.prototype.tryAuth = function () {\n    var _this = this;\n    if (this.connected_ && this.authToken_) {\n      var token_1 = this.authToken_;\n      var authMethod = isValidFormat(token_1) ? 'auth' : 'gauth';\n      var requestData = {\n        cred: token_1\n      };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(authMethod, requestData, function (res) {\n        var status = res[/*status*/'s'];\n        var data = res[/*data*/'d'] || 'error';\n        if (_this.authToken_ === token_1) {\n          if (status === 'ok') {\n            _this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            _this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  };\n  /**\r\n   * Attempts to authenticate with the given token. If the authentication\r\n   * attempt fails, it's triggered like the token was revoked (the connection is\r\n   * closed).\r\n   */\n  PersistentConnection.prototype.tryAppCheck = function () {\n    var _this = this;\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest('appcheck', {\n        'token': this.appCheckToken_\n      }, function (res) {\n        var status = res[/*status*/'s'];\n        var data = res[/*data*/'d'] || 'error';\n        if (status === 'ok') {\n          _this.invalidAppCheckTokenCount_ = 0;\n        } else {\n          _this.onAppCheckRevoked_(status, data);\n        }\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n  PersistentConnection.prototype.unlisten = function (query, tag) {\n    var pathString = query._path.toString();\n    var queryId = query._queryIdentifier;\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n    var listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  };\n  PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/p: pathString\n    };\n    var action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n    this.sendRequest(action, req);\n  };\n  PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'o',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'om',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'oc',\n        data: null,\n        onComplete: onComplete\n      });\n    }\n  };\n  PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\n    var request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, function (response) {\n      if (onComplete) {\n        setTimeout(function () {\n          onComplete(response[/*status*/'s'], response[/* data */'d']);\n        }, Math.floor(0));\n      }\n    });\n  };\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  };\n  PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  };\n  PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\n    this.initConnection_();\n    var request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    if (hash !== undefined) {\n      request[/*hash*/'h'] = hash;\n    }\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action: action,\n      request: request,\n      onComplete: onComplete\n    });\n    this.outstandingPutCount_++;\n    var index = this.outstandingPuts_.length - 1;\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  };\n  PersistentConnection.prototype.sendPut_ = function (index) {\n    var _this = this;\n    var action = this.outstandingPuts_[index].action;\n    var request = this.outstandingPuts_[index].request;\n    var onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, function (message) {\n      _this.log_(action + ' response', message);\n      delete _this.outstandingPuts_[index];\n      _this.outstandingPutCount_--;\n      // Clean up array occasionally.\n      if (_this.outstandingPutCount_ === 0) {\n        _this.outstandingPuts_ = [];\n      }\n      if (onComplete) {\n        onComplete(message[/*status*/'s'], message[/* data */'d']);\n      }\n    });\n  };\n  PersistentConnection.prototype.reportStats = function (stats) {\n    var _this = this;\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      var request = {\n        /*counters*/c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest( /*stats*/'s', request, function (result) {\n        var status = result[/*status*/'s'];\n        if (status !== 'ok') {\n          var errorReason = result[/* data */'d'];\n          _this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  };\n  PersistentConnection.prototype.onDataMessage_ = function (message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      var reqNum = message['r'];\n      var onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  };\n  PersistentConnection.prototype.onDataPush_ = function (action, body) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge*/false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge=*/true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[/*path*/'p'], body[/*query*/'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + stringify(action) + '\\nAre you using the latest client?');\n    }\n  };\n  PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  };\n  PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\n    var _this = this;\n    assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n    this.establishConnectionTimer_ = setTimeout(function () {\n      _this.establishConnectionTimer_ = null;\n      _this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout));\n  };\n  PersistentConnection.prototype.initConnection_ = function () {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  };\n  PersistentConnection.prototype.onVisible_ = function (visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  };\n  PersistentConnection.prototype.onOnline_ = function (online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  };\n  PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n      var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n    this.onConnectStatus_(false);\n  };\n  PersistentConnection.prototype.establishConnection_ = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var onDataMessage, onReady, onDisconnect_1, connId, lastSessionId, canceled_1, connection_1, closeFn, sendRequestFn, forceRefresh, _a, authToken, appCheckToken, error_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!this.shouldReconnect_()) return [3 /*break*/, 4];\n            this.log_('Making a connection attempt');\n            this.lastConnectionAttemptTime_ = new Date().getTime();\n            this.lastConnectionEstablishedTime_ = null;\n            onDataMessage = this.onDataMessage_.bind(this);\n            onReady = this.onReady_.bind(this);\n            onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\n            connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n            lastSessionId = this.lastSessionId;\n            canceled_1 = false;\n            connection_1 = null;\n            closeFn = function () {\n              if (connection_1) {\n                connection_1.close();\n              } else {\n                canceled_1 = true;\n                onDisconnect_1();\n              }\n            };\n            sendRequestFn = function (msg) {\n              assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\n              connection_1.sendRequest(msg);\n            };\n            this.realtime_ = {\n              close: closeFn,\n              sendRequest: sendRequestFn\n            };\n            forceRefresh = this.forceTokenRefresh_;\n            this.forceTokenRefresh_ = false;\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, Promise.all([this.authTokenProvider_.getToken(forceRefresh), this.appCheckTokenProvider_.getToken(forceRefresh)])];\n          case 2:\n            _a = __read.apply(void 0, [_b.sent(), 2]), authToken = _a[0], appCheckToken = _a[1];\n            if (!canceled_1) {\n              log('getToken() completed. Creating connection.');\n              this.authToken_ = authToken && authToken.accessToken;\n              this.appCheckToken_ = appCheckToken && appCheckToken.token;\n              connection_1 = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect_1, /* onKill= */function (reason) {\n                warn(reason + ' (' + _this.repoInfo_.toString() + ')');\n                _this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              }, lastSessionId);\n            } else {\n              log('getToken() completed but was canceled');\n            }\n            return [3 /*break*/, 4];\n          case 3:\n            error_1 = _b.sent();\n            this.log_('Failed to get token: ' + error_1);\n            if (!canceled_1) {\n              if (this.repoInfo_.nodeAdmin) {\n                // This may be a critical error for the Admin Node.js SDK, so log a warning.\n                // But getToken() may also just have temporarily failed, so we still want to\n                // continue retrying.\n                warn(error_1);\n              }\n              closeFn();\n            }\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  PersistentConnection.prototype.interrupt = function (reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  };\n  PersistentConnection.prototype.resume = function (reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  };\n  PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\n    var delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  };\n  PersistentConnection.prototype.cancelSentTransactions_ = function () {\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      var put = this.outstandingPuts_[i];\n      if (put && /*hash*/'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  };\n  PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    var queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(function (q) {\n        return ObjectToUniqueKey(q);\n      }).join('$');\n    }\n    var listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  };\n  PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\n    var normalizedPathString = new Path(pathString).toString(); // normalize path.\n    var listen;\n    if (this.listens.has(normalizedPathString)) {\n      var map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  };\n  PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  };\n  PersistentConnection.prototype.onAppCheckRevoked_ = function (statusCode, explanation) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  };\n  PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  };\n  PersistentConnection.prototype.restoreState_ = function () {\n    var e_1, _a, e_2, _b;\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n    try {\n      // Puts depend on having received the corresponding data update from the server before they complete, so we must\n      // make sure to send listens before puts.\n      for (var _c = __values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var queries = _d.value;\n        try {\n          for (var _e = (e_2 = void 0, __values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var listenSpec = _f.value;\n            this.sendListen_(listenSpec);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n    while (this.onDisconnectRequestQueue_.length) {\n      var request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n    for (var i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  };\n  /**\r\n   * Sends client stats for first connection\r\n   */\n  PersistentConnection.prototype.sendConnectStats_ = function () {\n    var stats = {};\n    var clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  };\n  PersistentConnection.prototype.shouldReconnect_ = function () {\n    var online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  };\n  PersistentConnection.nextPersistentConnectionId_ = 0;\n  /**\r\n   * Counter for number of connections created. Mainly used for tagging in the logs\r\n   */\n  PersistentConnection.nextConnectionId_ = 0;\n  return PersistentConnection;\n}(ServerActions);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar NamedNode = /** @class */function () {\n  function NamedNode(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n  NamedNode.Wrap = function (name, node) {\n    return new NamedNode(name, node);\n  };\n  return NamedNode;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Index = /** @class */function () {\n  function Index() {}\n  /**\r\n   * @returns A standalone comparison function for\r\n   * this index\r\n   */\n  Index.prototype.getCompare = function () {\n    return this.compare.bind(this);\n  };\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   *\r\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n  Index.prototype.indexedValueChanged = function (oldNode, newNode) {\n    var oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    var newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  };\n  /**\r\n   * @returns a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n  Index.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  return Index;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __EMPTY_NODE;\nvar KeyIndex = /** @class */function (_super) {\n  __extends(KeyIndex, _super);\n  function KeyIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\n    get: function () {\n      return __EMPTY_NODE;\n    },\n    set: function (val) {\n      __EMPTY_NODE = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  KeyIndex.prototype.compare = function (a, b) {\n    return nameCompare(a.name, b.name);\n  };\n  KeyIndex.prototype.isDefinedOn = function (node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  };\n  KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return false; // The key for a node never changes.\n  };\n\n  KeyIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  KeyIndex.prototype.maxPost = function () {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  };\n  KeyIndex.prototype.makePost = function (indexValue, name) {\n    assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  };\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  KeyIndex.prototype.toString = function () {\n    return '.key';\n  };\n  return KeyIndex;\n}(Index);\nvar KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An iterator over an LLRBNode.\r\n */\nvar SortedMapIterator = /** @class */function () {\n  /**\r\n   * @param node - Node to iterate.\r\n   * @param isReverse_ - Whether or not to iterate in reverse\r\n   */\n  function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\n    if (resultGenerator_ === void 0) {\n      resultGenerator_ = null;\n    }\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    this.nodeStack_ = [];\n    var cmp = 1;\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n  SortedMapIterator.prototype.getNext = function () {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    var node = this.nodeStack_.pop();\n    var result;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n    return result;\n  };\n  SortedMapIterator.prototype.hasNext = function () {\n    return this.nodeStack_.length > 0;\n  };\n  SortedMapIterator.prototype.peek = function () {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    var node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  };\n  return SortedMapIterator;\n}();\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\nvar LLRBNode = /** @class */function () {\n  /**\r\n   * @param key - Key associated with this node.\r\n   * @param value - Value associated with this node.\r\n   * @param color - Whether this node is red.\r\n   * @param left - Left child.\r\n   * @param right - Right child.\r\n   */\n  function LLRBNode(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param key - New key for the node, or null.\r\n   * @param value - New value for the node, or null.\r\n   * @param color - New color for the node, or null.\r\n   * @param left - New left child for the node, or null.\r\n   * @param right - New right child for the node, or null.\r\n   * @returns The node copy.\r\n   */\n  LLRBNode.prototype.copy = function (key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  };\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n  LLRBNode.prototype.count = function () {\n    return this.left.count() + 1 + this.right.count();\n  };\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n  LLRBNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n  LLRBNode.prototype.inorderTraversal = function (action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  LLRBNode.prototype.reverseTraversal = function (action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  };\n  /**\r\n   * @returns The minimum node in the tree.\r\n   */\n  LLRBNode.prototype.min_ = function () {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  };\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n  LLRBNode.prototype.minKey = function () {\n    return this.min_().key;\n  };\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n  LLRBNode.prototype.maxKey = function () {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  };\n  /**\r\n   * @param key - Key to insert.\r\n   * @param value - Value to insert.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the key/value added.\r\n   */\n  LLRBNode.prototype.insert = function (key, value, comparator) {\n    var n = this;\n    var cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n    return n.fixUp_();\n  };\n  /**\r\n   * @returns New tree, with the minimum key removed.\r\n   */\n  LLRBNode.prototype.removeMin_ = function () {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n    var n = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  };\n  /**\r\n   * @param key - The key of the item to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the specified item removed.\r\n   */\n  LLRBNode.prototype.remove = function (key, comparator) {\n    var n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  };\n  /**\r\n   * @returns Whether this is a RED node.\r\n   */\n  LLRBNode.prototype.isRed_ = function () {\n    return this.color;\n  };\n  /**\r\n   * @returns New tree after performing any needed rotations.\r\n   */\n  LLRBNode.prototype.fixUp_ = function () {\n    var n = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  };\n  /**\r\n   * @returns New tree, after moveRedLeft.\r\n   */\n  LLRBNode.prototype.moveRedLeft_ = function () {\n    var n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  };\n  /**\r\n   * @returns New tree, after moveRedRight.\r\n   */\n  LLRBNode.prototype.moveRedRight_ = function () {\n    var n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  };\n  /**\r\n   * @returns New tree, after rotateLeft.\r\n   */\n  LLRBNode.prototype.rotateLeft_ = function () {\n    var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  };\n  /**\r\n   * @returns New tree, after rotateRight.\r\n   */\n  LLRBNode.prototype.rotateRight_ = function () {\n    var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  };\n  /**\r\n   * @returns Newt ree, after colorFlip.\r\n   */\n  LLRBNode.prototype.colorFlip_ = function () {\n    var left = this.left.copy(null, null, !this.left.color, null, null);\n    var right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  };\n  /**\r\n   * For testing.\r\n   *\r\n   * @returns True if all is well.\r\n   */\n  LLRBNode.prototype.checkMaxDepth_ = function () {\n    var blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  };\n  LLRBNode.prototype.check_ = function () {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    var blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  };\n  LLRBNode.RED = true;\n  LLRBNode.BLACK = false;\n  return LLRBNode;\n}();\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\nvar LLRBEmptyNode = /** @class */function () {\n  function LLRBEmptyNode() {}\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @returns The node copy.\r\n   */\n  LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n    return this;\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item added.\r\n   */\n  LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item removed.\r\n   */\n  LLRBEmptyNode.prototype.remove = function (key, comparator) {\n    return this;\n  };\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n  LLRBEmptyNode.prototype.count = function () {\n    return 0;\n  };\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n  LLRBEmptyNode.prototype.isEmpty = function () {\n    return true;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n    return false;\n  };\n  LLRBEmptyNode.prototype.minKey = function () {\n    return null;\n  };\n  LLRBEmptyNode.prototype.maxKey = function () {\n    return null;\n  };\n  LLRBEmptyNode.prototype.check_ = function () {\n    return 0;\n  };\n  /**\r\n   * @returns Whether this node is red.\r\n   */\n  LLRBEmptyNode.prototype.isRed_ = function () {\n    return false;\n  };\n  return LLRBEmptyNode;\n}();\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\nvar SortedMap = /** @class */function () {\n  /**\r\n   * @param comparator_ - Key comparator.\r\n   * @param root_ - Optional root node for the map.\r\n   */\n  function SortedMap(comparator_, root_) {\n    if (root_ === void 0) {\n      root_ = SortedMap.EMPTY_NODE;\n    }\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @returns New map, with item added.\r\n   */\n  SortedMap.prototype.insert = function (key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @returns New map, with item removed.\r\n   */\n  SortedMap.prototype.remove = function (key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param key - The key to look up.\r\n   * @returns The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n  SortedMap.prototype.get = function (key) {\n    var cmp;\n    var node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  };\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param key - The key to find the predecessor of\r\n   * @returns The predecessor key.\r\n   */\n  SortedMap.prototype.getPredecessorKey = function (key) {\n    var cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  };\n  /**\r\n   * @returns True if the map is empty.\r\n   */\n  SortedMap.prototype.isEmpty = function () {\n    return this.root_.isEmpty();\n  };\n  /**\r\n   * @returns The total number of nodes in the map.\r\n   */\n  SortedMap.prototype.count = function () {\n    return this.root_.count();\n  };\n  /**\r\n   * @returns The minimum key in the map.\r\n   */\n  SortedMap.prototype.minKey = function () {\n    return this.root_.minKey();\n  };\n  /**\r\n   * @returns The maximum key in the map.\r\n   */\n  SortedMap.prototype.maxKey = function () {\n    return this.root_.maxKey();\n  };\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n  SortedMap.prototype.inorderTraversal = function (action) {\n    return this.root_.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns True if the traversal was aborted.\r\n   */\n  SortedMap.prototype.reverseTraversal = function (action) {\n    return this.root_.reverseTraversal(action);\n  };\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @returns The iterator.\r\n   */\n  SortedMap.prototype.getIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  };\n  SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  };\n  SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  };\n  SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  };\n  /**\r\n   * Always use the same empty node, to reduce memory.\r\n   */\n  SortedMap.EMPTY_NODE = new LLRBEmptyNode();\n  return SortedMap;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar MAX_NODE$2;\nfunction setMaxNode$1(val) {\n  MAX_NODE$2 = val;\n}\nvar priorityHashText = function (priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\nvar validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    var val = priorityNode.val();\n    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\nvar LeafNode = /** @class */function () {\n  /**\r\n   * @param value_ - The value to store in this leaf node. The object type is\r\n   * possible in the event of a deferred value\r\n   * @param priorityNode_ - The priority of this node.\r\n   */\n  function LeafNode(value_, priorityNode_) {\n    if (priorityNode_ === void 0) {\n      priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n  Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\n    get: function () {\n      return __childrenNodeConstructor;\n    },\n    set: function (val) {\n      __childrenNodeConstructor = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @inheritDoc */\n  LeafNode.prototype.isLeafNode = function () {\n    return true;\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.getPriority = function () {\n    return this.priorityNode_;\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.updatePriority = function (newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.getChild = function (path) {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  LeafNode.prototype.hasChild = function () {\n    return false;\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\n    return null;\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.updateChild = function (path, newChildNode) {\n    var front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n    }\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.numChildren = function () {\n    return 0;\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.forEachChild = function (index, action) {\n    return false;\n  };\n  LeafNode.prototype.val = function (exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  };\n  /** @inheritDoc */\n  LeafNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n      var type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  };\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @returns The value of the node.\r\n   */\n  LeafNode.prototype.getValue = function () {\n    return this.value_;\n  };\n  LeafNode.prototype.compareTo = function (other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  };\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   */\n  LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\n    var otherLeafType = typeof otherLeaf.value_;\n    var thisLeafType = typeof this.value_;\n    var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  };\n  LeafNode.prototype.withIndex = function () {\n    return this;\n  };\n  LeafNode.prototype.isIndexed = function () {\n    return true;\n  };\n  LeafNode.prototype.equals = function (other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      var otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n   * the same type, the comparison falls back to their value\r\n   */\n  LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n  return LeafNode;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar nodeFromJSON$1;\nvar MAX_NODE$1;\nfunction setNodeFromJSON(val) {\n  nodeFromJSON$1 = val;\n}\nfunction setMaxNode(val) {\n  MAX_NODE$1 = val;\n}\nvar PriorityIndex = /** @class */function (_super) {\n  __extends(PriorityIndex, _super);\n  function PriorityIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PriorityIndex.prototype.compare = function (a, b) {\n    var aPriority = a.node.getPriority();\n    var bPriority = b.node.getPriority();\n    var indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  PriorityIndex.prototype.isDefinedOn = function (node) {\n    return !node.getPriority().isEmpty();\n  };\n  PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  };\n  PriorityIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  PriorityIndex.prototype.maxPost = function () {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  };\n  PriorityIndex.prototype.makePost = function (indexValue, name) {\n    var priorityNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  };\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  PriorityIndex.prototype.toString = function () {\n    return '.priority';\n  };\n  return PriorityIndex;\n}(Index);\nvar PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar LOG_2 = Math.log(2);\nvar Base12Num = /** @class */function () {\n  function Base12Num(length) {\n    var logBase2 = function (num) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return parseInt(Math.log(num) / LOG_2, 10);\n    };\n    var bitMask = function (bits) {\n      return parseInt(Array(bits + 1).join('1'), 2);\n    };\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    var mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n  Base12Num.prototype.nextBitIsOne = function () {\n    //noinspection JSBitwiseOperatorUsage\n    var result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  };\n  return Base12Num;\n}();\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n  var buildBalancedTree = function (low, high) {\n    var length = high - low;\n    var namedNode;\n    var key;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var middle = parseInt(length / 2, 10) + low;\n      var left = buildBalancedTree(low, middle);\n      var right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n  var buildFrom12Array = function (base12) {\n    var node = null;\n    var root = null;\n    var index = childList.length;\n    var buildPennant = function (chunkSize, color) {\n      var low = index - chunkSize;\n      var high = index;\n      index -= chunkSize;\n      var childTree = buildBalancedTree(low + 1, high);\n      var namedNode = childList[low];\n      var key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n    var attachPennant = function (pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n    for (var i = 0; i < base12.count; ++i) {\n      var isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      var chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n  var base12 = new Base12Num(childList.length);\n  var root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap(mapSortFn || cmp, root);\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _defaultIndexMap;\nvar fallbackObject = {};\nvar IndexMap = /** @class */function () {\n  function IndexMap(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n  Object.defineProperty(IndexMap, \"Default\", {\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\n    get: function () {\n      assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n      _defaultIndexMap = _defaultIndexMap || new IndexMap({\n        '.priority': fallbackObject\n      }, {\n        '.priority': PRIORITY_INDEX\n      });\n      return _defaultIndexMap;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  IndexMap.prototype.get = function (indexKey) {\n    var sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  };\n  IndexMap.prototype.hasIndex = function (indexDefinition) {\n    return contains(this.indexSet_, indexDefinition.toString());\n  };\n  IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\n    assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    var childList = [];\n    var sawIndexedValue = false;\n    var iter = existingChildren.getIterator(NamedNode.Wrap);\n    var next = iter.getNext();\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    var newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    var indexName = indexDefinition.toString();\n    var newIndexSet = __assign({}, this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    var newIndexes = __assign({}, this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  };\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n  IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\n    var _this = this;\n    var newIndexes = map(this.indexes_, function (indexedChildren, indexName) {\n      var index = safeGet(_this.indexSet_, indexName);\n      assert(index, 'Missing index implementation for ' + indexName);\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          var childList = [];\n          var iter = existingChildren.getIterator(NamedNode.Wrap);\n          var next = iter.getNext();\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n            next = iter.getNext();\n          }\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n        var newChildren = indexedChildren;\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n  IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\n    var newIndexes = map(this.indexes_, function (indexedChildren) {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n  return IndexMap;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nvar EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\nvar ChildrenNode = /** @class */function () {\n  /**\r\n   * @param children_ - List of children of this node..\r\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n   */\n  function ChildrenNode(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n    if (this.children_.isEmpty()) {\n      assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n  Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\n    get: function () {\n      return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @inheritDoc */\n  ChildrenNode.prototype.isLeafNode = function () {\n    return false;\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.getPriority = function () {\n    return this.priorityNode_ || EMPTY_NODE;\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      var child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.getChild = function (path) {\n    var front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.hasChild = function (childName) {\n    return this.children_.get(childName) !== null;\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      var namedNode = new NamedNode(childName, newChildNode);\n      var newChildren = void 0,\n        newIndexMap = void 0;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n      var newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.updateChild = function (path, newChildNode) {\n    var front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      var newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.isEmpty = function () {\n    return this.children_.isEmpty();\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.numChildren = function () {\n    return this.children_.count();\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.val = function (exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n    var obj = {};\n    var numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      var array = [];\n      // eslint-disable-next-line guard-for-in\n      for (var key in obj) {\n        array[key] = obj[key];\n      }\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash_1 = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash_1 += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n      this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        var childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash_1 += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\n    }\n    return this.lazyHash_;\n  };\n  /** @inheritDoc */\n  ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\n    var idx = this.resolveIndex_(index);\n    if (idx) {\n      var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  };\n  ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      var minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  };\n  ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\n    var minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   */\n  ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      var maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  };\n  ChildrenNode.prototype.getLastChild = function (indexDefinition) {\n    var maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  };\n  ChildrenNode.prototype.forEachChild = function (index, action) {\n    var idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(function (wrappedNode) {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  };\n  ChildrenNode.prototype.getIterator = function (indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  };\n  ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  };\n  ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  };\n  ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  };\n  ChildrenNode.prototype.compareTo = function (other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  };\n  ChildrenNode.prototype.withIndex = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  };\n  ChildrenNode.prototype.isIndexed = function (index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  };\n  ChildrenNode.prototype.equals = function (other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      var otherChildrenNode = other;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        var thisIter = this.getIterator(PRIORITY_INDEX);\n        var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        var thisCurrent = thisIter.getNext();\n        var otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  };\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   */\n  ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  };\n  ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n  return ChildrenNode;\n}();\nvar MaxNode = /** @class */function (_super) {\n  __extends(MaxNode, _super);\n  function MaxNode() {\n    return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\n  }\n  MaxNode.prototype.compareTo = function (other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n  MaxNode.prototype.equals = function (other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  };\n  MaxNode.prototype.getPriority = function () {\n    return this;\n  };\n  MaxNode.prototype.getImmediateChild = function (childName) {\n    return ChildrenNode.EMPTY_NODE;\n  };\n  MaxNode.prototype.isEmpty = function () {\n    return false;\n  };\n  return MaxNode;\n}(ChildrenNode);\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\nvar MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\nfunction nodeFromJSON(json, priority) {\n  if (priority === void 0) {\n    priority = null;\n  }\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n  assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    var jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n  if (!(json instanceof Array) && USE_HINZE) {\n    var children_1 = [];\n    var childrenHavePriority_1 = false;\n    var hinzeJsonObj = json;\n    each(hinzeJsonObj, function (key, child) {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        var childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();\n          children_1.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n    if (children_1.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n    var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) {\n      return namedNode.name;\n    }, NAME_COMPARATOR);\n    if (childrenHavePriority_1) {\n      var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n    }\n  } else {\n    var node_1 = ChildrenNode.EMPTY_NODE;\n    each(json, function (key, childData) {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          var childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node_1 = node_1.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node_1.updatePriority(nodeFromJSON(priority));\n  }\n}\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PathIndex = /** @class */function (_super) {\n  __extends(PathIndex, _super);\n  function PathIndex(indexPath_) {\n    var _this = _super.call(this) || this;\n    _this.indexPath_ = indexPath_;\n    assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    return _this;\n  }\n  PathIndex.prototype.extractChild = function (snap) {\n    return snap.getChild(this.indexPath_);\n  };\n  PathIndex.prototype.isDefinedOn = function (node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  };\n  PathIndex.prototype.compare = function (a, b) {\n    var aChild = this.extractChild(a.node);\n    var bChild = this.extractChild(b.node);\n    var indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  PathIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON(indexValue);\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  };\n  PathIndex.prototype.maxPost = function () {\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  };\n  PathIndex.prototype.toString = function () {\n    return pathSlice(this.indexPath_, 0).join('/');\n  };\n  return PathIndex;\n}(Index);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ValueIndex = /** @class */function (_super) {\n  __extends(ValueIndex, _super);\n  function ValueIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ValueIndex.prototype.compare = function (a, b) {\n    var indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  ValueIndex.prototype.isDefinedOn = function (node) {\n    return true;\n  };\n  ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  };\n  ValueIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  ValueIndex.prototype.maxPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  };\n  ValueIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  };\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  ValueIndex.prototype.toString = function () {\n    return '.value';\n  };\n  return ValueIndex;\n}(Index);\nvar VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nvar PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nvar MIN_PUSH_CHAR = '-';\nvar MAX_PUSH_CHAR = 'z';\nvar MAX_KEY_LEN = 786;\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\nvar nextPushId = function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  var lastPushTime = 0;\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  var lastRandChars = [];\n  return function (now) {\n    var duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    var i;\n    var timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n    var id = timeStampChars.join('');\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\nvar successor = function (key) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  var keyAsInt = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  var next = new Array(key.length);\n  for (var i_1 = 0; i_1 < next.length; i_1++) {\n    next[i_1] = key.charAt(i_1);\n  }\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n  var i = next.length - 1;\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n  var source = next[i];\n  var sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n  return next.slice(0, i + 1).join('');\n};\n// `key` is assumed to be non-empty.\nvar predecessor = function (key) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  var keyAsInt = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  var next = new Array(key.length);\n  for (var i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction changeValue(snapshotNode) {\n  return {\n    type: \"value\" /* VALUE */,\n    snapshotNode: snapshotNode\n  };\n}\nfunction changeChildAdded(childName, snapshotNode) {\n  return {\n    type: \"child_added\" /* CHILD_ADDED */,\n    snapshotNode: snapshotNode,\n    childName: childName\n  };\n}\nfunction changeChildRemoved(childName, snapshotNode) {\n  return {\n    type: \"child_removed\" /* CHILD_REMOVED */,\n    snapshotNode: snapshotNode,\n    childName: childName\n  };\n}\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n  return {\n    type: \"child_changed\" /* CHILD_CHANGED */,\n    snapshotNode: snapshotNode,\n    childName: childName,\n    oldSnap: oldSnap\n  };\n}\nfunction changeChildMoved(childName, snapshotNode) {\n  return {\n    type: \"child_moved\" /* CHILD_MOVED */,\n    snapshotNode: snapshotNode,\n    childName: childName\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\nvar IndexedFilter = /** @class */function () {\n  function IndexedFilter(index_) {\n    this.index_ = index_;\n  }\n  IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    var oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n        } else {\n          assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  };\n  IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (oldSnap.hasChild(key)) {\n            var oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  };\n  IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  };\n  IndexedFilter.prototype.filtersNodes = function () {\n    return false;\n  };\n  IndexedFilter.prototype.getIndexedFilter = function () {\n    return this;\n  };\n  IndexedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  return IndexedFilter;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\nvar RangedFilter = /** @class */function () {\n  function RangedFilter(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n  RangedFilter.prototype.getStartPost = function () {\n    return this.startPost_;\n  };\n  RangedFilter.prototype.getEndPost = function () {\n    return this.endPost_;\n  };\n  RangedFilter.prototype.matches = function (node) {\n    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n  };\n  RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  };\n  RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    var filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    var self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  RangedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  RangedFilter.prototype.getIndexedFilter = function () {\n    return this.indexedFilter_;\n  };\n  RangedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  RangedFilter.getStartPost_ = function (params) {\n    if (params.hasStart()) {\n      var startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  };\n  RangedFilter.getEndPost_ = function (params) {\n    if (params.hasEnd()) {\n      var endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  };\n  return RangedFilter;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\nvar LimitedFilter = /** @class */function () {\n  function LimitedFilter(params) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  };\n  LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    var filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        var iterator = void 0;\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n        var count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          var next = iterator.getNext();\n          var inRange = void 0;\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        var startPost = void 0;\n        var endPost = void 0;\n        var cmp = void 0;\n        var iterator = void 0;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          var indexCompare_1 = this.index_.getCompare();\n          cmp = function (a, b) {\n            return indexCompare_1(b, a);\n          };\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n        var count = 0;\n        var foundStartPost = false;\n        while (iterator.hasNext()) {\n          var next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  LimitedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  LimitedFilter.prototype.getIndexedFilter = function () {\n    return this.rangedFilter_.getIndexedFilter();\n  };\n  LimitedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    var cmp;\n    if (this.reverse_) {\n      var indexCmp_1 = this.index_.getCompare();\n      cmp = function (a, b) {\n        return indexCmp_1(b, a);\n      };\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    var oldEventCache = snap;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    var newChildNamedNode = new NamedNode(childKey, childSnap);\n    var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    var inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      var oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n      var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n        }\n        var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n          }\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  };\n  return LimitedFilter;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n */\nvar QueryParams = /** @class */function () {\n  function QueryParams() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.startAfterSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.endBeforeSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n  QueryParams.prototype.hasStart = function () {\n    return this.startSet_;\n  };\n  QueryParams.prototype.hasStartAfter = function () {\n    return this.startAfterSet_;\n  };\n  QueryParams.prototype.hasEndBefore = function () {\n    return this.endBeforeSet_;\n  };\n  /**\r\n   * @returns True if it would return from left.\r\n   */\n  QueryParams.prototype.isViewFromLeft = function () {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\n    }\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   */\n  QueryParams.prototype.getIndexStartValue = function () {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   */\n  QueryParams.prototype.getIndexStartName = function () {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  };\n  QueryParams.prototype.hasEnd = function () {\n    return this.endSet_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   */\n  QueryParams.prototype.getIndexEndValue = function () {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   */\n  QueryParams.prototype.getIndexEndName = function () {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  };\n  QueryParams.prototype.hasLimit = function () {\n    return this.limitSet_;\n  };\n  /**\r\n   * @returns True if a limit has been set and it has been explicitly anchored\r\n   */\n  QueryParams.prototype.hasAnchoredLimit = function () {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  };\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   */\n  QueryParams.prototype.getLimit = function () {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  };\n  QueryParams.prototype.getIndex = function () {\n    return this.index_;\n  };\n  QueryParams.prototype.loadsAllData = function () {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  };\n  QueryParams.prototype.isDefault = function () {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  };\n  QueryParams.prototype.copy = function () {\n    var copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  };\n  return QueryParams;\n}();\nfunction queryParamsGetNodeFilter(queryParams) {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n  var newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\n  return newParams;\n}\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n  var newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\n  return newParams;\n}\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n  var newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n  var params;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    var childKey = void 0;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n  var newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n  var childKey;\n  var params;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\nfunction queryParamsOrderBy(queryParams, index) {\n  var newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n  var qs = {};\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n  var orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = \"$priority\" /* PRIORITY_INDEX */;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = \"$value\" /* VALUE_INDEX */;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = \"$key\" /* KEY_INDEX */;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\n  if (queryParams.startSet_) {\n    qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[\"startAt\" /* START_AT */] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n  if (queryParams.endSet_) {\n    qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[\"endAt\" /* END_AT */] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\n    } else {\n      qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\n    }\n  }\n  return qs;\n}\nfunction queryParamsGetQueryObject(queryParams) {\n  var obj = {};\n  if (queryParams.startSet_) {\n    obj[\"sp\" /* INDEX_START_VALUE */] = queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[\"sn\" /* INDEX_START_NAME */] = queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[\"l\" /* LIMIT */] = queryParams.limit_;\n    var viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = \"l\" /* VIEW_FROM_LEFT */;\n      } else {\n        viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\n      }\n    }\n\n    obj[\"vf\" /* VIEW_FROM */] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[\"i\" /* INDEX */] = queryParams.index_.toString();\n  }\n  return obj;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\nvar ReadonlyRestClient = /** @class */function (_super) {\n  __extends(ReadonlyRestClient, _super);\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n    var _this = _super.call(this) || this;\n    _this.repoInfo_ = repoInfo_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    _this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    /** @private {function(...[*])} */\n    _this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     */\n    _this.listens_ = {};\n    return _this;\n  }\n  ReadonlyRestClient.prototype.reportStats = function (stats) {\n    throw new Error('Method not implemented.');\n  };\n  ReadonlyRestClient.getListenId_ = function (query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n      return query._path.toString();\n    }\n  };\n  /** @inheritDoc */\n  ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var _this = this;\n    var pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n    // Mark this listener so we can tell if it's removed.\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    var thisListen = {};\n    this.listens_[listenId] = thisListen;\n    var queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\n      var data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        _this.onDataUpdate_(pathString, data, /*isMerge=*/false, tag);\n      }\n      if (safeGet(_this.listens_, listenId) === thisListen) {\n        var status_1;\n        if (!error) {\n          status_1 = 'ok';\n        } else if (error === 401) {\n          status_1 = 'permission_denied';\n        } else {\n          status_1 = 'rest_error:' + error;\n        }\n        onComplete(status_1, null);\n      }\n    });\n  };\n  /** @inheritDoc */\n  ReadonlyRestClient.prototype.unlisten = function (query, tag) {\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  };\n  ReadonlyRestClient.prototype.get = function (query) {\n    var _this = this;\n    var queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    var pathString = query._path.toString();\n    var deferred = new Deferred();\n    this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\n      var data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        _this.onDataUpdate_(pathString, data, /*isMerge=*/false, /*tag=*/null);\n        deferred.resolve(data);\n      } else {\n        deferred.reject(new Error(data));\n      }\n    });\n    return deferred.promise;\n  };\n  /** @inheritDoc */\n  ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\n    // no-op since we just always call getToken.\n  };\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   */\n  ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\n    var _this = this;\n    if (queryStringParameters === void 0) {\n      queryStringParameters = {};\n    }\n    queryStringParameters['format'] = 'export';\n    return Promise.all([this.authTokenProvider_.getToken( /*forceRefresh=*/false), this.appCheckTokenProvider_.getToken( /*forceRefresh=*/false)]).then(function (_a) {\n      var _b = __read(_a, 2),\n        authToken = _b[0],\n        appCheckToken = _b[1];\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n      var url = (_this.repoInfo_.secure ? 'https://' : 'http://') + _this.repoInfo_.host + pathString + '?' + 'ns=' + _this.repoInfo_.namespace + querystring(queryStringParameters);\n      _this.log_('Sending REST request for ' + url);\n      var xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = function () {\n        if (callback && xhr.readyState === 4) {\n          _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n          var res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n      xhr.open('GET', url, /*asynchronous=*/true);\n      xhr.send();\n    });\n  };\n  return ReadonlyRestClient;\n}(ServerActions);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\nvar SnapshotHolder = /** @class */function () {\n  function SnapshotHolder() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n  SnapshotHolder.prototype.getNode = function (path) {\n    return this.rootNode_.getChild(path);\n  };\n  SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  };\n  return SnapshotHolder;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newSparseSnapshotTree() {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    var childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n    var child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        var value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n        value.forEachChild(PRIORITY_INDEX, function (key, tree) {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      var childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        var safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, function (key, tree) {\n      var path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n  sparseSnapshotTree.children.forEach(function (tree, key) {\n    func(key, tree);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\nvar StatsListener = /** @class */function () {\n  function StatsListener(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n  StatsListener.prototype.get = function () {\n    var newStats = this.collection_.get();\n    var delta = __assign({}, newStats);\n    if (this.last_) {\n      each(this.last_, function (stat, value) {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n    return delta;\n  };\n  return StatsListener;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\nvar StatsReporter = /** @class */function () {\n  function StatsReporter(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n  StatsReporter.prototype.reportStats_ = function () {\n    var _this = this;\n    var stats = this.statsListener_.get();\n    var reportedStats = {};\n    var haveStatsToReport = false;\n    each(stats, function (stat, value) {\n      if (value > 0 && contains(_this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n    // queue our next run.\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  };\n  return StatsReporter;\n}();\nfunction statsReporterIncludeStat(reporter, stat) {\n  reporter.statsToReport_[stat] = true;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n *\r\n * @enum\r\n */\nvar OperationType;\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\nfunction newOperationSourceUser() {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServer() {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServerTaggedQuery(queryId) {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: queryId,\n    tagged: true\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar AckUserWrite = /** @class */function () {\n  /**\r\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n   */\n  function AckUserWrite( /** @inheritDoc */path, /** @inheritDoc */affectedTree, /** @inheritDoc */revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n    this.source = newOperationSourceUser();\n  }\n  AckUserWrite.prototype.operationForChild = function (childName) {\n    if (!pathIsEmpty(this.path)) {\n      assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      var childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  };\n  return AckUserWrite;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ListenComplete = /** @class */function () {\n  function ListenComplete(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n  ListenComplete.prototype.operationForChild = function (childName) {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  };\n  return ListenComplete;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Overwrite = /** @class */function () {\n  function Overwrite(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n    this.type = OperationType.OVERWRITE;\n  }\n  Overwrite.prototype.operationForChild = function (childName) {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  };\n  return Overwrite;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Merge = /** @class */function () {\n  function Merge( /** @inheritDoc */source, /** @inheritDoc */path, /** @inheritDoc */children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n    this.type = OperationType.MERGE;\n  }\n  Merge.prototype.operationForChild = function (childName) {\n    if (pathIsEmpty(this.path)) {\n      var childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  };\n  Merge.prototype.toString = function () {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  };\n  return Merge;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\nvar CacheNode = /** @class */function () {\n  function CacheNode(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   */\n  CacheNode.prototype.isFullyInitialized = function () {\n    return this.fullyInitialized_;\n  };\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   */\n  CacheNode.prototype.isFiltered = function () {\n    return this.filtered_;\n  };\n  CacheNode.prototype.isCompleteForPath = function (path) {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n    var childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  };\n  CacheNode.prototype.isCompleteForChild = function (key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  };\n  CacheNode.prototype.getNode = function () {\n    return this.node_;\n  };\n  return CacheNode;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\nvar EventGenerator = /** @class */function () {\n  function EventGenerator(query_) {\n    this.query_ = query_;\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n  return EventGenerator;\n}();\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n  var events = [];\n  var moves = [];\n  changes.forEach(function (change) {\n    if (change.type === \"child_changed\" /* CHILD_CHANGED */ && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\n  return events;\n}\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n  var filteredChanges = changes.filter(function (change) {\n    return change.type === eventType;\n  });\n  filteredChanges.sort(function (a, b) {\n    return eventGeneratorCompareChanges(eventGenerator, a, b);\n  });\n  filteredChanges.forEach(function (change) {\n    var materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n    registrations.forEach(function (registration) {\n      if (registration.respondsTo(change.type)) {\n        events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n      }\n    });\n  });\n}\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n    return change;\n  }\n}\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  var aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  var bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newViewCache(eventCache, serverCache) {\n  return {\n    eventCache: eventCache,\n    serverCache: serverCache\n  };\n}\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;\n}\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\nvar EmptyChildren = function () {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\nvar ImmutableTree = /** @class */function () {\n  function ImmutableTree(value, children) {\n    if (children === void 0) {\n      children = EmptyChildren();\n    }\n    this.value = value;\n    this.children = children;\n  }\n  ImmutableTree.fromObject = function (obj) {\n    var tree = new ImmutableTree(null);\n    each(obj, function (childPath, childSnap) {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  };\n  /**\r\n   * True if the value is empty and there are no children\r\n   */\n  ImmutableTree.prototype.isEmpty = function () {\n    return this.value === null && this.children.isEmpty();\n  };\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param relativePath - The remainder of the path\r\n   * @param predicate - The predicate to satisfy to return a node\r\n   */\n  ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: newEmptyPath(),\n        value: this.value\n      };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        var front = pathGetFront(relativePath);\n        var child = this.children.get(front);\n        if (child !== null) {\n          var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n          if (childExistingPathAndValue != null) {\n            var fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   */\n  ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, function () {\n      return true;\n    });\n  };\n  /**\r\n   * @returns The subtree at the given path\r\n   */\n  ImmutableTree.prototype.subtree = function (relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      var front = pathGetFront(relativePath);\n      var childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  };\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param relativePath - Path to set value at.\r\n   * @param toSet - Value to set.\r\n   * @returns Resulting tree.\r\n   */\n  ImmutableTree.prototype.set = function (relativePath, toSet) {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      var front = pathGetFront(relativePath);\n      var child = this.children.get(front) || new ImmutableTree(null);\n      var newChild = child.set(pathPopFront(relativePath), toSet);\n      var newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param relativePath - Path to value to remove.\r\n   * @returns Resulting tree.\r\n   */\n  ImmutableTree.prototype.remove = function (relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      var front = pathGetFront(relativePath);\n      var child = this.children.get(front);\n      if (child) {\n        var newChild = child.remove(pathPopFront(relativePath));\n        var newChildren = void 0;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  };\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param relativePath - Path to get value for.\r\n   * @returns Value at path, or null.\r\n   */\n  ImmutableTree.prototype.get = function (relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      var front = pathGetFront(relativePath);\n      var child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param relativePath - Path to replace subtree for.\r\n   * @param newTree - New tree.\r\n   * @returns Resulting tree.\r\n   */\n  ImmutableTree.prototype.setTree = function (relativePath, newTree) {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      var front = pathGetFront(relativePath);\n      var child = this.children.get(front) || new ImmutableTree(null);\n      var newChild = child.setTree(pathPopFront(relativePath), newTree);\n      var newChildren = void 0;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   */\n  ImmutableTree.prototype.fold = function (fn) {\n    return this.fold_(newEmptyPath(), fn);\n  };\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   */\n  ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\n    var accum = {};\n    this.children.inorderTraversal(function (childKey, childTree) {\n      accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  };\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   */\n  ImmutableTree.prototype.findOnPath = function (path, f) {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  };\n  ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\n    var result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        var front = pathGetFront(pathToFollow);\n        var nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  ImmutableTree.prototype.foreachOnPath = function (path, f) {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  };\n  ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      var front = pathGetFront(pathToFollow);\n      var nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  };\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param f - A function to be called with the path from the root of the tree to\r\n   * a node, and the value at that node. Called in depth-first order.\r\n   */\n  ImmutableTree.prototype.foreach = function (f) {\n    this.foreach_(newEmptyPath(), f);\n  };\n  ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  };\n  ImmutableTree.prototype.foreachChild = function (f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  };\n  return ImmutableTree;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\nvar CompoundWrite = /** @class */function () {\n  function CompoundWrite(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n  CompoundWrite.empty = function () {\n    return new CompoundWrite(new ImmutableTree(null));\n  };\n  return CompoundWrite;\n}();\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      var rootMostPath = rootmost.path;\n      var value = rootmost.value;\n      var relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n    } else {\n      var subtree = new ImmutableTree(node);\n      var newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n  var newWrite = compoundWrite;\n  each(updates, function (childKey, node) {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    var newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n    return new CompoundWrite(newWriteTree);\n  }\n}\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n  var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n  var children = [];\n  var node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n        children.push(new NamedNode(childName, childNode));\n      });\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(function (childName, childTree) {\n      if (childTree.value != null) {\n        children.push(new NamedNode(childName, childTree.value));\n      }\n    });\n  }\n  return children;\n}\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    var shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\nfunction compoundWriteIsEmpty(compoundWrite) {\n  return compoundWrite.writeTree_.isEmpty();\n}\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\nfunction compoundWriteApply(compoundWrite, node) {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    var priorityWrite_1 = null;\n    writeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite_1 = childTree.value;\n      } else {\n        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\n      node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite_1);\n    }\n    return node;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\nfunction writeTreeChildWrites(writeTree, path) {\n  return newWriteTreeRef(path, writeTree);\n}\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path: path,\n    snap: snap,\n    writeId: writeId,\n    visible: visible\n  });\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n  }\n  writeTree.lastWriteId = writeId;\n}\n/**\r\n * Record a new merge from user code.\r\n */\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n  writeTree.allWrites.push({\n    path: path,\n    children: changedChildren,\n    writeId: writeId,\n    visible: true\n  });\n  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n  writeTree.lastWriteId = writeId;\n}\nfunction writeTreeGetWrite(writeTree, writeId) {\n  for (var i = 0; i < writeTree.allWrites.length; i++) {\n    var record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n  var idx = writeTree.allWrites.findIndex(function (s) {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  var writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n  var removedWriteWasVisible = writeToRemove.visible;\n  var removedWriteOverlapsWithOtherWrites = false;\n  var i = writeTree.allWrites.length - 1;\n  while (removedWriteWasVisible && i >= 0) {\n    var currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n    } else {\n      var children = writeToRemove.children;\n      each(children, function (childName) {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n      });\n    }\n    return true;\n  }\n}\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (var childName in writeRecord.children) {\n      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\nfunction writeTreeResetTree_(writeTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\nfunction writeTreeDefaultFilter_(write) {\n  return write.visible;\n}\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n  var compoundWrite = CompoundWrite.empty();\n  for (var i = 0; i < writes.length; ++i) {\n    var write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      var writePath = write.path;\n      var relativePath = void 0;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n        } else ;\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n          } else {\n            var child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              var deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n            }\n          }\n        } else ;\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      var subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n        return null;\n      } else {\n        var filter = function (write) {\n          return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));\n        };\n        var mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n        var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n  var completeChildren = ChildrenNode.EMPTY_NODE;\n  var topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\n        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    var merge_1 = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n      var node = compoundWriteApply(compoundWriteChildCompoundWrite(merge_1, new Path(childName)), childNode);\n      completeChildren = completeChildren.updateImmediateChild(childName, node);\n    });\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge_1).forEach(function (namedNode) {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    compoundWriteGetCompleteChildren(merge).forEach(function (namedNode) {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  }\n}\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n  assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n  var path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n    }\n  }\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n  var path = pathChild(treePath, childKey);\n  var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n    } else {\n      return null;\n    }\n  }\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\nfunction writeTreeShadowingWrite(writeTree, path) {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n  var toIterate;\n  var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n  var shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    var nodes = [];\n    var cmp = index.getCompare();\n    var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n    var next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\nfunction newWriteTree() {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\nfunction writeTreeRefChild(writeTreeRef, childName) {\n  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\nfunction newWriteTreeRef(path, writeTree) {\n  return {\n    treePath: path,\n    writeTree: writeTree\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ChildChangeAccumulator = /** @class */function () {\n  function ChildChangeAccumulator() {\n    this.changeMap = new Map();\n  }\n  ChildChangeAccumulator.prototype.trackChildChange = function (change) {\n    var type = change.type;\n    var childKey = change.childName;\n    assert(type === \"child_added\" /* CHILD_ADDED */ || type === \"child_changed\" /* CHILD_CHANGED */ || type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\n    assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    var oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      var oldType = oldChange.type;\n      if (type === \"child_added\" /* CHILD_ADDED */ && oldType === \"child_removed\" /* CHILD_REMOVED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === \"child_removed\" /* CHILD_REMOVED */ && oldType === \"child_added\" /* CHILD_ADDED */) {\n        this.changeMap.delete(childKey);\n      } else if (type === \"child_removed\" /* CHILD_REMOVED */ && oldType === \"child_changed\" /* CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n      } else if (type === \"child_changed\" /* CHILD_CHANGED */ && oldType === \"child_added\" /* CHILD_ADDED */) {\n        this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n      } else if (type === \"child_changed\" /* CHILD_CHANGED */ && oldType === \"child_changed\" /* CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  };\n  ChildChangeAccumulator.prototype.getChanges = function () {\n    return Array.from(this.changeMap.values());\n  };\n  return ChildChangeAccumulator;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar NoCompleteChildSource_ = /** @class */function () {\n  function NoCompleteChildSource_() {}\n  NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\n    return null;\n  };\n  NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\n    return null;\n  };\n  return NoCompleteChildSource_;\n}();\n/**\r\n * Singleton instance.\r\n */\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\nvar WriteTreeCompleteChildSource = /** @class */function () {\n  function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\n    if (optCompleteServerCache_ === void 0) {\n      optCompleteServerCache_ = null;\n    }\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n  WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\n    var node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  };\n  WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\n    var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);\n    var nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  };\n  return WriteTreeCompleteChildSource;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newViewProcessor(filter) {\n  return {\n    filter: filter\n  };\n}\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n  assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n  assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n  var accumulator = new ChildChangeAccumulator();\n  var newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    var overwrite = operation;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);\n      newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    var merge = operation;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    var ackUserWrite = operation;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  var changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return {\n    viewCache: newViewCache,\n    changes: changes\n  };\n}\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n  var eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    var oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n    }\n  }\n}\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n  var oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    var newEventCache = void 0,\n      serverNode = void 0;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        var serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n        var completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n      } else {\n        var completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n      }\n    } else {\n      var childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n        var oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        var updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        var childChangePath = pathPopFront(changePath);\n        // update child\n        var newEventChild = void 0;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          var eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n  }\n}\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n  var oldServerSnap = oldViewCache.serverCache;\n  var newServerCache;\n  var serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n  } else {\n    var childKey = pathGetFront(changePath);\n    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    var childChangePath = pathPopFront(changePath);\n    var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    var newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n    } else {\n      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n    }\n  }\n  var newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n  var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n  var oldEventSnap = oldViewCache.eventCache;\n  var newViewCache, newEventCache;\n  var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n  } else {\n    var childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n      newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n    } else {\n      var childChangePath = pathPopFront(changePath);\n      var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      var newChild = void 0;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        var childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        var newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  var curViewCache = viewCache;\n  changedChildren.foreach(function (relativePath, childNode) {\n    var writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  changedChildren.foreach(function (relativePath, childNode) {\n    var writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n  merge.foreach(function (relativePath, childNode) {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {\n    return viewCache;\n  }\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  var curViewCache = viewCache;\n  var viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n  }\n  var serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\n    if (serverNode.hasChild(childKey)) {\n      var serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\n    var isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      var serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n  // Only filter server node if it is currently filtered\n  var filterServerNode = viewCache.serverCache.isFiltered();\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  var serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      var changedChildren_1 = new ImmutableTree(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\n        changedChildren_1 = changedChildren_1.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    var changedChildren_2 = new ImmutableTree(null);\n    affectedTree.foreach(function (mergePath, value) {\n      var serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n      }\n    });\n    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\n  }\n}\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n  var oldServerNode = viewCache.serverCache;\n  var newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n  var complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n    var oldEventCache = viewCache.eventCache.getNode();\n    var newEventCache = void 0;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      var newNode = void 0;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n      } else {\n        var serverChildren = viewCache.serverCache.getNode();\n        assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n      }\n      newNode = newNode;\n      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n    } else {\n      var childKey = pathGetFront(path);\n      var newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n        }\n      }\n    }\n    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\nvar View = /** @class */function () {\n  function View(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    var params = this.query_._queryParams;\n    var indexFilter = new IndexedFilter(params.getIndex());\n    var filter = queryParamsGetNodeFilter(params);\n    this.processor_ = newViewProcessor(filter);\n    var initialServerCache = initialViewCache.serverCache;\n    var initialEventCache = initialViewCache.eventCache;\n    // Don't filter server node with other filter than index, wait for tagged listen\n    var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n  Object.defineProperty(View.prototype, \"query\", {\n    get: function () {\n      return this.query_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return View;\n}();\nfunction viewGetServerCache(view) {\n  return view.viewCache_.serverCache.getNode();\n}\nfunction viewGetCompleteNode(view) {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\nfunction viewGetCompleteServerCache(view, path) {\n  var cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\nfunction viewIsEmpty(view) {\n  return view.eventRegistrations_.length === 0;\n}\nfunction viewAddEventRegistration(view, eventRegistration) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n  var cancelEvents = [];\n  if (cancelError) {\n    assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n    var path_1 = view.query._path;\n    view.eventRegistrations_.forEach(function (registration) {\n      var maybeEvent = registration.createCancelEvent(cancelError, path_1);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n  if (eventRegistration) {\n    var remaining = [];\n    for (var i = 0; i < view.eventRegistrations_.length; ++i) {\n      var existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n    assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n    assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n  }\n  var oldViewCache = view.viewCache_;\n  var result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n  assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n  view.viewCache_ = result.viewCache;\n  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\nfunction viewGetInitialEvents(view, registration) {\n  var eventSnap = view.viewCache_.eventCache;\n  var initialChanges = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    var eventNode = eventSnap.getNode();\n    eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n  var registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\nvar SyncPoint = /** @class */function () {\n  function SyncPoint() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n  return SyncPoint;\n}();\nfunction syncPointSetReferenceConstructor(val) {\n  assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n  referenceConstructor$1 = val;\n}\nfunction syncPointGetReferenceConstructor() {\n  assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n  return referenceConstructor$1;\n}\nfunction syncPointIsEmpty(syncPoint) {\n  return syncPoint.views.size === 0;\n}\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n  var e_1, _a;\n  var queryId = operation.source.queryId;\n  if (queryId !== null) {\n    var view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n  } else {\n    var events = [];\n    try {\n      for (var _b = __values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n        events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return events;\n  }\n}\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n  var queryId = query._queryIdentifier;\n  var view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    var eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n    var eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    var viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n    return new View(query, viewCache);\n  }\n  return view;\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n  var view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n  var e_2, _a;\n  var queryId = query._queryIdentifier;\n  var removed = [];\n  var cancelEvents = [];\n  var hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    try {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      for (var _b = __values(syncPoint.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n          viewQueryId = _d[0],\n          view = _d[1];\n        cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n        if (viewIsEmpty(view)) {\n          syncPoint.views.delete(viewQueryId);\n          // We'll deal with complete views later.\n          if (!view.query._queryParams.loadsAllData()) {\n            removed.push(view.query);\n          }\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    var view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n  }\n  return {\n    removed: removed,\n    events: cancelEvents\n  };\n}\nfunction syncPointGetQueryViews(syncPoint) {\n  var e_3, _a;\n  var result = [];\n  try {\n    for (var _b = __values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var view = _c.value;\n      if (!view.query._queryParams.loadsAllData()) {\n        result.push(view);\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n  return result;\n}\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n  var e_4, _a;\n  var serverCache = null;\n  try {\n    for (var _b = __values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var view = _c.value;\n      serverCache = serverCache || viewGetCompleteServerCache(view, path);\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n  return serverCache;\n}\nfunction syncPointViewForQuery(syncPoint, query) {\n  var params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    var queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\nfunction syncPointHasCompleteView(syncPoint) {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\nfunction syncPointGetCompleteView(syncPoint) {\n  var e_5, _a;\n  try {\n    for (var _b = __values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var view = _c.value;\n      if (view.query._queryParams.loadsAllData()) {\n        return view;\n      }\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar referenceConstructor;\nfunction syncTreeSetReferenceConstructor(val) {\n  assert(!referenceConstructor, '__referenceConstructor has already been defined');\n  referenceConstructor = val;\n}\nfunction syncTreeGetReferenceConstructor() {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n/**\r\n * Static tracker for next query tag.\r\n */\nvar syncTreeNextQueryTag_ = 1;\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\nvar SyncTree = /** @class */function () {\n  /**\r\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  function SyncTree(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n    this.syncPointTree_ = new ImmutableTree(null);\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n    this.pendingWriteTree_ = newWriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n  return SyncTree;\n}();\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n  // Record pending write.\n  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n  }\n}\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n  var changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\nfunction syncTreeAckUserWrite(syncTree, writeId, revert) {\n  if (revert === void 0) {\n    revert = false;\n  }\n  var write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  var needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    var affectedTree_1 = new ImmutableTree(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree_1 = affectedTree_1.set(newEmptyPath(), true);\n    } else {\n      each(write.children, function (pathString) {\n        affectedTree_1 = affectedTree_1.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree_1, revert));\n  }\n}\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n  var changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyListenComplete(syncTree, path) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n  var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    var r = syncTreeParseQueryKey_(queryKey);\n    var queryPath = r.path,\n      queryId = r.queryId;\n    var relativePath = newRelativePath(queryPath, path);\n    var op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  var path = query._path;\n  var maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  var cancelEvents = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n    var removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    var removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    var removingDefault = -1 !== removed.findIndex(function (query) {\n      return query._queryParams.loadsAllData();\n    });\n    var covered = syncTree.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n      return syncPointHasCompleteView(parentSyncPoint);\n    });\n    if (removingDefault && !covered) {\n      var subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        var newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n        // Ok, we've collected all the listens we need. Set them up.\n        for (var i = 0; i < newViews.length; ++i) {\n          var view = newViews[i],\n            newQuery = view.query;\n          var listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\n        }\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        var defaultTag = null;\n        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n      } else {\n        removed.forEach(function (queryToRemove) {\n          var tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  }\n  return cancelEvents;\n}\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n  var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    var r = syncTreeParseQueryKey_(queryKey);\n    var queryPath = r.path,\n      queryId = r.queryId;\n    var relativePath = newRelativePath(queryPath, path);\n    var op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n  var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    var r = syncTreeParseQueryKey_(queryKey);\n    var queryPath = r.path,\n      queryId = r.queryId;\n    var relativePath = newRelativePath(queryPath, path);\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    var op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\n  var path = query._path;\n  var serverCache = null;\n  var foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n    var relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  var syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  var serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    var subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild(function (childName, childSyncPoint) {\n      var completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(childName, completeCache);\n      }\n    });\n  }\n  var viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    var queryKey = syncTreeMakeQueryKey_(query);\n    assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n    var tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  var events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    var view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n  var includeHiddenSets = true;\n  var writeTree = syncTree.pendingWriteTree_;\n  var serverCache = syncTree.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n    var relativePath = newRelativePath(pathSoFar, path);\n    var serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n    if (serverCache) {\n      return serverCache;\n    }\n  });\n  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\nfunction syncTreeGetServerValue(syncTree, query) {\n  var path = query._path;\n  var serverCache = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n    var relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  var syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  var serverCacheComplete = serverCache != null;\n  var serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;\n  var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n  var view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n  return viewGetCompleteNode(view);\n}\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, /*serverCache=*/null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n  } else {\n    var syncPoint = syncPointTree.get(newEmptyPath());\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    var events = [];\n    var childName = pathGetFront(operation.path);\n    var childOperation = operation.operationForChild(childName);\n    var childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      var childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n    if (syncPoint) {\n      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n    return events;\n  }\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n  var syncPoint = syncPointTree.get(newEmptyPath());\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  var events = [];\n  syncPointTree.children.inorderTraversal(function (childName, childTree) {\n    var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n    var childWritesCache = writeTreeRefChild(writesCache, childName);\n    var childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n  });\n  if (syncPoint) {\n    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n  }\n  return events;\n}\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n  var query = view.query;\n  var tag = syncTreeTagForQuery_(syncTree, query);\n  return {\n    hashFn: function () {\n      var cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: function (status) {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        var error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(syncTree, query, /*eventRegistration*/null, error);\n      }\n    }\n  };\n}\n/**\r\n * Return the tag associated with the given query.\r\n */\nfunction syncTreeTagForQuery_(syncTree, query) {\n  var queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\nfunction syncTreeMakeQueryKey_(query) {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n  return syncTree.tagToQueryMap.get(tag);\n}\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\nfunction syncTreeParseQueryKey_(queryKey) {\n  var splitIndex = queryKey.indexOf('$');\n  assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n/**\r\n * A helper method to apply tagged operations\r\n */\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n  var syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n  return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      var completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      var views_1 = [];\n      if (maybeChildSyncPoint) {\n        views_1 = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, function (_key, childViews) {\n        views_1 = views_1.concat(childViews);\n      });\n      return views_1;\n    }\n  });\n}\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\nfunction syncTreeQueryForListening_(query) {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\nfunction syncTreeRemoveTags_(syncTree, queries) {\n  for (var j = 0; j < queries.length; ++j) {\n    var removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      var removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      var removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n/**\r\n * Static accessor for query tags.\r\n */\nfunction syncTreeGetNextQueryTag_() {\n  return syncTreeNextQueryTag_++;\n}\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\nfunction syncTreeSetupListener_(syncTree, query, view) {\n  var path = query._path;\n  var tag = syncTreeTagForQuery_(syncTree, query);\n  var listener = syncTreeCreateListenerForView_(syncTree, view);\n  var events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n  var subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n        return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n      } else {\n        // No default listener here, flatten any deeper queries into an array\n        var queries_1 = [];\n        if (maybeChildSyncPoint) {\n          queries_1 = queries_1.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(function (view) {\n            return view.query;\n          }));\n        }\n        each(childMap, function (_key, childQueries) {\n          queries_1 = queries_1.concat(childQueries);\n        });\n        return queries_1;\n      }\n    });\n    for (var i = 0; i < queriesToStop.length; ++i) {\n      var queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\n    }\n  }\n  return events;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ExistingValueProvider = /** @class */function () {\n  function ExistingValueProvider(node_) {\n    this.node_ = node_;\n  }\n  ExistingValueProvider.prototype.getImmediateChild = function (childName) {\n    var child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  };\n  ExistingValueProvider.prototype.node = function () {\n    return this.node_;\n  };\n  return ExistingValueProvider;\n}();\nvar DeferredValueProvider = /** @class */function () {\n  function DeferredValueProvider(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n  DeferredValueProvider.prototype.getImmediateChild = function (childName) {\n    var childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  };\n  DeferredValueProvider.prototype.node = function () {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  };\n  return DeferredValueProvider;\n}();\n/**\r\n * Generate placeholders for deferred values.\r\n */\nvar generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\nvar resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\nvar resolveScalarDeferredValue = function (op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\nvar resolveComplexDeferredValue = function (op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  var delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n  var existingNode = existing.node();\n  assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n  var leaf = existingNode;\n  var existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\nvar resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\nvar resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  var rawPri = node.getPriority().val();\n  var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  var newNode;\n  if (node.isLeafNode()) {\n    var leafNode = node;\n    var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    var childrenNode = node;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n      var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\nvar Tree = /** @class */function () {\n  /**\r\n   * @param name - Optional name of the node.\r\n   * @param parent - Optional parent node.\r\n   * @param node - Optional node to wrap.\r\n   */\n  function Tree(name, parent, node) {\n    if (name === void 0) {\n      name = '';\n    }\n    if (parent === void 0) {\n      parent = null;\n    }\n    if (node === void 0) {\n      node = {\n        children: {},\n        childCount: 0\n      };\n    }\n    this.name = name;\n    this.parent = parent;\n    this.node = node;\n  }\n  return Tree;\n}();\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\nfunction treeSubTree(tree, pathObj) {\n  // TODO: Require pathObj to be Path?\n  var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  var child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    var childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n  return child;\n}\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\nfunction treeGetValue(tree) {\n  return tree.node.value;\n}\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\nfunction treeSetValue(tree, value) {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n/**\r\n * @returns Whether the tree has any children.\r\n */\nfunction treeHasChildren(tree) {\n  return tree.node.childCount > 0;\n}\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\nfunction treeIsEmpty(tree) {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\nfunction treeForEachChild(tree, action) {\n  each(tree.node.children, function (child, childTree) {\n    action(new Tree(child, tree, childTree));\n  });\n}\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n  treeForEachChild(tree, function (child) {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\nfunction treeForEachAncestor(tree, action, includeSelf) {\n  var node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\nfunction treeGetPath(tree) {\n  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\nfunction treeUpdateParents(tree) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\nfunction treeUpdateChild(tree, childName, child) {\n  var childEmpty = treeIsEmpty(child);\n  var childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * True for invalid Firebase keys\r\n */\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\nvar isValidKey = function (key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\nvar isValidPathString = function (pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\nvar isValidRootPathString = function (pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  return isValidPathString(pathString);\n};\nvar isValidPriority = function (priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' &&\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\nvar validateFirebaseDataArg = function (fnName, value, path, optional) {\n  if (optional && value === undefined) {\n    return;\n  }\n  validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\nvar validateFirebaseData = function (errorPrefix, data, path_) {\n  var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n  }\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));\n  }\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + \" ('\" + data.substring(0, 50) + \"...')\");\n  }\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    var hasDotValue_1 = false;\n    var hasActualChild_1 = false;\n    each(data, function (key, value) {\n      if (key === '.value') {\n        hasDotValue_1 = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild_1 = true;\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n    if (hasDotValue_1 && hasActualChild_1) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + validationPathToErrorString(path) + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n  var i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    var keys = pathSlice(curPath);\n    for (var j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  }\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  var prevPath = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\nvar validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n  var errorPrefix$1 = errorPrefix(fnName, 'values');\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n  }\n  var mergePaths = [];\n  each(data, function (key, value) {\n    var curPath = new Path(key);\n    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix$1 + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\nvar validatePriority = function (fnName, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\nvar validateEventType = function (fnName, eventType, optional) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(errorPrefix(fnName, 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n  }\n};\nvar validateKey = function (fnName, argumentName, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\nvar validatePathString = function (fnName, argumentName, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n  if (!isValidPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\nvar validateRootPathString = function (fnName, argumentName, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  validatePathString(fnName, argumentName, pathString, optional);\n};\nvar validateWritablePath = function (fnName, path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\nvar validateUrl = function (fnName, parsedUrl) {\n  // TODO = Validate server better.\n  var pathString = parsedUrl.path.toString();\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\nvar validateBoolean = function (fnName, argumentName, bool, optional) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(errorPrefix(fnName, argumentName) + 'must be a boolean.');\n  }\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\nvar EventQueue = /** @class */function () {\n  function EventQueue() {\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     */\n    this.recursionDepth_ = 0;\n  }\n  return EventQueue;\n}();\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  var currList = null;\n  for (var i = 0; i < eventDataList.length; i++) {\n    var data = eventDataList[i];\n    var path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n    if (currList === null) {\n      currList = {\n        events: [],\n        path: path\n      };\n    }\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function (eventPath) {\n    return pathEquals(eventPath, path);\n  });\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function (eventPath) {\n    return pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath);\n  });\n}\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n  eventQueue.recursionDepth_++;\n  var sentAll = true;\n  for (var i = 0; i < eventQueue.eventLists_.length; i++) {\n    var eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      var eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n  eventQueue.recursionDepth_--;\n}\n/**\r\n * Iterates through the list and raises each event\r\n */\nfunction eventListRaise(eventList) {\n  for (var i = 0; i < eventList.events.length; i++) {\n    var eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      var eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\nvar MAX_TRANSACTION_RETRIES = 25;\n/**\r\n * A connection to a single data repository.\r\n */\nvar Repo = /** @class */function () {\n  function Repo(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n    this.repoInfo_ = repoInfo_;\n    this.forceRestClient_ = forceRestClient_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckProvider_ = appCheckProvider_;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n    this.onDisconnect_ = newSparseSnapshotTree();\n    /** Stores queues of outstanding transactions for Firebase locations. */\n    this.transactionQueueTree_ = new Tree();\n    // TODO: This should be @private but it's used by test_access.js and internal.js\n    this.persistentConnection_ = null;\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n  /**\r\n   * @returns The URL corresponding to the root of this Firebase.\r\n   */\n  Repo.prototype.toString = function () {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  };\n  return Repo;\n}();\nfunction repoStart(repo, appId, authOverride) {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, function (pathString, data, isMerge, tag) {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, repo.authTokenProvider_, repo.appCheckProvider_);\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(function () {\n      return repoOnConnectStatus(repo, /* connectStatus= */true);\n    }, 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, function (pathString, data, isMerge, tag) {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, function (connectStatus) {\n      repoOnConnectStatus(repo, connectStatus);\n    }, function (updates) {\n      repoOnServerInfoUpdate(repo, updates);\n    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n    repo.server_ = repo.persistentConnection_;\n  }\n  repo.authTokenProvider_.addTokenChangeListener(function (token) {\n    repo.server_.refreshAuthToken(token);\n  });\n  repo.appCheckProvider_.addTokenChangeListener(function (result) {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, function () {\n    return new StatsReporter(repo.stats_, repo.server_);\n  });\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: function (query, tag, currentHashFn, onComplete) {\n      var infoEvents = [];\n      var node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n        setTimeout(function () {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: function () {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: function (query, tag, currentHashFn, onComplete) {\n      repo.server_.listen(query, currentHashFn, tag, function (status, data) {\n        var events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: function (query, tag) {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\nfunction repoServerTime(repo) {\n  var offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  var offset = offsetNode.val() || 0;\n  return new Date().getTime() + offset;\n}\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\nfunction repoGenerateServerValues(repo) {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n  // For testing.\n  repo.dataUpdateCount++;\n  var path = new Path(pathString);\n  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;\n  var events = [];\n  if (tag) {\n    if (isMerge) {\n      var taggedChildren = map(data, function (raw) {\n        return nodeFromJSON(raw);\n      });\n      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n    } else {\n      var taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n    }\n  } else if (isMerge) {\n    var changedChildren = map(data, function (raw) {\n      return nodeFromJSON(raw);\n    });\n    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n  } else {\n    var snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  var affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n// TODO: This should be @private but it's used by test_access.js and internal.js\nfunction repoInterceptServerData(repo, callback) {\n  repo.interceptServerDataCallback_ = callback;\n}\nfunction repoOnConnectStatus(repo, connectStatus) {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\nfunction repoOnServerInfoUpdate(repo, updates) {\n  each(updates, function (key, value) {\n    repoUpdateInfo(repo, key, value);\n  });\n}\nfunction repoUpdateInfo(repo, pathString, value) {\n  var path = new Path('/.info/' + pathString);\n  var newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  var events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\nfunction repoGetNextWriteId(repo) {\n  return repo.nextWriteId_++;\n}\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\nfunction repoGetValue(repo, query) {\n  // Only active queries are cached. There is no persisted cache.\n  var cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(function (payload) {\n    var node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n    var events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n    return Promise.resolve(node);\n  }, function (err) {\n    repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n    return Promise.reject(new Error(err));\n  });\n}\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  var serverValues = repoGenerateServerValues(repo);\n  var newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  var existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n  var writeId = repoGetNextWriteId(repo);\n  var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(path.toString(), newNodeUnresolved.val( /*export=*/true), function (status, errorReason) {\n    var success = status === 'ok';\n    if (!success) {\n      warn('set at ' + path + ' failed: ' + status);\n    }\n    var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n  var affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n  repoLog(repo, 'update', {\n    path: path.toString(),\n    value: childrenToMerge\n  });\n  // Start with our existing data and merge each child into it.\n  var empty = true;\n  var serverValues = repoGenerateServerValues(repo);\n  var changedChildren = {};\n  each(childrenToMerge, function (changedKey, changedValue) {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n  });\n  if (!empty) {\n    var writeId_1 = repoGetNextWriteId(repo);\n    var events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId_1);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\n      var success = status === 'ok';\n      if (!success) {\n        warn('update at ' + path + ' failed: ' + status);\n      }\n      var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId_1, !success);\n      var affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    each(childrenToMerge, function (changedPath) {\n      var affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n      repoRerunTransactions(repo, affectedPath);\n    });\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\nfunction repoRunOnDisconnectEvents(repo) {\n  repoLog(repo, 'onDisconnectEvents');\n  var serverValues = repoGenerateServerValues(repo);\n  var resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), function (path, node) {\n    var resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n  });\n  var events = [];\n  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), function (path, snap) {\n    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n    var affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n  });\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n  repo.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n  var newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), function (status, errorReason) {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n  var newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), function (status, errorReason) {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\n    if (status === 'ok') {\n      each(childrenToMerge, function (childName, childNode) {\n        var newChildNode = nodeFromJSON(childNode);\n        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n      });\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n  var events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  var events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoInterrupt(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\nfunction repoResume(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\nfunction repoStats(repo, showDelta) {\n  if (showDelta === void 0) {\n    showDelta = false;\n  }\n  if (typeof console === 'undefined') {\n    return;\n  }\n  var stats;\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n  var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\n    return Math.max(currentValue.length, previousValue);\n  }, 0);\n  each(stats, function (stat, value) {\n    var paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (var i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\nfunction repoStatsIncrementCounter(repo, metric) {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\nfunction repoLog(repo) {\n  var varArgs = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    varArgs[_i - 1] = arguments[_i];\n  }\n  var prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log.apply(void 0, __spreadArray([prefix], __read(varArgs)));\n}\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n  if (callback) {\n    exceptionGuard(function () {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        var code = (status || 'error').toUpperCase();\n        var message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n        var error = new Error(message);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        error.code = code;\n        callback(error);\n      }\n    });\n  }\n}\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n  repoLog(repo, 'transaction on ' + path);\n  // Initialize transaction.\n  var transaction = {\n    path: path,\n    update: transactionUpdate,\n    onComplete: onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally: applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher: unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n  // Run transaction initially.\n  var currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  var newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n    // Mark as run and add to our queue.\n    transaction.status = 0 /* RUN */;\n    var queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    var nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n    treeSetValue(queueNode, nodeQueue);\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    var priorityForNode = void 0;\n    if (typeof newVal === 'object' && newVal !== null && contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      var currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    var serverValues = repoGenerateServerValues(repo);\n    var newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n    var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\nfunction repoGetLatestState(repo, path, excludeSets) {\n  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;\n}\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\nfunction repoSendReadyTransactions(repo, node) {\n  if (node === void 0) {\n    node = repo.transactionQueueTree_;\n  }\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n  if (treeGetValue(node)) {\n    var queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n    var allRun = queue.every(function (transaction) {\n      return transaction.status === 0 /* RUN */;\n    });\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, function (childNode) {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\nfunction repoSendTransactionQueue(repo, path, queue) {\n  // Mark transactions as sent and increment retry count!\n  var setsToIgnore = queue.map(function (txn) {\n    return txn.currentWriteId;\n  });\n  var latestState = repoGetLatestState(repo, path, setsToIgnore);\n  var snapToSend = latestState;\n  var latestHash = latestState.hash();\n  for (var i = 0; i < queue.length; i++) {\n    var txn = queue[i];\n    assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = 1 /* SENT */;\n    txn.retryCount++;\n    var relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\n  }\n  var dataToSend = snapToSend.val(true);\n  var pathToSend = path;\n  // Send the put.\n  repo.server_.put(pathToSend.toString(), dataToSend, function (status) {\n    repoLog(repo, 'transaction put response', {\n      path: pathToSend.toString(),\n      status: status\n    });\n    var events = [];\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our\n      // transaction state, since the callback could trigger more\n      // transactions or sets.\n      var callbacks = [];\n      var _loop_1 = function (i) {\n        queue[i].status = 2 /* COMPLETED */;\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this\n          // transaction is complete, it should be set\n          callbacks.push(function () {\n            return queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved);\n          });\n        }\n        queue[i].unwatcher();\n      };\n      for (var i = 0; i < queue.length; i++) {\n        _loop_1(i);\n      }\n      // Now remove the completed transactions.\n      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\n      // There may be pending transactions that we can now send.\n      repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n      // Finally, trigger onComplete callbacks.\n      for (var i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (var i = 0; i < queue.length; i++) {\n          if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\n            queue[i].status = 4 /* NEEDS_ABORT */;\n          } else {\n            queue[i].status = 0 /* RUN */;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n        for (var i = 0; i < queue.length; i++) {\n          queue[i].status = 4 /* NEEDS_ABORT */;\n          queue[i].abortReason = status;\n        }\n      }\n      repoRerunTransactions(repo, path);\n    }\n  }, latestHash);\n}\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\nfunction repoRerunTransactions(repo, changedPath) {\n  var rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n  var path = treeGetPath(rootMostTransactionNode);\n  var queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n  return path;\n}\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\nfunction repoRerunTransactionQueue(repo, queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  var callbacks = [];\n  var events = [];\n  // Ignore all of the sets we're going to re-run.\n  var txnsToRerun = queue.filter(function (q) {\n    return q.status === 0 /* RUN */;\n  });\n\n  var setsToIgnore = txnsToRerun.map(function (q) {\n    return q.currentWriteId;\n  });\n  var _loop_2 = function (i) {\n    var transaction = queue[i];\n    var relativePath = newRelativePath(path, transaction.path);\n    var abortTransaction = false,\n      abortReason;\n    assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n    if (transaction.status === 4 /* NEEDS_ABORT */) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n    } else if (transaction.status === 0 /* RUN */) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        var currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        var newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          var newDataNode = nodeFromJSON(newData);\n          var hasExplicitPriority = typeof newData === 'object' && newData != null && contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n          var oldWriteId = transaction.currentWriteId;\n          var serverValues = repoGenerateServerValues(repo);\n          var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = 2 /* COMPLETED */;\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(function () {\n            return queue[i].onComplete(null, false, queue[i].currentInputSnapshot);\n          });\n        } else {\n          callbacks.push(function () {\n            return queue[i].onComplete(new Error(abortReason), false, null);\n          });\n        }\n      }\n    }\n  };\n  for (var i = 0; i < queue.length; i++) {\n    _loop_2(i);\n  }\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n  // Now fire callbacks, now that we're in a good, known state.\n  for (var i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\nfunction repoGetAncestorTransactionNode(repo, path) {\n  var front;\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  var transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n  return transactionNode;\n}\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  var transactionQueue = [];\n  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort(function (a, b) {\n    return a.order - b.order;\n  });\n  return transactionQueue;\n}\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n  var nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (var i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n  treeForEachChild(node, function (child) {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n  var queue = treeGetValue(node);\n  if (queue) {\n    var to = 0;\n    for (var from = 0; from < queue.length; from++) {\n      if (queue[from].status !== 2 /* COMPLETED */) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n  treeForEachChild(node, function (childNode) {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\nfunction repoAbortTransactions(repo, path) {\n  var affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n  var transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n  treeForEachAncestor(transactionNode, function (node) {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  repoAbortTransactionsOnNode(repo, transactionNode);\n  treeForEachDescendant(transactionNode, function (node) {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  return affectedPath;\n}\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\nfunction repoAbortTransactionsOnNode(repo, node) {\n  var queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    var callbacks = [];\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    var events = [];\n    var lastSent = -1;\n    for (var i = 0; i < queue.length; i++) {\n      if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;else if (queue[i].status === 1 /* SENT */) {\n        assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = 3 /* SENT_NEEDS_ABORT */;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n        if (queue[i].onComplete) {\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n    for (var i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction decodePath(pathString) {\n  var pathStringDecoded = '';\n  var pieces = pathString.split('/');\n  for (var i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      var piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n/**\r\n * @returns key value hash\r\n */\nfunction decodeQuery(queryString) {\n  var e_1, _a;\n  var results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  try {\n    for (var _b = __values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var segment = _c.value;\n      if (segment.length === 0) {\n        continue;\n      }\n      var kv = segment.split('=');\n      if (kv.length === 2) {\n        results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n      } else {\n        warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return results;\n}\nvar parseRepoInfo = function (dataURL, nodeAdmin) {\n  var parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  }\n  // Catch common error of uninitialized namespace value.\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n  var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, /*persistenceKey=*/'', /*includeNamespaceInQueryParams=*/namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\nvar parseDatabaseURL = function (dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  var host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n  // Always default to SSL, unless otherwise specified.\n  var secure = true,\n    scheme = 'https',\n    port = 443;\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    var colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n    // Parse host, path, and query string.\n    var slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    var questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n    var hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      var dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n  return {\n    host: host,\n    port: port,\n    domain: domain,\n    subdomain: subdomain,\n    secure: secure,\n    scheme: scheme,\n    pathString: pathString,\n    namespace: namespace\n  };\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\nvar DataEvent = /** @class */function () {\n  /**\r\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param eventRegistration - The function to call to with the event data. User provided\r\n   * @param snapshot - The data backing the event\r\n   * @param prevName - Optional, the name of the previous child for child_* events.\r\n   */\n  function DataEvent(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n  DataEvent.prototype.getPath = function () {\n    var ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  };\n  DataEvent.prototype.getEventType = function () {\n    return this.eventType;\n  };\n  DataEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  DataEvent.prototype.toString = function () {\n    return this.getPath().toString() + ':' + this.eventType + ':' + stringify(this.snapshot.exportVal());\n  };\n  return DataEvent;\n}();\nvar CancelEvent = /** @class */function () {\n  function CancelEvent(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n  CancelEvent.prototype.getPath = function () {\n    return this.path;\n  };\n  CancelEvent.prototype.getEventType = function () {\n    return 'cancel';\n  };\n  CancelEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  CancelEvent.prototype.toString = function () {\n    return this.path.toString() + ':cancel';\n  };\n  return CancelEvent;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\nvar CallbackContext = /** @class */function () {\n  function CallbackContext(snapshotCallback, cancelCallback) {\n    this.snapshotCallback = snapshotCallback;\n    this.cancelCallback = cancelCallback;\n  }\n  CallbackContext.prototype.onValue = function (expDataSnapshot, previousChildName) {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  };\n  CallbackContext.prototype.onCancel = function (error) {\n    assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n    return this.cancelCallback.call(null, error);\n  };\n  Object.defineProperty(CallbackContext.prototype, \"hasCancelCallback\", {\n    get: function () {\n      return !!this.cancelCallback;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  CallbackContext.prototype.matches = function (other) {\n    return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;\n  };\n  return CallbackContext;\n}();\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\nvar OnDisconnect$1 = /** @class */function () {\n  /** @hideconstructor */\n  function OnDisconnect(_repo, _path) {\n    this._repo = _repo;\n    this._path = _path;\n  }\n  /**\r\n   * Cancels all previously queued `onDisconnect()` set or update events for this\r\n   * location and all children.\r\n   *\r\n   * If a write has been queued for this location via a `set()` or `update()` at a\r\n   * parent location, the write at this location will be canceled, though writes\r\n   * to sibling locations will still occur.\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n  OnDisconnect.prototype.cancel = function () {\n    var deferred = new Deferred();\n    repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(function () {}));\n    return deferred.promise;\n  };\n  /**\r\n   * Ensures the data at this location is deleted when the client is disconnected\r\n   * (due to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n  OnDisconnect.prototype.remove = function () {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    var deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(function () {}));\n    return deferred.promise;\n  };\n  /**\r\n   * Ensures the data at this location is set to the specified value when the\r\n   * client is disconnected (due to closing the browser, navigating to a new page,\r\n   * or network issues).\r\n   *\r\n   * `set()` is especially useful for implementing \"presence\" systems, where a\r\n   * value should be changed or cleared when a user disconnects so that they\r\n   * appear \"offline\" to other users. See\r\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n   * for more information.\r\n   *\r\n   * Note that `onDisconnect` operations are only triggered once. If you want an\r\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n   * the `onDisconnect` operations each time.\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  OnDisconnect.prototype.set = function (value) {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    var deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(function () {}));\n    return deferred.promise;\n  };\n  /**\r\n   * Ensures the data at this location is set to the specified value and priority\r\n   * when the client is disconnected (due to closing the browser, navigating to a\r\n   * new page, or network issues).\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @param priority - The priority to be written (string, number, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  OnDisconnect.prototype.setWithPriority = function (value, priority) {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n    var deferred = new Deferred();\n    repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(function () {}));\n    return deferred.promise;\n  };\n  /**\r\n   * Writes multiple values at this location when the client is disconnected (due\r\n   * to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * The `values` argument contains multiple property-value pairs that will be\r\n   * written to the Database together. Each child property can either be a simple\r\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n   * from the current location to the data to update.\r\n   *\r\n   * As opposed to the `set()` method, `update()` can be use to selectively update\r\n   * only the referenced properties at the current location (instead of replacing\r\n   * all the child properties at the current location).\r\n   *\r\n   * @param values - Object containing multiple values.\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  OnDisconnect.prototype.update = function (values) {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n    var deferred = new Deferred();\n    repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(function () {}));\n    return deferred.promise;\n  };\n  return OnDisconnect;\n}();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @internal\r\n */\nvar QueryImpl = /** @class */function () {\n  /**\r\n   * @hideconstructor\r\n   */\n  function QueryImpl(_repo, _path, _queryParams, _orderByCalled) {\n    this._repo = _repo;\n    this._path = _path;\n    this._queryParams = _queryParams;\n    this._orderByCalled = _orderByCalled;\n  }\n  Object.defineProperty(QueryImpl.prototype, \"key\", {\n    get: function () {\n      if (pathIsEmpty(this._path)) {\n        return null;\n      } else {\n        return pathGetBack(this._path);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(QueryImpl.prototype, \"ref\", {\n    get: function () {\n      return new ReferenceImpl(this._repo, this._path);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(QueryImpl.prototype, \"_queryIdentifier\", {\n    get: function () {\n      var obj = queryParamsGetQueryObject(this._queryParams);\n      var id = ObjectToUniqueKey(obj);\n      return id === '{}' ? 'default' : id;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(QueryImpl.prototype, \"_queryObject\", {\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\n    get: function () {\n      return queryParamsGetQueryObject(this._queryParams);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  QueryImpl.prototype.isEqual = function (other) {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n    var sameRepo = this._repo === other._repo;\n    var samePath = pathEquals(this._path, other._path);\n    var sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n    return sameRepo && samePath && sameQueryIdentifier;\n  };\n  QueryImpl.prototype.toJSON = function () {\n    return this.toString();\n  };\n  QueryImpl.prototype.toString = function () {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  };\n  return QueryImpl;\n}();\n/**\r\n * Validates that no other order by call has been made\r\n */\nfunction validateNoPreviousOrderByCall(query, fnName) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n/**\r\n * Validates start/end values for queries.\r\n */\nfunction validateQueryEndpoints(params) {\n  var startNode = null;\n  var endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n  if (params.getIndex() === KEY_INDEX) {\n    var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n    var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' + 'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      var startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      var endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n      throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' + '(null, a number, or a string).');\n    }\n  } else {\n    assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n    if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n      throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' + 'equalTo() cannot be an object.');\n    }\n  }\n}\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\nfunction validateLimit(params) {\n  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n    throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" + 'limitToFirst() or limitToLast() instead.');\n  }\n}\n/**\r\n * @internal\r\n */\nvar ReferenceImpl = /** @class */function (_super) {\n  __extends(ReferenceImpl, _super);\n  /** @hideconstructor */\n  function ReferenceImpl(repo, path) {\n    return _super.call(this, repo, path, new QueryParams(), false) || this;\n  }\n  Object.defineProperty(ReferenceImpl.prototype, \"parent\", {\n    get: function () {\n      var parentPath = pathParent(this._path);\n      return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceImpl.prototype, \"root\", {\n    get: function () {\n      var ref = this;\n      while (ref.parent !== null) {\n        ref = ref.parent;\n      }\n      return ref;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ReferenceImpl;\n}(QueryImpl);\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\nvar DataSnapshot$1 = /** @class */function () {\n  /**\r\n   * @param _node - A SnapshotNode to wrap.\r\n   * @param ref - The location this snapshot came from.\r\n   * @param _index - The iteration order for this snapshot\r\n   * @hideconstructor\r\n   */\n  function DataSnapshot(_node,\n  /**\r\n   * The location of this DataSnapshot.\r\n   */\n  ref, _index) {\n    this._node = _node;\n    this.ref = ref;\n    this._index = _index;\n  }\n  Object.defineProperty(DataSnapshot.prototype, \"priority\", {\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\n    get: function () {\n      // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n      return this._node.getPriority().val();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DataSnapshot.prototype, \"key\", {\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\n    get: function () {\n      return this.ref.key;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DataSnapshot.prototype, \"size\", {\n    /** Returns the number of child properties of this `DataSnapshot`. */\n    get: function () {\n      return this._node.numChildren();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets another `DataSnapshot` for the location at the specified relative path.\r\n   *\r\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n   * another `DataSnapshot` for the location at the specified relative path. The\r\n   * relative path can either be a simple child name (for example, \"ada\") or a\r\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n   * whose value is `null`) is returned.\r\n   *\r\n   * @param path - A relative path to the location of child data.\r\n   */\n  DataSnapshot.prototype.child = function (path) {\n    var childPath = new Path(path);\n    var childRef = child(this.ref, path);\n    return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n  };\n  /**\r\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n   * efficient than using `snapshot.val() !== null`.\r\n   */\n  DataSnapshot.prototype.exists = function () {\n    return !this._node.isEmpty();\n  };\n  /**\r\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n   *\r\n   * The `exportVal()` method is similar to `val()`, except priority information\r\n   * is included (if available), making it suitable for backing up your data.\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  DataSnapshot.prototype.exportVal = function () {\n    return this._node.val(true);\n  };\n  /**\r\n   * Enumerates the top-level children in the `DataSnapshot`.\r\n   *\r\n   * Because of the way JavaScript objects work, the ordering of data in the\r\n   * JavaScript object returned by `val()` is not guaranteed to match the\r\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n   * where `forEach()` comes in handy. It guarantees the children of a\r\n   * `DataSnapshot` will be iterated in their query order.\r\n   *\r\n   * If no explicit `orderBy*()` method is used, results are returned\r\n   * ordered by key (unless priorities are used, in which case, results are\r\n   * returned by priority).\r\n   *\r\n   * @param action - A function that will be called for each child DataSnapshot.\r\n   * The callback can return true to cancel further enumeration.\r\n   * @returns true if enumeration was canceled due to your callback returning\r\n   * true.\r\n   */\n  DataSnapshot.prototype.forEach = function (action) {\n    var _this = this;\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n    var childrenNode = this._node;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, function (key, node) {\n      return action(new DataSnapshot(node, child(_this.ref, key), PRIORITY_INDEX));\n    });\n  };\n  /**\r\n   * Returns true if the specified child path has (non-null) data.\r\n   *\r\n   * @param path - A relative path to the location of a potential child.\r\n   * @returns `true` if data exists at the specified child path; else\r\n   *  `false`.\r\n   */\n  DataSnapshot.prototype.hasChild = function (path) {\n    var childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  };\n  /**\r\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n   * properties.\r\n   *\r\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n   * children. If it does, you can enumerate them using `forEach()`. If it\r\n   * doesn't, then either this snapshot contains a primitive value (which can be\r\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n   * `null`).\r\n   *\r\n   * @returns true if this snapshot has any children; else false.\r\n   */\n  DataSnapshot.prototype.hasChildren = function () {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  };\n  /**\r\n   * Returns a JSON-serializable representation of this object.\r\n   */\n  DataSnapshot.prototype.toJSON = function () {\n    return this.exportVal();\n  };\n  /**\r\n   * Extracts a JavaScript value from a `DataSnapshot`.\r\n   *\r\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n   * scalar type (string, number, or boolean), an array, or an object. It may\r\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n   * data).\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  DataSnapshot.prototype.val = function () {\n    return this._node.val();\n  };\n  return DataSnapshot;\n}();\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\nfunction ref(db, path) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\nfunction refFromURL(db, url) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  var parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n  var repoInfo = parsedURL.repoInfo;\n  if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {\n    fatal('refFromURL' + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');\n  }\n  return ref(db, parsedURL.path.toString());\n}\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\nfunction child(parent, path) {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\nfunction push(parent, value) {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  var now = repoServerTime(parent._repo);\n  var name = nextPushId(now);\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  var thennablePushRef = child(parent, name);\n  var pushRef = child(parent, name);\n  var promise;\n  if (value != null) {\n    promise = set(pushRef, value).then(function () {\n      return pushRef;\n    });\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef;\n}\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\nfunction remove(ref) {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction set(ref, value) {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  var deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, /*priority=*/null, deferred.wrapCallback(function () {}));\n  return deferred.promise;\n}\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction setPriority(ref, priority) {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  var deferred = new Deferred();\n  repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(function () {}));\n  return deferred.promise;\n}\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction setWithPriority(ref, value, priority) {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n  var deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(function () {}));\n  return deferred.promise;\n}\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\nfunction update(ref, values) {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  var deferred = new Deferred();\n  repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(function () {}));\n  return deferred.promise;\n}\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A promise which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\nfunction get(query) {\n  query = getModularInstance(query);\n  return repoGetValue(query._repo, query).then(function (node) {\n    return new DataSnapshot$1(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n  });\n}\n/**\r\n * Represents registration for 'value' events.\r\n */\nvar ValueEventRegistration = /** @class */function () {\n  function ValueEventRegistration(callbackContext) {\n    this.callbackContext = callbackContext;\n  }\n  ValueEventRegistration.prototype.respondsTo = function (eventType) {\n    return eventType === 'value';\n  };\n  ValueEventRegistration.prototype.createEvent = function (change, query) {\n    var index = query._queryParams.getIndex();\n    return new DataEvent('value', this, new DataSnapshot$1(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n  };\n  ValueEventRegistration.prototype.getEventRunner = function (eventData) {\n    var _this = this;\n    if (eventData.getEventType() === 'cancel') {\n      return function () {\n        return _this.callbackContext.onCancel(eventData.error);\n      };\n    } else {\n      return function () {\n        return _this.callbackContext.onValue(eventData.snapshot, null);\n      };\n    }\n  };\n  ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  ValueEventRegistration.prototype.matches = function (other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  };\n  ValueEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callbackContext !== null;\n  };\n  return ValueEventRegistration;\n}();\n/**\r\n * Represents the registration of a child_x event.\r\n */\nvar ChildEventRegistration = /** @class */function () {\n  function ChildEventRegistration(eventType, callbackContext) {\n    this.eventType = eventType;\n    this.callbackContext = callbackContext;\n  }\n  ChildEventRegistration.prototype.respondsTo = function (eventType) {\n    var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  };\n  ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  ChildEventRegistration.prototype.createEvent = function (change, query) {\n    assert(change.childName != null, 'Child events should have a childName.');\n    var childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n    var index = query._queryParams.getIndex();\n    return new DataEvent(change.type, this, new DataSnapshot$1(change.snapshotNode, childRef, index), change.prevName);\n  };\n  ChildEventRegistration.prototype.getEventRunner = function (eventData) {\n    var _this = this;\n    if (eventData.getEventType() === 'cancel') {\n      return function () {\n        return _this.callbackContext.onCancel(eventData.error);\n      };\n    } else {\n      return function () {\n        return _this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n      };\n    }\n  };\n  ChildEventRegistration.prototype.matches = function (other) {\n    if (other instanceof ChildEventRegistration) {\n      return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));\n    }\n    return false;\n  };\n  ChildEventRegistration.prototype.hasAnyCallback = function () {\n    return !!this.callbackContext;\n  };\n  return ChildEventRegistration;\n}();\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n  var cancelCallback;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n  if (options && options.onlyOnce) {\n    var userCallback_1 = callback;\n    var onceCallback = function (dataSnapshot, previousChildName) {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback_1(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n  var callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n  var container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return function () {\n    return repoRemoveEventCallbackForQuery(query._repo, query, container);\n  };\n}\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\nfunction off(query, eventType, callback) {\n  var container = null;\n  var expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\nvar QueryConstraint = /** @class */function () {\n  function QueryConstraint() {}\n  return QueryConstraint;\n}();\nvar QueryEndAtConstraint = /** @class */function (_super) {\n  __extends(QueryEndAtConstraint, _super);\n  function QueryEndAtConstraint(_value, _key) {\n    var _this = _super.call(this) || this;\n    _this._value = _value;\n    _this._key = _key;\n    return _this;\n  }\n  QueryEndAtConstraint.prototype._apply = function (query) {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    var newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endAt: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  };\n  return QueryEndAtConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\nfunction endAt(value, key) {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\nvar QueryEndBeforeConstraint = /** @class */function (_super) {\n  __extends(QueryEndBeforeConstraint, _super);\n  function QueryEndBeforeConstraint(_value, _key) {\n    var _this = _super.call(this) || this;\n    _this._value = _value;\n    _this._key = _key;\n    return _this;\n  }\n  QueryEndBeforeConstraint.prototype._apply = function (query) {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    var newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endBefore: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  };\n  return QueryEndBeforeConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\nfunction endBefore(value, key) {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\nvar QueryStartAtConstraint = /** @class */function (_super) {\n  __extends(QueryStartAtConstraint, _super);\n  function QueryStartAtConstraint(_value, _key) {\n    var _this = _super.call(this) || this;\n    _this._value = _value;\n    _this._key = _key;\n    return _this;\n  }\n  QueryStartAtConstraint.prototype._apply = function (query) {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    var newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAt: Starting point was already set (by another call to startAt, ' + 'startBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  };\n  return QueryStartAtConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\nfunction startAt(value, key) {\n  if (value === void 0) {\n    value = null;\n  }\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\nvar QueryStartAfterConstraint = /** @class */function (_super) {\n  __extends(QueryStartAfterConstraint, _super);\n  function QueryStartAfterConstraint(_value, _key) {\n    var _this = _super.call(this) || this;\n    _this._value = _value;\n    _this._key = _key;\n    return _this;\n  }\n  QueryStartAfterConstraint.prototype._apply = function (query) {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    var newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAfter: Starting point was already set (by another call to startAt, ' + 'startAfter, or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  };\n  return QueryStartAfterConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\nfunction startAfter(value, key) {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\nvar QueryLimitToFirstConstraint = /** @class */function (_super) {\n  __extends(QueryLimitToFirstConstraint, _super);\n  function QueryLimitToFirstConstraint(_limit) {\n    var _this = _super.call(this) || this;\n    _this._limit = _limit;\n    return _this;\n  }\n  QueryLimitToFirstConstraint.prototype._apply = function (query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n  };\n  return QueryLimitToFirstConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\nfunction limitToFirst(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\nvar QueryLimitToLastConstraint = /** @class */function (_super) {\n  __extends(QueryLimitToLastConstraint, _super);\n  function QueryLimitToLastConstraint(_limit) {\n    var _this = _super.call(this) || this;\n    _this._limit = _limit;\n    return _this;\n  }\n  QueryLimitToLastConstraint.prototype._apply = function (query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n  };\n  return QueryLimitToLastConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\nfunction limitToLast(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n  return new QueryLimitToLastConstraint(limit);\n}\nvar QueryOrderByChildConstraint = /** @class */function (_super) {\n  __extends(QueryOrderByChildConstraint, _super);\n  function QueryOrderByChildConstraint(_path) {\n    var _this = _super.call(this) || this;\n    _this._path = _path;\n    return _this;\n  }\n  QueryOrderByChildConstraint.prototype._apply = function (query) {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    var parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n    }\n    var index = new PathIndex(parsedPath);\n    var newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  };\n  return QueryOrderByChildConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\nfunction orderByChild(path) {\n  if (path === '$key') {\n    throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n  } else if (path === '$priority') {\n    throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n  } else if (path === '$value') {\n    throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\nvar QueryOrderByKeyConstraint = /** @class */function (_super) {\n  __extends(QueryOrderByKeyConstraint, _super);\n  function QueryOrderByKeyConstraint() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  QueryOrderByKeyConstraint.prototype._apply = function (query) {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    var newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  };\n  return QueryOrderByKeyConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\nfunction orderByKey() {\n  return new QueryOrderByKeyConstraint();\n}\nvar QueryOrderByPriorityConstraint = /** @class */function (_super) {\n  __extends(QueryOrderByPriorityConstraint, _super);\n  function QueryOrderByPriorityConstraint() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  QueryOrderByPriorityConstraint.prototype._apply = function (query) {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    var newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  };\n  return QueryOrderByPriorityConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\nfunction orderByPriority() {\n  return new QueryOrderByPriorityConstraint();\n}\nvar QueryOrderByValueConstraint = /** @class */function (_super) {\n  __extends(QueryOrderByValueConstraint, _super);\n  function QueryOrderByValueConstraint() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  QueryOrderByValueConstraint.prototype._apply = function (query) {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    var newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  };\n  return QueryOrderByValueConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\nfunction orderByValue() {\n  return new QueryOrderByValueConstraint();\n}\nvar QueryEqualToValueConstraint = /** @class */function (_super) {\n  __extends(QueryEqualToValueConstraint, _super);\n  function QueryEqualToValueConstraint(_value, _key) {\n    var _this = _super.call(this) || this;\n    _this._value = _value;\n    _this._key = _key;\n    return _this;\n  }\n  QueryEqualToValueConstraint.prototype._apply = function (query) {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' + 'equalTo).');\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' + 'equalTo).');\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n  };\n  return QueryEqualToValueConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\nfunction equalTo(value, key) {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\nfunction query(query) {\n  var e_1, _a;\n  var queryConstraints = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    queryConstraints[_i - 1] = arguments[_i];\n  }\n  var queryImpl = getModularInstance(query);\n  try {\n    for (var queryConstraints_1 = __values(queryConstraints), queryConstraints_1_1 = queryConstraints_1.next(); !queryConstraints_1_1.done; queryConstraints_1_1 = queryConstraints_1.next()) {\n      var constraint = queryConstraints_1_1.value;\n      queryImpl = constraint._apply(queryImpl);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (queryConstraints_1_1 && !queryConstraints_1_1.done && (_a = queryConstraints_1.return)) _a.call(queryConstraints_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return queryImpl;\n}\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This variable is also defined in the firebase node.js admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\nvar FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\r\n * Creates and caches Repo instances.\r\n */\nvar repos = {};\n/**\r\n * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n */\nvar useRestClient = false;\n/**\r\n * Update an existing repo in place to point to a new host/port.\r\n */\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n  repo.repoInfo_ = new RepoInfo(host + \":\" + port, /* secure= */false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n  var dbUrl = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n    }\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = app.options.projectId + \"-default-rtdb.firebaseio.com\";\n  }\n  var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  var repoInfo = parsedUrl.repoInfo;\n  var isEmulator;\n  var dbEmulatorHost = undefined;\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = \"http://\" + dbEmulatorHost + \"?ns=\" + repoInfo.namespace;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n  var authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n  }\n  var repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n  return new Database$1(repo, app);\n}\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\nfunction repoManagerDeleteRepo(repo, appName) {\n  var appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(\"Database \" + appName + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n  var appRepos = repos[app.name];\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n  var repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n  return repo;\n}\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\nfunction repoManagerForceRestClient(forceRestClient) {\n  useRestClient = forceRestClient;\n}\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\nvar Database$1 = /** @class */function () {\n  /** @hideconstructor */\n  function Database(_repoInternal, /** The FirebaseApp associated with this Realtime Database instance. */\n  app) {\n    this._repoInternal = _repoInternal;\n    this.app = app;\n    /** Represents a database instance. */\n    this['type'] = 'database';\n    /** Track if the instance has been used (root or repo accessed) */\n    this._instanceStarted = false;\n  }\n  Object.defineProperty(Database.prototype, \"_repo\", {\n    get: function () {\n      if (!this._instanceStarted) {\n        repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n        this._instanceStarted = true;\n      }\n      return this._repoInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Database.prototype, \"_root\", {\n    get: function () {\n      if (!this._rootInternal) {\n        this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n      }\n      return this._rootInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Database.prototype._delete = function () {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  };\n  Database.prototype._checkNotDeleted = function (apiName) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  };\n  return Database;\n}();\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\nfunction connectDatabaseEmulator(db, host, port, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal('Cannot call useEmulator() after instance has already been initialized.');\n  }\n  var repo = db._repoInternal;\n  var tokenProvider = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    var token = typeof options.mockUserToken === 'string' ? options.mockUserToken : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\nfunction goOffline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\nfunction goOnline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\nfunction serverTimestamp() {\n  return SERVER_TIMESTAMP;\n}\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\nfunction increment(delta) {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A type for the resolve value of Firebase.transaction.\r\n */\nvar TransactionResult$1 = /** @class */function () {\n  /** @hideconstructor */\n  function TransactionResult( /** Whether the transaction was successfully committed. */\n  committed, /** The resulting data snapshot. */\n  snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  /** Returns a JSON-serializable representation of this object. */\n  TransactionResult.prototype.toJSON = function () {\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  };\n  return TransactionResult;\n}();\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `transaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A Promise that can optionally be used instead of the onComplete\r\n * callback to handle success and failure.\r\n */\nfunction runTransaction(ref,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n  var _a;\n  ref = getModularInstance(ref);\n  validateWritablePath('Reference.transaction', ref._path);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';\n  }\n  var applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n  var deferred = new Deferred();\n  var promiseComplete = function (error, committed, node) {\n    var dataSnapshot = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot$1(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n      deferred.resolve(new TransactionResult$1(committed, dataSnapshot));\n    }\n  };\n  // Add a watch to make sure we get server updates.\n  var unwatcher = onValue(ref, function () {});\n  repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n  return deferred.promise;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar OnDisconnect = /** @class */function () {\n  function OnDisconnect(_delegate) {\n    this._delegate = _delegate;\n  }\n  OnDisconnect.prototype.cancel = function (onComplete) {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\n    var result = this._delegate.cancel();\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n    return result;\n  };\n  OnDisconnect.prototype.remove = function (onComplete) {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\n    var result = this._delegate.remove();\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n    return result;\n  };\n  OnDisconnect.prototype.set = function (value, onComplete) {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\n    var result = this._delegate.set(value);\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n    return result;\n  };\n  OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);\n    var result = this._delegate.setWithPriority(value, priority);\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n    return result;\n  };\n  OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n    validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\n    var result = this._delegate.update(objectToMerge);\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n    return result;\n  };\n  return OnDisconnect;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar TransactionResult = /** @class */function () {\n  /**\r\n   * A type for the resolve value of Firebase.transaction.\r\n   */\n  function TransactionResult(committed, snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  TransactionResult.prototype.toJSON = function () {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  };\n  return TransactionResult;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/* eslint-enable @typescript-eslint/no-explicit-any */\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\nvar DataSnapshot = /** @class */function () {\n  function DataSnapshot(_database, _delegate) {\n    this._database = _database;\n    this._delegate = _delegate;\n  }\n  /**\r\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n   * empty.\r\n   *\r\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n  DataSnapshot.prototype.val = function () {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this._delegate.val();\n  };\n  /**\r\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n   * the entire node contents.\r\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n  DataSnapshot.prototype.exportVal = function () {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this._delegate.exportVal();\n  };\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  DataSnapshot.prototype.toJSON = function () {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  };\n  /**\r\n   * Returns whether the snapshot contains a non-null value.\r\n   *\r\n   * @returns Whether the snapshot contains a non-null value, or is empty.\r\n   */\n  DataSnapshot.prototype.exists = function () {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return this._delegate.exists();\n  };\n  /**\r\n   * Returns a DataSnapshot of the specified child node's contents.\r\n   *\r\n   * @param path - Path to a child.\r\n   * @returns DataSnapshot for child node.\r\n   */\n  DataSnapshot.prototype.child = function (path) {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    path = String(path);\n    validatePathString('DataSnapshot.child', 'path', path, false);\n    return new DataSnapshot(this._database, this._delegate.child(path));\n  };\n  /**\r\n   * Returns whether the snapshot contains a child at the specified path.\r\n   *\r\n   * @param path - Path to a child.\r\n   * @returns Whether the child exists.\r\n   */\n  DataSnapshot.prototype.hasChild = function (path) {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 'path', path, false);\n    return this._delegate.hasChild(path);\n  };\n  /**\r\n   * Returns the priority of the object, or null if no priority was set.\r\n   *\r\n   * @returns The priority.\r\n   */\n  DataSnapshot.prototype.getPriority = function () {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n    return this._delegate.priority;\n  };\n  /**\r\n   * Iterates through child nodes and calls the specified action for each one.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each child.\r\n   * @returns True if forEach was canceled by action returning true for\r\n   * one of the child nodes.\r\n   */\n  DataSnapshot.prototype.forEach = function (action) {\n    var _this = this;\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 'action', action, false);\n    return this._delegate.forEach(function (expDataSnapshot) {\n      return action(new DataSnapshot(_this._database, expDataSnapshot));\n    });\n  };\n  /**\r\n   * Returns whether this DataSnapshot has children.\r\n   * @returns True if the DataSnapshot contains 1 or more child nodes.\r\n   */\n  DataSnapshot.prototype.hasChildren = function () {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    return this._delegate.hasChildren();\n  };\n  Object.defineProperty(DataSnapshot.prototype, \"key\", {\n    get: function () {\n      return this._delegate.key;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the number of children for this DataSnapshot.\r\n   * @returns The number of children that this DataSnapshot contains.\r\n   */\n  DataSnapshot.prototype.numChildren = function () {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this._delegate.size;\n  };\n  /**\r\n   * @returns The Firebase reference for the location this snapshot's data came\r\n   * from.\r\n   */\n  DataSnapshot.prototype.getRef = function () {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return new Reference(this._database, this._delegate.ref);\n  };\n  Object.defineProperty(DataSnapshot.prototype, \"ref\", {\n    get: function () {\n      return this.getRef();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return DataSnapshot;\n}();\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\nvar Query = /** @class */function () {\n  function Query(database, _delegate) {\n    this.database = database;\n    this._delegate = _delegate;\n  }\n  Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\n    var _this = this;\n    var _a;\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateCallback('Query.on', 'callback', callback, false);\n    var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n    var valueCallback = function (expSnapshot, previousChildName) {\n      callback.call(ret.context, new DataSnapshot(_this.database, expSnapshot), previousChildName);\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    var cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      default:\n        throw new Error(errorPrefix('Query.on', 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n    }\n  };\n  Query.prototype.off = function (eventType, callback, context) {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', eventType, true);\n    validateCallback('Query.off', 'callback', callback, true);\n    validateContextObject('Query.off', 'context', context, true);\n    if (callback) {\n      var valueCallback = function () {};\n      valueCallback.userCallback = callback;\n      valueCallback.context = context;\n      off(this._delegate, eventType, valueCallback);\n    } else {\n      off(this._delegate, eventType);\n    }\n  };\n  /**\r\n   * Get the server-value for this query, or return a cached value if not connected.\r\n   */\n  Query.prototype.get = function () {\n    var _this = this;\n    return get(this._delegate).then(function (expSnapshot) {\n      return new DataSnapshot(_this.database, expSnapshot);\n    });\n  };\n  /**\r\n   * Attaches a listener, waits for the first event, and then removes the listener\r\n   */\n  Query.prototype.once = function (eventType, callback, failureCallbackOrContext, context) {\n    var _this = this;\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateCallback('Query.once', 'callback', callback, true);\n    var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\n    var deferred = new Deferred();\n    var valueCallback = function (expSnapshot, previousChildName) {\n      var result = new DataSnapshot(_this.database, expSnapshot);\n      if (callback) {\n        callback.call(ret.context, result, previousChildName);\n      }\n      deferred.resolve(result);\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    var cancelCallback = function (error) {\n      if (ret.cancel) {\n        ret.cancel.call(ret.context, error);\n      }\n      deferred.reject(error);\n    };\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      default:\n        throw new Error(errorPrefix('Query.once', 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n    }\n    return deferred.promise;\n  };\n  /**\r\n   * Set a limit and anchor it to the start of the window.\r\n   */\n  Query.prototype.limitToFirst = function (limit) {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToFirst(limit)));\n  };\n  /**\r\n   * Set a limit and anchor it to the end of the window.\r\n   */\n  Query.prototype.limitToLast = function (limit) {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToLast(limit)));\n  };\n  /**\r\n   * Given a child path, return a new query ordered by the specified grandchild path.\r\n   */\n  Query.prototype.orderByChild = function (path) {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByChild(path)));\n  };\n  /**\r\n   * Return a new query ordered by the KeyIndex\r\n   */\n  Query.prototype.orderByKey = function () {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByKey()));\n  };\n  /**\r\n   * Return a new query ordered by the PriorityIndex\r\n   */\n  Query.prototype.orderByPriority = function () {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByPriority()));\n  };\n  /**\r\n   * Return a new query ordered by the ValueIndex\r\n   */\n  Query.prototype.orderByValue = function () {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByValue()));\n  };\n  Query.prototype.startAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, startAt(value, name)));\n  };\n  Query.prototype.startAfter = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, startAfter(value, name)));\n  };\n  Query.prototype.endAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endAt(value, name)));\n  };\n  Query.prototype.endBefore = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endBefore(value, name)));\n  };\n  /**\r\n   * Load the selection of children with exactly the specified value, and, optionally,\r\n   * the specified name.\r\n   */\n  Query.prototype.equalTo = function (value, name) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, equalTo(value, name)));\n  };\n  /**\r\n   * @returns URL for this location.\r\n   */\n  Query.prototype.toString = function () {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this._delegate.toString();\n  };\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  Query.prototype.toJSON = function () {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  };\n  /**\r\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n   */\n  Query.prototype.isEqual = function (other) {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n    return this._delegate.isEqual(other._delegate);\n  };\n  /**\r\n   * Helper used by .on and .once to extract the context and or cancel arguments.\r\n   * @param fnName - The function name (on or once)\r\n   *\r\n   */\n  Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\n    var ret = {\n      cancel: undefined,\n      context: undefined\n    };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext;\n      validateCallback(fnName, 'cancel', ret.cancel, true);\n      ret.context = context;\n      validateContextObject(fnName, 'context', ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext;\n      } else {\n        throw new Error(errorPrefix(fnName, 'cancelOrContext') + ' must either be a cancel callback or a context object.');\n      }\n    }\n    return ret;\n  };\n  Object.defineProperty(Query.prototype, \"ref\", {\n    get: function () {\n      return new Reference(this.database, new ReferenceImpl(this._delegate._repo, this._delegate._path));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Query;\n}();\nvar Reference = /** @class */function (_super) {\n  __extends(Reference, _super);\n  /**\r\n   * Call options:\r\n   *   new Reference(Repo, Path) or\r\n   *   new Reference(url: string, string|RepoManager)\r\n   *\r\n   * Externally - this is the firebase.database.Reference type.\r\n   */\n  function Reference(database, _delegate) {\n    var _this = _super.call(this, database, new QueryImpl(_delegate._repo, _delegate._path, new QueryParams(), false)) || this;\n    _this.database = database;\n    _this._delegate = _delegate;\n    return _this;\n  }\n  /** @returns {?string} */\n  Reference.prototype.getKey = function () {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n    return this._delegate.key;\n  };\n  Reference.prototype.child = function (pathString) {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    }\n    return new Reference(this.database, child(this._delegate, pathString));\n  };\n  /** @returns {?Reference} */\n  Reference.prototype.getParent = function () {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n    var parent = this._delegate.parent;\n    return parent ? new Reference(this.database, parent) : null;\n  };\n  /** @returns {!Reference} */\n  Reference.prototype.getRoot = function () {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n    return new Reference(this.database, this._delegate.root);\n  };\n  Reference.prototype.set = function (newVal, onComplete) {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateCallback('Reference.set', 'onComplete', onComplete, true);\n    var result = set(this._delegate, newVal);\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n    return result;\n  };\n  Reference.prototype.update = function (values, onComplete) {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    if (Array.isArray(values)) {\n      var newObjectToMerge = {};\n      for (var i = 0; i < values.length; ++i) {\n        newObjectToMerge['' + i] = values[i];\n      }\n      values = newObjectToMerge;\n      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n    }\n    validateWritablePath('Reference.update', this._delegate._path);\n    validateCallback('Reference.update', 'onComplete', onComplete, true);\n    var result = update(this._delegate, values);\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n    return result;\n  };\n  Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);\n    var result = setWithPriority(this._delegate, newVal, newPriority);\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n    return result;\n  };\n  Reference.prototype.remove = function (onComplete) {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateCallback('Reference.remove', 'onComplete', onComplete, true);\n    var result = remove(this._delegate);\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n    return result;\n  };\n  Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\n    var _this = this;\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);\n    validateCallback('Reference.transaction', 'onComplete', onComplete, true);\n    validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);\n    var result = runTransaction(this._delegate, transactionUpdate, {\n      applyLocally: applyLocally\n    }).then(function (transactionResult) {\n      return new TransactionResult(transactionResult.committed, new DataSnapshot(_this.database, transactionResult.snapshot));\n    });\n    if (onComplete) {\n      result.then(function (transactionResult) {\n        return onComplete(null, transactionResult.committed, transactionResult.snapshot);\n      }, function (error) {\n        return onComplete(error, false, null);\n      });\n    }\n    return result;\n  };\n  Reference.prototype.setPriority = function (priority, onComplete) {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\n    var result = setPriority(this._delegate, priority);\n    if (onComplete) {\n      result.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n    return result;\n  };\n  Reference.prototype.push = function (value, onComplete) {\n    var _this = this;\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateCallback('Reference.push', 'onComplete', onComplete, true);\n    var expPromise = push(this._delegate, value);\n    var promise = expPromise.then(function (expRef) {\n      return new Reference(_this.database, expRef);\n    });\n    if (onComplete) {\n      promise.then(function () {\n        return onComplete(null);\n      }, function (error) {\n        return onComplete(error);\n      });\n    }\n    var result = new Reference(this.database, expPromise);\n    result.then = promise.then.bind(promise);\n    result.catch = promise.catch.bind(promise, undefined);\n    return result;\n  };\n  Reference.prototype.onDisconnect = function () {\n    validateWritablePath('Reference.onDisconnect', this._delegate._path);\n    return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));\n  };\n  Object.defineProperty(Reference.prototype, \"key\", {\n    get: function () {\n      return this.getKey();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    get: function () {\n      return this.getParent();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"root\", {\n    get: function () {\n      return this.getRoot();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Reference;\n}(Query);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Class representing a firebase database.\r\n */\nvar Database = /** @class */function () {\n  /**\r\n   * The constructor should not be called by users of our public API.\r\n   */\n  function Database(_delegate, app) {\n    var _this = this;\n    this._delegate = _delegate;\n    this.app = app;\n    this.INTERNAL = {\n      delete: function () {\n        return _this._delegate._delete();\n      }\n    };\n  }\n  /**\r\n   * Modify this instance to communicate with the Realtime Database emulator.\r\n   *\r\n   * <p>Note: This method must be called before performing any other operation.\r\n   *\r\n   * @param host - the emulator host (ex: localhost)\r\n   * @param port - the emulator port (ex: 8080)\r\n   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n   */\n  Database.prototype.useEmulator = function (host, port, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    connectDatabaseEmulator(this._delegate, host, port, options);\n  };\n  Database.prototype.ref = function (path) {\n    validateArgCount('database.ref', 0, 1, arguments.length);\n    if (path instanceof Reference) {\n      var childRef = refFromURL(this._delegate, path.toString());\n      return new Reference(this, childRef);\n    } else {\n      var childRef = ref(this._delegate, path);\n      return new Reference(this, childRef);\n    }\n  };\n  /**\r\n   * Returns a reference to the root or the path specified in url.\r\n   * We throw a exception if the url is not in the same domain as the\r\n   * current repo.\r\n   * @returns Firebase reference.\r\n   */\n  Database.prototype.refFromURL = function (url) {\n    var apiName = 'database.refFromURL';\n    validateArgCount(apiName, 1, 1, arguments.length);\n    var childRef = refFromURL(this._delegate, url);\n    return new Reference(this, childRef);\n  };\n  // Make individual repo go offline.\n  Database.prototype.goOffline = function () {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    return goOffline(this._delegate);\n  };\n  Database.prototype.goOnline = function () {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    return goOnline(this._delegate);\n  };\n  Database.ServerValue = {\n    TIMESTAMP: serverTimestamp(),\n    increment: function (delta) {\n      return increment(delta);\n    }\n  };\n  return Database;\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n */\nvar forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\nvar forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n/* Used by App Manager */\nvar isWebSocketsAvailable = function () {\n  return WebSocketConnection['isAvailable']();\n};\nvar setSecurityDebugCallback = function (ref, callback) {\n  var connection = ref._delegate._repo.persistentConnection_;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  connection.securityDebugCallback_ = callback;\n};\nvar stats = function (ref, showDelta) {\n  repoStats(ref._delegate._repo, showDelta);\n};\nvar statsIncrementCounter = function (ref, metric) {\n  repoStatsIncrementCounter(ref._delegate._repo, metric);\n};\nvar dataUpdateCount = function (ref) {\n  return ref._delegate._repo.dataUpdateCount;\n};\nvar interceptServerData = function (ref, callback) {\n  return repoInterceptServerData(ref._delegate._repo, callback);\n};\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n *\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAuthImpl - custom auth implementation\r\n */\nfunction initStandalone(_a) {\n  var app = _a.app,\n    url = _a.url,\n    version = _a.version,\n    customAuthImpl = _a.customAuthImpl,\n    namespace = _a.namespace,\n    _b = _a.nodeAdmin,\n    nodeAdmin = _b === void 0 ? false : _b;\n  setSDKVersion(version);\n  /**\r\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n   * any actual function.\r\n   */\n  var authProvider = new Provider('auth-internal', new ComponentContainer('database-standalone'));\n  authProvider.setComponent(new Component('auth-internal', function () {\n    return customAuthImpl;\n  }, \"PRIVATE\" /* PRIVATE */));\n  return {\n    instance: new Database(repoManagerDatabaseFromApp(app, authProvider, /* appCheckProvider= */undefined, url, nodeAdmin), app),\n    namespace: namespace\n  };\n}\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData,\n  initStandalone: initStandalone\n});\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DataConnection = PersistentConnection;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nvar RealTimeConnection = Connection;\nvar hijackHash = function (newHash) {\n  var oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\nvar ConnectionTarget = RepoInfo;\nvar queryIdentifier = function (query) {\n  return query._delegate._queryIdentifier;\n};\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n */\nvar forceRestClient = function (forceRestClient) {\n  repoManagerForceRestClient(forceRestClient);\n};\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  forceRestClient: forceRestClient\n});\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ServerValue = Database.ServerValue;\nfunction registerDatabase(instance) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n  // Register the Database Service with the 'firebase' namespace.\n  var namespace = instance.INTERNAL.registerComponent(new Component('database', function (container, _a) {\n    var url = _a.instanceIdentifier;\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var authProvider = container.getProvider('auth-internal');\n    var appCheckProvider = container.getProvider('app-check-internal');\n    return new Database(repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url), app);\n  }, \"PUBLIC\" /* PUBLIC */).setServiceProps(\n  // firebase.database namespace properties\n  {\n    Reference: Reference,\n    Query: Query,\n    Database: Database,\n    DataSnapshot: DataSnapshot,\n    enableLogging: enableLogging,\n    INTERNAL: INTERNAL,\n    ServerValue: ServerValue,\n    TEST_ACCESS: TEST_ACCESS\n  }).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\nregisterDatabase(firebase);\nexport { DataSnapshot, Database, OnDisconnect, Query, Reference, ServerValue, enableLogging, registerDatabase };","map":{"version":3,"mappings":"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","names":["SDK_VERSION","setSDKVersion","version","domStorage_","DOMStorageWrapper","key","value","removeItem","prefixedName_","setItem","stringify","storedVal","getItem","jsonEval","name","prefix_","toString","MemoryStorage","cache_","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","_i","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","set","remove","get","logWrapper","prefix","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called_1","wrappedFn_1","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","appName_","appCheckProvider","appCheck","getImmediate","optional","then","_this","AppCheckTokenProvider","forceRefresh","Promise","resolve","reject","getToken","listener","addTokenListener","firebaseOptions_","authProvider_","auth_","onInit","auth","FirebaseAuthTokenProvider","catch","addAuthTokenListener","removeAuthTokenListener","errorMessage","accessToken","EmulatorTokenProvider","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","RepoInfo","Object","newHost","isCacheableHost","toURLString","repoInfoNeedsQueryParam","repoInfo","isCustomHost","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","amount","counters_","deepCopy","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","onMessage_","PacketReceiver","responseNum","callback","closeAfterResponse","onClose","currentResponseNum","requestNum","pendingResponses","toProcess","this_1","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","log_","stats_","urlFn","BrowserPollConnection","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","_a","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","createElement","close","myDisconnFrame","removeChild","shutdown_","dataStr","bytesSent","incrementCounter","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","bytesReceived","commandCB","onMessageCB","Set","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","open","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","outstandingRequests","size","pendingSegs","currentSerial","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","connectionURL_","device","options","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","handleIncomingFrame","m","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","isInMemoryStorage","frames","totalFrames","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","String","keepaliveTimer","clearInterval","setInterval","send","initTransports_","TransportManager","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","ALL_TRANSPORTS","transport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","transportManager_","start_","Connection","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","connectionCount","onConnectionLost_","everConnected","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","t","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","pendingDataMessages","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","ServerActions","pathString","onComplete","hash","token","stats","allowedEvents_","EventEmitter","eventType","listeners_","listeners","context","validateEventType_","eventData","getInitialEvent","splice","find","et","__extends","_super","isMobileCordova","online_","trigger","OnlineMonitor","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","Path","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","errorPrefix_","parts_","byteLength_","max","stringLength","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","hidden","visibilityChange","visible_","visible","VisibilityMonitor","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","GET_CONNECT_TIMEOUT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","PersistentConnection","nextPersistentConnectionId_","Map","getInstance","on","onVisible_","onOnline_","action","onResponse","curReqNum","requestNumber_","r","connected_","realtime_","sendRequest","requestCBHash_","initConnection_","deferred","Deferred","request","p","q","_queryObject","outstandingGet","outstandingGets_","outstandingGetCount_","index","undefined","sendGet_","promise","currentHashFn","tag","queryId","_queryIdentifier","listens","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","maxReconnectDelay_","tryAppCheck","token_1","authMethod","isValidFormat","requestData","cred","res","invalidAuthTokenCount_","onAuthRevoked_","invalidAppCheckTokenCount_","onAppCheckRevoked_","listen","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","response","putInternal","outstandingPuts_","outstandingPutCount_","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","Date","getTime","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","establishConnectionTimer_","establishConnection_","scheduleConnect_","reconnectDelay_","online","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onDisconnect_1","onRealtimeDisconnect_","nextConnectionId_","canceled_1","connection_1","closeFn","sendRequestFn","forceTokenRefresh_","all","_b","interrupt","error_1","interruptReasons_","isEmpty","delta","serverTimeOffset","put","map","normalizedPathString","statusCode","explanation","notifyForInvalidToken","securityDebugCallback_","console","replace","values","queries","clientName","isReactNative","reportStats","currentlyOnline","node","NamedNode","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","__EMPTY_NODE","KeyIndex","val","assertionError","indexValue","KEY_INDEX","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","SortedMapIterator","color","LLRBNode","RED","SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","n","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","rightParent","minKey","resultGenerator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE","setMaxNode","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","value_","priorityNode_","LeafNode","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","exportFormat","getValue","lazyHash_","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","nodeFromJSON","setNodeFromJSON","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","PRIORITY_INDEX","LOG_2","logBase2","num","bitMask","current_","mask","bits_","Base12Num","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","_defaultIndexMap","fallbackObject","indexes_","indexSet_","IndexMap","indexKey","sortedMap","indexDefinition","existingChildren","sawIndexedValue","iter","getIterator","Wrap","next","getNext","isDefinedOn","newIndex","getCompare","indexName","newIndexSet","newIndexes","indexedChildren","existingSnap","newChildren","children_","indexMap_","ChildrenNode","Default","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","toHash_1","childHash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","setPriorityMaxNode","USE_HINZE","json","jsonLeaf","children_1","childrenHavePriority_1","hinzeJsonObj","childSet","sortedChildSet","node_1","childData","indexPath_","PathIndex","snap","aChild","extractChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","MIN_PUSH_CHAR","MAX_PUSH_CHAR","MAX_KEY_LEN","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","charAt","successor","keyAsInt","i_1","source","sourcePlusOne","repeat","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","index_","IndexedFilter","newChild","affectedPath","optChangeAccumulator","isIndexed","oldChild","hasChild","trackChildChange","withIndex","newSnap","indexedFilter_","startPost_","RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","updateFullNode","hasStart","startName","getIndexStartName","makePost","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","LimitedFilter","numChildren","getIndexedFilter","fullLimitUpdateChild_","hasNext","inRange","getReverseIterator","indexCompare_1","foundStartPost","childKey","childSnap","changeAccumulator","indexCmp_1","oldEventCache","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","startSet_","startAfterSet_","endBeforeSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","queryParamsGetNodeFilter","queryParams","hasLimit","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listenId","getListenId_","thisListen","listens_","queryStringParameters","restRequest_","status_1","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","newSnapshotNode","newSparseSnapshotTree","children","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForget","tree","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","forEach","collection_","StatsListener","newStats","last_","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","collection","server_","statsListener_","reportStats_","StatsReporter","reportedStats","haveStatsToReport","statsToReport_","statsReporterIncludeStat","reporter","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","affectedTree","revert","ACK_USER_WRITE","AckUserWrite","subtree","LISTEN_COMPLETE","ListenComplete","OVERWRITE","Overwrite","MERGE","Merge","node_","fullyInitialized_","filtered_","CacheNode","isFullyInitialized","isCompleteForChild","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","indexedValueChanged","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","getPredecessorChildName","eventGeneratorCompareChanges","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","getNode","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","childPath","relativePath","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","fullPath","toSet","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach_","writeTree_","CompoundWrite","compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite_1","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","layeredCache","merge","mergeAtPath","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","merge_1","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","oldChange","changeMap","oldType","from","NoCompleteChildSource_","NO_COMPLETE_CHILD_SOURCE","writes_","viewCache_","optCompleteServerCache_","WriteTreeCompleteChildSource","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","isFiltered","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorAckUserWrite","viewProcessorRevertUserWrite","viewProcessorListenComplete","getChanges","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","filtersNodes","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","isCompleteForPath","getCompleteChild","newEventSnap","viewProcessorCacheHasChild","curViewCache","foreach","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","serverChildren","initialViewCache","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","EventGenerator","View","viewGetServerCache","view","viewGetCompleteNode","viewGetCompleteServerCache","cache","viewIsEmpty","eventRegistrations_","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","views","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","entries","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","listenProvider_","syncTreeApplyUserOverwrite","syncTree","newData","pendingWriteTree_","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","fromObject","syncTreeAckUserWrite","needToReevaluate","affectedTree_1","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","maybeSyncPoint","syncPointTree_","removedAndEvents","removingDefault","covered","findOnPath","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","queryToTagMap","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","foundAncestorDefaultView","foreachOnPath","pathToSyncPoint","sp","SyncPoint","foreachChild","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","tagToQueryMap","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeGetServerValue","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","splitIndex","fold","maybeChildSyncPoint","childMap","completeView","views_1","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","queries_1","childQueries","queryToStop","ExistingValueProvider","syncTree_","path_","DeferredValueProvider","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","parent","childCount","treeSubTree","pathObj","Tree","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefixFxn","errorPrefix","ValidationPath","hasDotValue_1","hasActualChild_1","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","validatePriority","validateEventType","validateKey","argumentName","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","validateBoolean","bool","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventLists_","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","recursionDepth_","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","forceRestClient_","appCheckProvider_","EventQueue","Repo","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","persistentConnection_","connectStatus","repoOnConnectStatus","repoOnServerInfoUpdate","addTokenChangeListener","refreshAuthToken","refreshAppCheckToken","statsReporter_","infoData_","infoSyncTree_","SyncTree","infoEvents","repoUpdateInfo","serverSyncTree_","eventQueue_","unlisten","repoServerTime","offsetNode","offset","repoGenerateServerValues","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoInterceptServerData","repoRunOnDisconnectEvents","updateSnapshot","repoGetNextWriteId","nextWriteId_","repoGetValue","cached","repoLog","err","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","onDisconnectCancel","repoOnDisconnectSet","onDisconnectPut","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","onDisconnectMerge","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","resume","repoStats","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","repoStatsIncrementCounter","metric","repoStartTransaction","transactionUpdate","unwatcher","applyLocally","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","transactionQueueTree_","nodeQueue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","snapshot","DataEvent","ref","exportVal","CancelEvent","snapshotCallback","cancelCallback","CallbackContext","expDataSnapshot","previousChildName","call","hasCancelCallback","userCallback","OnDisconnect","wrapCallback","_orderByCalled","QueryImpl","ReferenceImpl","getModularInstance","sameRepo","samePath","sameQueryIdentifier","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","hasAnchoredLimit","parentPath","_node","_index","DataSnapshot","childRef","db","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","setWithPriority","callbackContext","ValueEventRegistration","getEventType","onCancel","onValue","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","userCallback_1","onceCallback","dataSnapshot","container","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","off","expCallback","_value","QueryEndAtConstraint","QueryConstraint","endAt","QueryEndBeforeConstraint","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","startAfter","_limit","QueryLimitToFirstConstraint","limitToFirst","limit","QueryLimitToLastConstraint","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","_apply","equalTo","queryConstraints","queryImpl","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","OWNER","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","repoManagerForceRestClient","forceRestClient","_repoInternal","_instanceStarted","_rootInternal","apiName","connectDatabaseEmulator","mockUserToken","createMockUserToken","goOffline","goOnline","SERVER_TIMESTAMP","serverTimestamp","increment","committed","TransactionResult","toJSON","runTransaction","promiseComplete","_delegate","validateArgCount","arguments","validateCallback","cancel","objectToMerge","newObjectToMerge","_database","exists","hasChildren","Reference","getRef","database","Query","cancelCallbackOrContext","ret","getCancelAndContextArgs_","valueCallback","expSnapshot","validateContextObject","failureCallbackOrContext","isEqual","cancelOrContext","_ReferenceImpl","_QueryImpl","transactionResult","expPromise","expRef","ExpOnDisconnect","getKey","getParent","getRoot","_delete","TIMESTAMP","forceLongPolling","forceDisallow","forceAllow","forceWebSockets","setSecurityDebugCallback","connection","statsIncrementCounter","interceptServerData","initStandalone","customAuthImpl","Provider","ComponentContainer","setComponent","Component","instance","_repoManagerDatabaseFromApp","DataConnection","prototype","simpleListen","echo","onEcho","RealTimeConnection","hijackHash","newHash","oldPut","ConnectionTarget","queryIdentifier","ServerValue","registerDatabase","INTERNAL","registerComponent","getProvider","setServiceProps","TEST_ACCESS","setMultipleInstances","registerVersion","module","exports","firebase"],"sources":["/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/version.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/storage/storage.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/util/util.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/AuthTokenProvider.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/realtime/Constants.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/RepoInfo.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/stats/StatsCollection.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/stats/StatsManager.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/realtime/TransportManager.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/realtime/Connection.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/ServerActions.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/util/EventEmitter.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/util/Path.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/PersistentConnection.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/snap/Node.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/snap/indexes/Index.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/util/SortedMap.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/snap/comparators.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/snap/snap.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/snap/LeafNode.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/snap/childSet.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/snap/IndexMap.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/util/NextPushId.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/Change.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/QueryParams.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/SnapshotHolder.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/stats/StatsListener.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/stats/StatsReporter.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/operation/Operation.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/operation/ListenComplete.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/operation/Overwrite.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/operation/Merge.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/CacheNode.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/EventGenerator.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/ViewCache.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/util/ImmutableTree.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/CompoundWrite.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/WriteTree.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/ViewProcessor.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/View.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/SyncPoint.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/SyncTree.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/util/ServerValues.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/util/Tree.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/util/validation.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/EventQueue.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/Repo.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/util/libs/parser.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/Event.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/core/view/EventRegistration.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/exp/OnDisconnect.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/exp/Reference_impl.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/exp/Database.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/exp/ServerValue.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/exp/Transaction.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/api/onDisconnect.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/api/TransactionResult.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/api/Reference.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/api/Database.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/api/internal.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/src/api/test_access.ts","/Users/minkyu/Documents/Coding/Project/stmglobe/node_modules/@firebase/database/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\n\n// TODO: revert to import { QueryContext } from '../view/EventRegistration'; once the modular SDK goes GA\n/**\n * This is part of a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype QueryContext = any;\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = ({ key: node.key, value: node.value } as unknown) as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return ({ key: node.key, value: node.value } as unknown) as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          (namedNode.node as unknown) as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[(key as unknown) as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            pathPopFront(relativePath),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(\n            writesCache,\n            changePath,\n            oldEventSnap.getNode(),\n            serverNode\n          );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../exp/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../exp/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: QueryContext) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(\n  queryKey: string\n): { queryId: string; path: Path } {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateEventType = function (\n  fnName: string,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, 'eventType') +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateBoolean = function (\n  fnName: string,\n  argumentName: string,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: QueryContext): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload as string).withIndex(\n        query._queryParams.getIndex()\n      );\n      const events = syncTreeApplyServerOverwrite(\n        repo.serverSyncTree_,\n        query._path,\n        node\n      );\n      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n      return Promise.resolve(node);\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../exp/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../exp/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n *  to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathChild,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A promise which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with `on()`.\n *\n * Detach a callback previously attached with `on()`. Note that if `on()` was\n * called multiple times with the same eventType and callback, the callback\n * will be called multiple times for each event, and `off()` must be called\n * multiple times to remove the callback. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app-exp';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\n\nimport { ReferenceImpl } from './Reference_impl';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches Repo instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing repo in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a database instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The FirebaseApp associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `FirebaseDatabase` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  return _getProvider(app, 'database-exp').getImmediate({\n    identifier: url\n  }) as Database;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of Firebase.transaction.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `transaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A Promise that can optionally be used instead of the onComplete\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback, Compat } from '@firebase/util';\n\nimport { Indexable } from '../core/util/misc';\nimport { warn } from '../core/util/util';\n\n// TODO: revert to import { OnDisconnect as ExpOnDisconnect } from '../../exp/index'; once the modular SDK goes GA\n/**\n * This is a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ExpOnDisconnect = any;\n\nexport class OnDisconnect implements Compat<ExpOnDisconnect> {\n  constructor(readonly _delegate: ExpOnDisconnect) {}\n\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\n    const result = this._delegate.cancel();\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\n    const result = this._delegate.remove();\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\n    const result = this._delegate.set(value);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateCallback(\n      'OnDisconnect.setWithPriority',\n      'onComplete',\n      onComplete,\n      true\n    );\n    const result = this._delegate.setWithPriority(value, priority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  update(\n    objectToMerge: Indexable,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\n    const result = this._delegate.update(objectToMerge);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount } from '@firebase/util';\n\nimport { DataSnapshot } from './Reference';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Compat,\n  Deferred,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject\n} from '@firebase/util';\n\nimport {\n  OnDisconnect as ExpOnDisconnect,\n  off,\n  onChildAdded,\n  onChildChanged,\n  onChildMoved,\n  onChildRemoved,\n  onValue,\n  EventType,\n  limitToFirst,\n  query,\n  limitToLast,\n  orderByChild,\n  orderByKey,\n  orderByValue,\n  orderByPriority,\n  startAt,\n  startAfter,\n  endAt,\n  endBefore,\n  equalTo,\n  get,\n  set,\n  update,\n  setWithPriority,\n  remove,\n  setPriority,\n  push,\n  runTransaction,\n  _QueryImpl,\n  _ReferenceImpl,\n  child\n} from '../../exp/index'; // import from the exp public API\nimport { warn } from '../core/util/util';\nimport {\n  validateBoolean,\n  validateEventType,\n  validatePathString,\n  validateWritablePath\n} from '../core/util/validation';\nimport { UserCallback } from '../core/view/EventRegistration';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { ThenableReferenceImpl } from '../exp/Reference_impl';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\n\n// TODO: revert to import {  DataSnapshot as ExpDataSnapshot, Query as ExpQuery,\n// Reference as ExpReference,} from '../../exp/index'; once the modular SDK goes GA\n/**\n * This is part of a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype ExpDataSnapshot = any;\ntype ExpQuery = any;\ntype ExpReference = any;\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot implements Compat<ExpDataSnapshot> {\n  constructor(\n    readonly _database: Database,\n    readonly _delegate: ExpDataSnapshot\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this._delegate.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this._delegate.exportVal();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @returns Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return this._delegate.exists();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param path - Path to a child.\n   * @returns DataSnapshot for child node.\n   */\n  child(path: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    path = String(path);\n    validatePathString('DataSnapshot.child', 'path', path, false);\n    return new DataSnapshot(this._database, this._delegate.child(path));\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param path - Path to a child.\n   * @returns Whether the child exists.\n   */\n  hasChild(path: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 'path', path, false);\n    return this._delegate.hasChild(path);\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @returns The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n    return this._delegate.priority;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param action - Callback function to be called\n   * for each child.\n   * @returns True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (snapshot: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 'action', action, false);\n    return this._delegate.forEach(expDataSnapshot =>\n      action(new DataSnapshot(this._database, expDataSnapshot))\n    );\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @returns True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    return this._delegate.hasChildren();\n  }\n\n  get key() {\n    return this._delegate.key;\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @returns The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this._delegate.size;\n  }\n\n  /**\n   * @returns The Firebase reference for the location this snapshot's data came\n   * from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return new Reference(this._database, this._delegate.ref);\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n\nexport interface SnapshotCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query implements Compat<ExpQuery> {\n  constructor(readonly database: Database, readonly _delegate: ExpQuery) {}\n\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateCallback('Query.on', 'callback', callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n    const valueCallback: UserCallback = (expSnapshot, previousChildName?) => {\n      callback.call(\n        ret.context,\n        new DataSnapshot(this.database, expSnapshot),\n        previousChildName\n      );\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = ret.cancel?.bind(ret.context);\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      default:\n        throw new Error(\n          errorPrefix('Query.on', 'eventType') +\n            'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n            '\"child_changed\", or \"child_moved\".'\n        );\n    }\n  }\n\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', eventType, true);\n    validateCallback('Query.off', 'callback', callback, true);\n    validateContextObject('Query.off', 'context', context, true);\n    if (callback) {\n      const valueCallback: UserCallback = () => {};\n      valueCallback.userCallback = callback;\n      valueCallback.context = context;\n      off(this._delegate, eventType as EventType, valueCallback);\n    } else {\n      off(this._delegate, eventType as EventType | undefined);\n    }\n  }\n\n  /**\n   * Get the server-value for this query, or return a cached value if not connected.\n   */\n  get(): Promise<DataSnapshot> {\n    return get(this._delegate).then(expSnapshot => {\n      return new DataSnapshot(this.database, expSnapshot);\n    });\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   */\n  once(\n    eventType: string,\n    callback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateCallback('Query.once', 'callback', callback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n    const deferred = new Deferred<DataSnapshot>();\n    const valueCallback: UserCallback = (expSnapshot, previousChildName?) => {\n      const result = new DataSnapshot(this.database, expSnapshot);\n      if (callback) {\n        callback.call(ret.context, result, previousChildName);\n      }\n      deferred.resolve(result);\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = (error: Error) => {\n      if (ret.cancel) {\n        ret.cancel.call(ret.context, error);\n      }\n      deferred.reject(error);\n    };\n\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      default:\n        throw new Error(\n          errorPrefix('Query.once', 'eventType') +\n            'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n            '\"child_changed\", or \"child_moved\".'\n        );\n    }\n\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToFirst(limit)));\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToLast(limit)));\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByChild(path)));\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByKey()));\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByPriority()));\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByValue()));\n  }\n\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, startAt(value, name))\n    );\n  }\n\n  startAfter(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, startAfter(value, name))\n    );\n  }\n\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endAt(value, name)));\n  }\n\n  endBefore(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, endBefore(value, name))\n    );\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    return new Query(\n      this.database,\n      query(this._delegate, equalTo(value, name))\n    );\n  }\n\n  /**\n   * @returns URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this._delegate.toString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n    return this._delegate.isEqual(other._delegate);\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param fnName - The function name (on or once)\n   *\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | undefined; context: object | undefined } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: undefined, context: undefined };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 'cancel', ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 'context', ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 'cancelOrContext') +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return new Reference(\n      this.database,\n      new _ReferenceImpl(this._delegate._repo, this._delegate._path)\n    );\n  }\n}\n\nexport class Reference extends Query implements Compat<ExpReference> {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   */\n  constructor(readonly database: Database, readonly _delegate: ExpReference) {\n    super(\n      database,\n      new _QueryImpl(_delegate._repo, _delegate._path, new QueryParams(), false)\n    );\n  }\n\n  /** @returns {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n    return this._delegate.key;\n  }\n\n  child(pathString: string): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    }\n    return new Reference(this.database, child(this._delegate, pathString));\n  }\n\n  /** @returns {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n    const parent = this._delegate.parent;\n    return parent ? new Reference(this.database, parent) : null;\n  }\n\n  /** @returns {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n    return new Reference(this.database, this._delegate.root);\n  }\n\n  set(\n    newVal: unknown,\n    onComplete?: (error: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateCallback('Reference.set', 'onComplete', onComplete, true);\n    const result = set(this._delegate, newVal);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  update(\n    values: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n\n    if (Array.isArray(values)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < values.length; ++i) {\n        newObjectToMerge['' + i] = values[i];\n      }\n      values = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateWritablePath('Reference.update', this._delegate._path);\n    validateCallback('Reference.update', 'onComplete', onComplete, true);\n\n    const result = update(this._delegate, values);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateCallback(\n      'Reference.setWithPriority',\n      'onComplete',\n      onComplete,\n      true\n    );\n\n    const result = setWithPriority(this._delegate, newVal, newPriority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateCallback('Reference.remove', 'onComplete', onComplete, true);\n\n    const result = remove(this._delegate);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  transaction(\n    transactionUpdate: (currentData: unknown) => unknown,\n    onComplete?: (\n      error: Error | null,\n      committed: boolean,\n      dataSnapshot: DataSnapshot | null\n    ) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateCallback(\n      'Reference.transaction',\n      'transactionUpdate',\n      transactionUpdate,\n      false\n    );\n    validateCallback('Reference.transaction', 'onComplete', onComplete, true);\n    validateBoolean(\n      'Reference.transaction',\n      'applyLocally',\n      applyLocally,\n      true\n    );\n\n    const result = runTransaction(this._delegate, transactionUpdate, {\n      applyLocally\n    }).then(\n      transactionResult =>\n        new TransactionResult(\n          transactionResult.committed,\n          new DataSnapshot(this.database, transactionResult.snapshot)\n        )\n    );\n    if (onComplete) {\n      result.then(\n        transactionResult =>\n          onComplete(\n            null,\n            transactionResult.committed,\n            transactionResult.snapshot\n          ),\n        error => onComplete(error, false, null)\n      );\n    }\n    return result;\n  }\n\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\n\n    const result = setPriority(this._delegate, priority);\n    if (onComplete) {\n      result.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n    return result;\n  }\n\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateCallback('Reference.push', 'onComplete', onComplete, true);\n\n    const expPromise = push(this._delegate, value) as ThenableReferenceImpl;\n    const promise = expPromise.then(\n      expRef => new Reference(this.database, expRef)\n    );\n\n    if (onComplete) {\n      promise.then(\n        () => onComplete(null),\n        error => onComplete(error)\n      );\n    }\n\n    const result = new Reference(this.database, expPromise);\n    result.then = promise.then.bind(promise);\n    result.catch = promise.catch.bind(promise, undefined);\n    return result;\n  }\n\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this._delegate._path);\n    return new OnDisconnect(\n      new ExpOnDisconnect(this._delegate._repo, this._delegate._path)\n    );\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  validateArgCount,\n  Compat,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport {\n  goOnline,\n  connectDatabaseEmulator,\n  goOffline,\n  ref,\n  refFromURL,\n  increment,\n  serverTimestamp\n} from '../../exp/index'; // import from the exp public API\n\nimport { Reference } from './Reference';\n\n// TODO: revert to import {FirebaseDatabase as ExpDatabase} from '@firebase/database' once modular SDK goes GA\n/**\n * This is a workaround for an issue in the no-modular '@firebase/database' where its typings\n * reference types from `@firebase/app-exp`.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ExpDatabase = any;\n\n/**\n * Class representing a firebase database.\n */\nexport class Database implements FirebaseService, Compat<ExpDatabase> {\n  static readonly ServerValue = {\n    TIMESTAMP: serverTimestamp(),\n    increment: (delta: number) => increment(delta)\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   */\n  constructor(readonly _delegate: ExpDatabase, readonly app: FirebaseApp) {}\n\n  INTERNAL = {\n    delete: () => this._delegate._delete()\n  };\n\n  /**\n   * Modify this instance to communicate with the Realtime Database emulator.\n   *\n   * <p>Note: This method must be called before performing any other operation.\n   *\n   * @param host - the emulator host (ex: localhost)\n   * @param port - the emulator port (ex: 8080)\n   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n   */\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions;\n    } = {}\n  ): void {\n    connectDatabaseEmulator(this._delegate, host, port, options);\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param path - The relative string path or an existing Reference to a database\n   * location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @returns Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    validateArgCount('database.ref', 0, 1, arguments.length);\n    if (path instanceof Reference) {\n      const childRef = refFromURL(this._delegate, path.toString());\n      return new Reference(this, childRef);\n    } else {\n      const childRef = ref(this._delegate, path);\n      return new Reference(this, childRef);\n    }\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @returns Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    const apiName = 'database.refFromURL';\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const childRef = refFromURL(this._delegate, url);\n    return new Reference(this, childRef);\n  }\n\n  // Make individual repo go offline.\n  goOffline(): void {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    return goOffline(this._delegate);\n  }\n\n  goOnline(): void {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    return goOnline(this._delegate);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  Provider\n} from '@firebase/component';\nimport * as types from '@firebase/database-types';\n\nimport { _repoManagerDatabaseFromApp } from '../../exp/index';\nimport {\n  repoInterceptServerData,\n  repoStats,\n  repoStatsIncrementCounter\n} from '../core/Repo';\nimport { setSDKVersion } from '../core/version';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { Database } from './Database';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n */\n\nexport const forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function (): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function (\n  ref: Reference,\n  callback: (a: object) => void\n) {\n  const connection = ref._delegate._repo.persistentConnection_;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (connection as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function (ref: Reference, showDelta?: boolean) {\n  repoStats(ref._delegate._repo, showDelta);\n};\n\nexport const statsIncrementCounter = function (ref: Reference, metric: string) {\n  repoStatsIncrementCounter(ref._delegate._repo, metric);\n};\n\nexport const dataUpdateCount = function (ref: Reference): number {\n  return ref._delegate._repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function (\n  ref: Reference,\n  callback: ((a: string, b: unknown) => void) | null\n) {\n  return repoInterceptServerData(ref._delegate._repo, callback);\n};\n\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n *\n * @param app - A valid FirebaseApp-like object\n * @param url - A valid Firebase databaseURL\n * @param version - custom version e.g. firebase-admin version\n * @param customAuthImpl - custom auth implementation\n */\nexport function initStandalone<T>({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  namespace,\n  nodeAdmin = false\n}: {\n  app: FirebaseApp;\n  url: string;\n  version: string;\n  customAuthImpl: FirebaseAuthInternal;\n  namespace: T;\n  nodeAdmin?: boolean;\n}): {\n  instance: types.Database;\n  namespace: T;\n} {\n  setSDKVersion(version);\n\n  /**\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n   * any actual function.\n   */\n  const authProvider = new Provider<FirebaseAuthInternalName>(\n    'auth-internal',\n    new ComponentContainer('database-standalone')\n  );\n  authProvider.setComponent(\n    new Component('auth-internal', () => customAuthImpl, ComponentType.PRIVATE)\n  );\n\n  return {\n    instance: new Database(\n      _repoManagerDatabaseFromApp(\n        app,\n        authProvider,\n        /* appCheckProvider= */ undefined,\n        url,\n        nodeAdmin\n      ),\n      app\n    ) as types.Database,\n    namespace\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { repoManagerForceRestClient } from '../exp/Database';\nimport { Connection } from '../realtime/Connection';\n\nimport { Query } from './Reference';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\nexport const queryIdentifier = function (query: Query) {\n  return query._delegate._queryIdentifier;\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Component, ComponentType } from '@firebase/component';\nimport * as types from '@firebase/database-types';\nimport { isNodeSdk } from '@firebase/util';\n\nimport { name, version } from './package.json';\nimport { Database } from './src/api/Database';\nimport * as INTERNAL from './src/api/internal';\nimport { DataSnapshot, Query, Reference } from './src/api/Reference';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { enableLogging } from './src/core/util/util';\nimport { setSDKVersion } from './src/core/version';\nimport { repoManagerDatabaseFromApp } from './src/exp/Database';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n\n        return new Database(\n          repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url),\n          app\n        );\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps(\n        // firebase.database namespace properties\n        {\n          Reference,\n          Query,\n          Database,\n          DataSnapshot,\n          enableLogging,\n          INTERNAL,\n          ServerValue,\n          TEST_ACCESS\n        }\n      )\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/Reference';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}